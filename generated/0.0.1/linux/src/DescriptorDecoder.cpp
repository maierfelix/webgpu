/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY webgpu v0.0.9
 */
#include "DescriptorDecoder.h"


static std::unordered_map<std::string, uint32_t> GPUAdapterTypeMap = {
  { "discrete-gpu", 0 },
  { "integrated-gpu", 1 },
  { "cpu", 2 },
  { "unknown", 3 },
};

static std::unordered_map<std::string, uint32_t> GPUAddressModeMap = {
  { "repeat", 0 },
  { "mirror-repeat", 1 },
  { "clamp-to-edge", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUBackendTypeMap = {
  { "null", 0 },
  { "d3d11", 1 },
  { "d3d12", 2 },
  { "metal", 3 },
  { "vulkan", 4 },
  { "opengl", 5 },
  { "opengles", 6 },
};

static std::unordered_map<std::string, uint32_t> GPURayTracingAccelerationGeometryTypeMap = {
  { "triangles", 0 },
  { "aabbs", 1 },
};

static std::unordered_map<std::string, uint32_t> GPURayTracingAccelerationContainerLevelMap = {
  { "bottom", 0 },
  { "top", 1 },
};

static std::unordered_map<std::string, uint32_t> GPURayTracingShaderBindingTableGroupTypeMap = {
  { "general", 0 },
  { "triangles-hit-group", 1 },
  { "procedural-hit-group", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUBindingTypeMap = {
  { "uniform-buffer", 0 },
  { "storage-buffer", 1 },
  { "readonly-storage-buffer", 2 },
  { "sampler", 3 },
  { "sampled-texture", 4 },
  { "storage-texture", 5 },
  { "acceleration-container", 6 },
};

static std::unordered_map<std::string, uint32_t> GPUBlendFactorMap = {
  { "zero", 0 },
  { "one", 1 },
  { "src-color", 2 },
  { "one-minus-src-color", 3 },
  { "src-alpha", 4 },
  { "one-minus-src-alpha", 5 },
  { "dst-color", 6 },
  { "one-minus-dst-color", 7 },
  { "dst-alpha", 8 },
  { "one-minus-dst-alpha", 9 },
  { "src-alpha-saturated", 10 },
  { "blend-color", 11 },
  { "one-minus-blend-color", 12 },
};

static std::unordered_map<std::string, uint32_t> GPUBlendOperationMap = {
  { "add", 0 },
  { "subtract", 1 },
  { "reverse-subtract", 2 },
  { "min", 3 },
  { "max", 4 },
};

static std::unordered_map<std::string, uint32_t> GPUBufferMapAsyncStatusMap = {
  { "success", 0 },
  { "error", 1 },
  { "unknown", 2 },
  { "device-lost", 3 },
};

static std::unordered_map<std::string, uint32_t> GPUCompareFunctionMap = {
  { "never", 0 },
  { "less", 1 },
  { "less-equal", 2 },
  { "greater", 3 },
  { "greater-equal", 4 },
  { "equal", 5 },
  { "not-equal", 6 },
  { "always", 7 },
};

static std::unordered_map<std::string, uint32_t> GPUCullModeMap = {
  { "none", 0 },
  { "front", 1 },
  { "back", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUErrorFilterMap = {
  { "none", 0 },
  { "validation", 1 },
  { "out-of-memory", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUErrorTypeMap = {
  { "no-error", 0 },
  { "validation", 1 },
  { "out-of-memory", 2 },
  { "unknown", 3 },
  { "device-lost", 4 },
};

static std::unordered_map<std::string, uint32_t> GPUFenceCompletionStatusMap = {
  { "success", 0 },
  { "error", 1 },
  { "unknown", 2 },
  { "device-lost", 3 },
};

static std::unordered_map<std::string, uint32_t> GPUFilterModeMap = {
  { "nearest", 0 },
  { "linear", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUFrontFaceMap = {
  { "ccw", 0 },
  { "cw", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUIndexFormatMap = {
  { "uint16", 0 },
  { "uint32", 1 },
  { "none", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUInputStepModeMap = {
  { "vertex", 0 },
  { "instance", 1 },
};

static std::unordered_map<std::string, uint32_t> GPULoadOpMap = {
  { "clear", 0 },
  { "load", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUStoreOpMap = {
  { "store", 0 },
  { "clear", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUPresentModeMap = {
  { "no-v-sync", 0 },
  { "v-sync", 1 },
};

static std::unordered_map<std::string, uint32_t> GPUPrimitiveTopologyMap = {
  { "point-list", 0 },
  { "line-list", 1 },
  { "line-strip", 2 },
  { "triangle-list", 3 },
  { "triangle-strip", 4 },
};

static std::unordered_map<std::string, uint32_t> GPUStencilOperationMap = {
  { "keep", 0 },
  { "zero", 1 },
  { "replace", 2 },
  { "invert", 3 },
  { "increment-clamp", 4 },
  { "decrement-clamp", 5 },
  { "increment-wrap", 6 },
  { "decrement-wrap", 7 },
};

static std::unordered_map<std::string, uint32_t> GPUSTypeMap = {
  { "invalid", 0 },
  { "surface-descriptor-from-metal-layer", 1 },
  { "surface-descriptor-from-windows-hwnd", 2 },
  { "surface-descriptor-from-xlib", 3 },
  { "surface-descriptor-from-html-canvas-id", 4 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureAspectMap = {
  { "all", 0 },
  { "stencil-only", 1 },
  { "depth-only", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureComponentTypeMap = {
  { "float", 0 },
  { "sint", 1 },
  { "uint", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureDimensionMap = {
  { "1d", 0 },
  { "2d", 1 },
  { "3d", 2 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureFormatMap = {
  { "undefined", 0 },
  { "r8unorm", 1 },
  { "r8snorm", 2 },
  { "r8uint", 3 },
  { "r8sint", 4 },
  { "r16uint", 5 },
  { "r16sint", 6 },
  { "r16float", 7 },
  { "rg8unorm", 8 },
  { "rg8snorm", 9 },
  { "rg8uint", 10 },
  { "rg8sint", 11 },
  { "r32float", 12 },
  { "r32uint", 13 },
  { "r32sint", 14 },
  { "rg16uint", 15 },
  { "rg16sint", 16 },
  { "rg16float", 17 },
  { "rgba8unorm", 18 },
  { "rgba8unorm-srgb", 19 },
  { "rgba8snorm", 20 },
  { "rgba8uint", 21 },
  { "rgba8sint", 22 },
  { "bgra8unorm", 23 },
  { "bgra8unorm-srgb", 24 },
  { "rgb10a2unorm", 25 },
  { "rg11b10float", 26 },
  { "rg32float", 27 },
  { "rg32uint", 28 },
  { "rg32sint", 29 },
  { "rgba16uint", 30 },
  { "rgba16sint", 31 },
  { "rgba16float", 32 },
  { "rgba32float", 33 },
  { "rgba32uint", 34 },
  { "rgba32sint", 35 },
  { "depth32float", 36 },
  { "depth24plus", 37 },
  { "depth24plus-stencil8", 38 },
  { "bc1rgba-unorm", 39 },
  { "bc1rgba-unorm-srgb", 40 },
  { "bc2rgba-unorm", 41 },
  { "bc2rgba-unorm-srgb", 42 },
  { "bc3rgba-unorm", 43 },
  { "bc3rgba-unorm-srgb", 44 },
  { "bc4r-unorm", 45 },
  { "bc4r-snorm", 46 },
  { "bc5rg-unorm", 47 },
  { "bc5rg-snorm", 48 },
  { "bc6hrgb-ufloat", 49 },
  { "bc6hrgb-sfloat", 50 },
  { "bc7rgba-unorm", 51 },
  { "bc7rgba-unorm-srgb", 52 },
};

static std::unordered_map<std::string, uint32_t> GPUTextureViewDimensionMap = {
  { "undefined", 0 },
  { "1d", 1 },
  { "2d", 2 },
  { "2darray", 3 },
  { "cube", 4 },
  { "cube-array", 5 },
  { "3d", 6 },
};

static std::unordered_map<std::string, uint32_t> GPUVertexFormatMap = {
  { "uchar2", 0 },
  { "uchar4", 1 },
  { "char2", 2 },
  { "char4", 3 },
  { "uchar2norm", 4 },
  { "uchar4norm", 5 },
  { "char2norm", 6 },
  { "char4norm", 7 },
  { "ushort2", 8 },
  { "ushort4", 9 },
  { "short2", 10 },
  { "short4", 11 },
  { "ushort2norm", 12 },
  { "ushort4norm", 13 },
  { "short2norm", 14 },
  { "short4norm", 15 },
  { "half2", 16 },
  { "half4", 17 },
  { "float", 18 },
  { "float2", 19 },
  { "float3", 20 },
  { "float4", 21 },
  { "uint", 22 },
  { "uint2", 23 },
  { "uint3", 24 },
  { "uint4", 25 },
  { "int", 26 },
  { "int2", 27 },
  { "int3", 28 },
  { "int4", 29 },
};


namespace DescriptorDecoder {

  
  uint32_t GPUAdapterType(std::string name) {
    return GPUAdapterTypeMap[name];
  };
  std::string GPUAdapterType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUAdapterTypeMap),
      std::end(GPUAdapterTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUAdapterTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUAddressMode(std::string name) {
    return GPUAddressModeMap[name];
  };
  std::string GPUAddressMode(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUAddressModeMap),
      std::end(GPUAddressModeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUAddressModeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUBackendType(std::string name) {
    return GPUBackendTypeMap[name];
  };
  std::string GPUBackendType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUBackendTypeMap),
      std::end(GPUBackendTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUBackendTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPURayTracingAccelerationGeometryType(std::string name) {
    return GPURayTracingAccelerationGeometryTypeMap[name];
  };
  std::string GPURayTracingAccelerationGeometryType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPURayTracingAccelerationGeometryTypeMap),
      std::end(GPURayTracingAccelerationGeometryTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPURayTracingAccelerationGeometryTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPURayTracingAccelerationContainerLevel(std::string name) {
    return GPURayTracingAccelerationContainerLevelMap[name];
  };
  std::string GPURayTracingAccelerationContainerLevel(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPURayTracingAccelerationContainerLevelMap),
      std::end(GPURayTracingAccelerationContainerLevelMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPURayTracingAccelerationContainerLevelMap)) return "";

    return it->first;
  };
  
  uint32_t GPURayTracingShaderBindingTableGroupType(std::string name) {
    return GPURayTracingShaderBindingTableGroupTypeMap[name];
  };
  std::string GPURayTracingShaderBindingTableGroupType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPURayTracingShaderBindingTableGroupTypeMap),
      std::end(GPURayTracingShaderBindingTableGroupTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPURayTracingShaderBindingTableGroupTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUBindingType(std::string name) {
    return GPUBindingTypeMap[name];
  };
  std::string GPUBindingType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUBindingTypeMap),
      std::end(GPUBindingTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUBindingTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUBlendFactor(std::string name) {
    return GPUBlendFactorMap[name];
  };
  std::string GPUBlendFactor(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUBlendFactorMap),
      std::end(GPUBlendFactorMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUBlendFactorMap)) return "";

    return it->first;
  };
  
  uint32_t GPUBlendOperation(std::string name) {
    return GPUBlendOperationMap[name];
  };
  std::string GPUBlendOperation(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUBlendOperationMap),
      std::end(GPUBlendOperationMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUBlendOperationMap)) return "";

    return it->first;
  };
  
  uint32_t GPUBufferMapAsyncStatus(std::string name) {
    return GPUBufferMapAsyncStatusMap[name];
  };
  std::string GPUBufferMapAsyncStatus(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUBufferMapAsyncStatusMap),
      std::end(GPUBufferMapAsyncStatusMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUBufferMapAsyncStatusMap)) return "";

    return it->first;
  };
  
  uint32_t GPUCompareFunction(std::string name) {
    return GPUCompareFunctionMap[name];
  };
  std::string GPUCompareFunction(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUCompareFunctionMap),
      std::end(GPUCompareFunctionMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUCompareFunctionMap)) return "";

    return it->first;
  };
  
  uint32_t GPUCullMode(std::string name) {
    return GPUCullModeMap[name];
  };
  std::string GPUCullMode(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUCullModeMap),
      std::end(GPUCullModeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUCullModeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUErrorFilter(std::string name) {
    return GPUErrorFilterMap[name];
  };
  std::string GPUErrorFilter(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUErrorFilterMap),
      std::end(GPUErrorFilterMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUErrorFilterMap)) return "";

    return it->first;
  };
  
  uint32_t GPUErrorType(std::string name) {
    return GPUErrorTypeMap[name];
  };
  std::string GPUErrorType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUErrorTypeMap),
      std::end(GPUErrorTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUErrorTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUFenceCompletionStatus(std::string name) {
    return GPUFenceCompletionStatusMap[name];
  };
  std::string GPUFenceCompletionStatus(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUFenceCompletionStatusMap),
      std::end(GPUFenceCompletionStatusMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUFenceCompletionStatusMap)) return "";

    return it->first;
  };
  
  uint32_t GPUFilterMode(std::string name) {
    return GPUFilterModeMap[name];
  };
  std::string GPUFilterMode(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUFilterModeMap),
      std::end(GPUFilterModeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUFilterModeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUFrontFace(std::string name) {
    return GPUFrontFaceMap[name];
  };
  std::string GPUFrontFace(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUFrontFaceMap),
      std::end(GPUFrontFaceMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUFrontFaceMap)) return "";

    return it->first;
  };
  
  uint32_t GPUIndexFormat(std::string name) {
    return GPUIndexFormatMap[name];
  };
  std::string GPUIndexFormat(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUIndexFormatMap),
      std::end(GPUIndexFormatMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUIndexFormatMap)) return "";

    return it->first;
  };
  
  uint32_t GPUInputStepMode(std::string name) {
    return GPUInputStepModeMap[name];
  };
  std::string GPUInputStepMode(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUInputStepModeMap),
      std::end(GPUInputStepModeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUInputStepModeMap)) return "";

    return it->first;
  };
  
  uint32_t GPULoadOp(std::string name) {
    return GPULoadOpMap[name];
  };
  std::string GPULoadOp(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPULoadOpMap),
      std::end(GPULoadOpMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPULoadOpMap)) return "";

    return it->first;
  };
  
  uint32_t GPUStoreOp(std::string name) {
    return GPUStoreOpMap[name];
  };
  std::string GPUStoreOp(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUStoreOpMap),
      std::end(GPUStoreOpMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUStoreOpMap)) return "";

    return it->first;
  };
  
  uint32_t GPUPresentMode(std::string name) {
    return GPUPresentModeMap[name];
  };
  std::string GPUPresentMode(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUPresentModeMap),
      std::end(GPUPresentModeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUPresentModeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUPrimitiveTopology(std::string name) {
    return GPUPrimitiveTopologyMap[name];
  };
  std::string GPUPrimitiveTopology(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUPrimitiveTopologyMap),
      std::end(GPUPrimitiveTopologyMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUPrimitiveTopologyMap)) return "";

    return it->first;
  };
  
  uint32_t GPUStencilOperation(std::string name) {
    return GPUStencilOperationMap[name];
  };
  std::string GPUStencilOperation(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUStencilOperationMap),
      std::end(GPUStencilOperationMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUStencilOperationMap)) return "";

    return it->first;
  };
  
  uint32_t GPUSType(std::string name) {
    return GPUSTypeMap[name];
  };
  std::string GPUSType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUSTypeMap),
      std::end(GPUSTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUSTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUTextureAspect(std::string name) {
    return GPUTextureAspectMap[name];
  };
  std::string GPUTextureAspect(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUTextureAspectMap),
      std::end(GPUTextureAspectMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUTextureAspectMap)) return "";

    return it->first;
  };
  
  uint32_t GPUTextureComponentType(std::string name) {
    return GPUTextureComponentTypeMap[name];
  };
  std::string GPUTextureComponentType(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUTextureComponentTypeMap),
      std::end(GPUTextureComponentTypeMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUTextureComponentTypeMap)) return "";

    return it->first;
  };
  
  uint32_t GPUTextureDimension(std::string name) {
    return GPUTextureDimensionMap[name];
  };
  std::string GPUTextureDimension(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUTextureDimensionMap),
      std::end(GPUTextureDimensionMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUTextureDimensionMap)) return "";

    return it->first;
  };
  
  uint32_t GPUTextureFormat(std::string name) {
    return GPUTextureFormatMap[name];
  };
  std::string GPUTextureFormat(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUTextureFormatMap),
      std::end(GPUTextureFormatMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUTextureFormatMap)) return "";

    return it->first;
  };
  
  uint32_t GPUTextureViewDimension(std::string name) {
    return GPUTextureViewDimensionMap[name];
  };
  std::string GPUTextureViewDimension(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUTextureViewDimensionMap),
      std::end(GPUTextureViewDimensionMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUTextureViewDimensionMap)) return "";

    return it->first;
  };
  
  uint32_t GPUVertexFormat(std::string name) {
    return GPUVertexFormatMap[name];
  };
  std::string GPUVertexFormat(uint32_t value) {
    auto it = std::find_if(
      std::begin(GPUVertexFormatMap),
      std::end(GPUVertexFormatMap),
      [value](auto&& p) {
        return p.second == value;
      }
    );

    if (it == std::end(GPUVertexFormatMap)) return "";

    return it->first;
  };
  

  
  void DestroyGPUAdapterProperties(WGPUAdapterProperties descriptor) {
    if (descriptor.name) {
      delete[] descriptor.name;
    }
  };
  
  void DestroyGPUBindGroupBinding(WGPUBindGroupBinding descriptor) {
  };
  
  void DestroyGPURayTracingAccelerationGeometryVertexDescriptor(WGPURayTracingAccelerationGeometryVertexDescriptor descriptor) {
  };
  
  void DestroyGPURayTracingAccelerationGeometryIndexDescriptor(WGPURayTracingAccelerationGeometryIndexDescriptor descriptor) {
  };
  
  void DestroyGPURayTracingAccelerationGeometryAabbDescriptor(WGPURayTracingAccelerationGeometryAabbDescriptor descriptor) {
  };
  
  void DestroyGPURayTracingAccelerationGeometryDescriptor(WGPURayTracingAccelerationGeometryDescriptor descriptor) {
    if (descriptor.vertex != nullptr) {
      DestroyGPURayTracingAccelerationGeometryVertexDescriptor(*descriptor.vertex);
      free((void*) const_cast<WGPURayTracingAccelerationGeometryVertexDescriptor*>(descriptor.vertex));
    };
    if (descriptor.index != nullptr) {
      DestroyGPURayTracingAccelerationGeometryIndexDescriptor(*descriptor.index);
      free((void*) const_cast<WGPURayTracingAccelerationGeometryIndexDescriptor*>(descriptor.index));
    };
    if (descriptor.aabb != nullptr) {
      DestroyGPURayTracingAccelerationGeometryAabbDescriptor(*descriptor.aabb);
      free((void*) const_cast<WGPURayTracingAccelerationGeometryAabbDescriptor*>(descriptor.aabb));
    };
  };
  
  void DestroyGPUTransform3D(WGPUTransform3D descriptor) {
  };
  
  void DestroyGPURayTracingAccelerationInstanceTransformDescriptor(WGPURayTracingAccelerationInstanceTransformDescriptor descriptor) {
    if (descriptor.translation != nullptr) {
      DestroyGPUTransform3D(*descriptor.translation);
      free((void*) const_cast<WGPUTransform3D*>(descriptor.translation));
    };
    if (descriptor.rotation != nullptr) {
      DestroyGPUTransform3D(*descriptor.rotation);
      free((void*) const_cast<WGPUTransform3D*>(descriptor.rotation));
    };
    if (descriptor.scale != nullptr) {
      DestroyGPUTransform3D(*descriptor.scale);
      free((void*) const_cast<WGPUTransform3D*>(descriptor.scale));
    };
  };
  
  void DestroyGPURayTracingAccelerationInstanceDescriptor(WGPURayTracingAccelerationInstanceDescriptor descriptor) {
    if (descriptor.transform != nullptr) {
      DestroyGPURayTracingAccelerationInstanceTransformDescriptor(*descriptor.transform);
      free((void*) const_cast<WGPURayTracingAccelerationInstanceTransformDescriptor*>(descriptor.transform));
    };
  };
  
  void DestroyGPURayTracingAccelerationContainerDescriptor(WGPURayTracingAccelerationContainerDescriptor descriptor) {
    if (descriptor.geometryCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.geometryCount; ++ii) {
        DestroyGPURayTracingAccelerationGeometryDescriptor(descriptor.geometries[ii]);
      };
    }
    if (descriptor.geometries) {
      free((void*) const_cast<WGPURayTracingAccelerationGeometryDescriptor*>(descriptor.geometries));
    }
    if (descriptor.instanceCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.instanceCount; ++ii) {
        DestroyGPURayTracingAccelerationInstanceDescriptor(descriptor.instances[ii]);
      };
    }
    if (descriptor.instances) {
      free((void*) const_cast<WGPURayTracingAccelerationInstanceDescriptor*>(descriptor.instances));
    }
  };
  
  void DestroyGPURayTracingShaderBindingTableStagesDescriptor(WGPURayTracingShaderBindingTableStagesDescriptor descriptor) {
  };
  
  void DestroyGPURayTracingShaderBindingTableGroupsDescriptor(WGPURayTracingShaderBindingTableGroupsDescriptor descriptor) {
  };
  
  void DestroyGPURayTracingShaderBindingTableDescriptor(WGPURayTracingShaderBindingTableDescriptor descriptor) {
    if (descriptor.stagesCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.stagesCount; ++ii) {
        DestroyGPURayTracingShaderBindingTableStagesDescriptor(descriptor.stages[ii]);
      };
    }
    if (descriptor.stages) {
      free((void*) const_cast<WGPURayTracingShaderBindingTableStagesDescriptor*>(descriptor.stages));
    }
    if (descriptor.groupsCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.groupsCount; ++ii) {
        DestroyGPURayTracingShaderBindingTableGroupsDescriptor(descriptor.groups[ii]);
      };
    }
    if (descriptor.groups) {
      free((void*) const_cast<WGPURayTracingShaderBindingTableGroupsDescriptor*>(descriptor.groups));
    }
  };
  
  void DestroyGPUBindGroupDescriptor(WGPUBindGroupDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    if (descriptor.bindingCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.bindingCount; ++ii) {
        DestroyGPUBindGroupBinding(descriptor.bindings[ii]);
      };
    }
    if (descriptor.bindings) {
      free((void*) const_cast<WGPUBindGroupBinding*>(descriptor.bindings));
    }
  };
  
  void DestroyGPUBindGroupLayoutBinding(WGPUBindGroupLayoutBinding descriptor) {
  };
  
  void DestroyGPUBindGroupLayoutDescriptor(WGPUBindGroupLayoutDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    if (descriptor.bindingCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.bindingCount; ++ii) {
        DestroyGPUBindGroupLayoutBinding(descriptor.bindings[ii]);
      };
    }
    if (descriptor.bindings) {
      free((void*) const_cast<WGPUBindGroupLayoutBinding*>(descriptor.bindings));
    }
  };
  
  void DestroyGPUBlendDescriptor(WGPUBlendDescriptor descriptor) {
  };
  
  void DestroyGPUColorStateDescriptor(WGPUColorStateDescriptor descriptor) {
    DestroyGPUBlendDescriptor(descriptor.alphaBlend);
    DestroyGPUBlendDescriptor(descriptor.colorBlend);
  };
  
  void DestroyGPUBufferCopyView(WGPUBufferCopyView descriptor) {
  };
  
  void DestroyGPUBufferDescriptor(WGPUBufferDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUCreateBufferMappedResult(WGPUCreateBufferMappedResult descriptor) {
  };
  
  void DestroyGPUColor(WGPUColor descriptor) {
  };
  
  void DestroyGPUCommandBufferDescriptor(WGPUCommandBufferDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUCommandEncoderDescriptor(WGPUCommandEncoderDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUComputePassDescriptor(WGPUComputePassDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUComputePipelineDescriptor(WGPUComputePipelineDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    DestroyGPUProgrammableStageDescriptor(descriptor.computeStage);
  };
  
  void DestroyGPURayTracingPassDescriptor(WGPURayTracingPassDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPURayTracingStateDescriptor(WGPURayTracingStateDescriptor descriptor) {
  };
  
  void DestroyGPURayTracingPipelineDescriptor(WGPURayTracingPipelineDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    if (descriptor.rayTracingState != nullptr) {
      DestroyGPURayTracingStateDescriptor(*descriptor.rayTracingState);
      free((void*) const_cast<WGPURayTracingStateDescriptor*>(descriptor.rayTracingState));
    };
  };
  
  void DestroyGPUDeviceProperties(WGPUDeviceProperties descriptor) {
  };
  
  void DestroyGPUDepthStencilStateDescriptor(WGPUDepthStencilStateDescriptor descriptor) {
    DestroyGPUStencilStateFaceDescriptor(descriptor.stencilFront);
    DestroyGPUStencilStateFaceDescriptor(descriptor.stencilBack);
  };
  
  void DestroyGPUExtent3D(WGPUExtent3D descriptor) {
  };
  
  void DestroyGPUFenceDescriptor(WGPUFenceDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUInstanceDescriptor(WGPUInstanceDescriptor descriptor) {
  };
  
  void DestroyGPUVertexAttributeDescriptor(WGPUVertexAttributeDescriptor descriptor) {
  };
  
  void DestroyGPUVertexBufferLayoutDescriptor(WGPUVertexBufferLayoutDescriptor descriptor) {
    if (descriptor.attributeCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.attributeCount; ++ii) {
        DestroyGPUVertexAttributeDescriptor(descriptor.attributes[ii]);
      };
    }
    if (descriptor.attributes) {
      free((void*) const_cast<WGPUVertexAttributeDescriptor*>(descriptor.attributes));
    }
  };
  
  void DestroyGPUVertexStateDescriptor(WGPUVertexStateDescriptor descriptor) {
    if (descriptor.vertexBufferCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.vertexBufferCount; ++ii) {
        DestroyGPUVertexBufferLayoutDescriptor(descriptor.vertexBuffers[ii]);
      };
    }
    if (descriptor.vertexBuffers) {
      free((void*) const_cast<WGPUVertexBufferLayoutDescriptor*>(descriptor.vertexBuffers));
    }
  };
  
  void DestroyGPUOrigin3D(WGPUOrigin3D descriptor) {
  };
  
  void DestroyGPUPipelineLayoutDescriptor(WGPUPipelineLayoutDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUProgrammableStageDescriptor(WGPUProgrammableStageDescriptor descriptor) {
    if (descriptor.entryPoint) {
      delete[] descriptor.entryPoint;
    }
  };
  
  void DestroyGPURasterizationStateDescriptor(WGPURasterizationStateDescriptor descriptor) {
  };
  
  void DestroyGPURenderBundleDescriptor(WGPURenderBundleDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPURenderBundleEncoderDescriptor(WGPURenderBundleEncoderDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    if (descriptor.colorFormats) {
      free((void*) const_cast<WGPUTextureFormat*>(descriptor.colorFormats));
    }
  };
  
  void DestroyGPURenderPassColorAttachmentDescriptor(WGPURenderPassColorAttachmentDescriptor descriptor) {
    DestroyGPUColor(descriptor.clearColor);
  };
  
  void DestroyGPURenderPassDepthStencilAttachmentDescriptor(WGPURenderPassDepthStencilAttachmentDescriptor descriptor) {
  };
  
  void DestroyGPURenderPassDescriptor(WGPURenderPassDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    if (descriptor.colorAttachmentCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.colorAttachmentCount; ++ii) {
        DestroyGPURenderPassColorAttachmentDescriptor(descriptor.colorAttachments[ii]);
      };
    }
    if (descriptor.colorAttachments) {
      free((void*) const_cast<WGPURenderPassColorAttachmentDescriptor*>(descriptor.colorAttachments));
    }
    if (descriptor.depthStencilAttachment != nullptr) {
      DestroyGPURenderPassDepthStencilAttachmentDescriptor(*descriptor.depthStencilAttachment);
      free((void*) const_cast<WGPURenderPassDepthStencilAttachmentDescriptor*>(descriptor.depthStencilAttachment));
    };
  };
  
  void DestroyGPURenderPipelineDescriptor(WGPURenderPipelineDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    DestroyGPUProgrammableStageDescriptor(descriptor.vertexStage);
    if (descriptor.fragmentStage != nullptr) {
      DestroyGPUProgrammableStageDescriptor(*descriptor.fragmentStage);
      free((void*) const_cast<WGPUProgrammableStageDescriptor*>(descriptor.fragmentStage));
    };
    if (descriptor.vertexState != nullptr) {
      DestroyGPUVertexStateDescriptor(*descriptor.vertexState);
      free((void*) const_cast<WGPUVertexStateDescriptor*>(descriptor.vertexState));
    };
    if (descriptor.rasterizationState != nullptr) {
      DestroyGPURasterizationStateDescriptor(*descriptor.rasterizationState);
      free((void*) const_cast<WGPURasterizationStateDescriptor*>(descriptor.rasterizationState));
    };
    if (descriptor.depthStencilState != nullptr) {
      DestroyGPUDepthStencilStateDescriptor(*descriptor.depthStencilState);
      free((void*) const_cast<WGPUDepthStencilStateDescriptor*>(descriptor.depthStencilState));
    };
    if (descriptor.colorStateCount > 0) {
      for (unsigned int ii = 0; ii < descriptor.colorStateCount; ++ii) {
        DestroyGPUColorStateDescriptor(descriptor.colorStates[ii]);
      };
    }
    if (descriptor.colorStates) {
      free((void*) const_cast<WGPUColorStateDescriptor*>(descriptor.colorStates));
    }
  };
  
  void DestroyGPUSamplerDescriptor(WGPUSamplerDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUShaderModuleDescriptor(WGPUShaderModuleDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUStencilStateFaceDescriptor(WGPUStencilStateFaceDescriptor descriptor) {
  };
  
  void DestroyGPUSurfaceDescriptor(WGPUSurfaceDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUSurfaceDescriptorFromHTMLCanvasId(WGPUSurfaceDescriptorFromHTMLCanvasId descriptor) {
    if (descriptor.id) {
      delete[] descriptor.id;
    }
  };
  
  void DestroyGPUSurfaceDescriptorFromMetalLayer(WGPUSurfaceDescriptorFromMetalLayer descriptor) {
  };
  
  void DestroyGPUSurfaceDescriptorFromWindowsHWND(WGPUSurfaceDescriptorFromWindowsHWND descriptor) {
  };
  
  void DestroyGPUSurfaceDescriptorFromXlib(WGPUSurfaceDescriptorFromXlib descriptor) {
  };
  
  void DestroyGPUSwapChainDescriptor(WGPUSwapChainDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  
  void DestroyGPUTextureCopyView(WGPUTextureCopyView descriptor) {
    DestroyGPUOrigin3D(descriptor.origin);
  };
  
  void DestroyGPUTextureDescriptor(WGPUTextureDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
    DestroyGPUExtent3D(descriptor.size);
  };
  
  void DestroyGPUTextureViewDescriptor(WGPUTextureViewDescriptor descriptor) {
    if (descriptor.label) {
      delete[] descriptor.label;
    }
  };
  

  
  WGPUAdapterProperties DecodeGPUAdapterProperties(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUAdapterProperties descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.name = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("deviceID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'deviceID'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("deviceID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'deviceID'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.deviceID = obj.Get("deviceID").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("vendorID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'vendorID'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("vendorID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'vendorID'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.vendorID = obj.Get("vendorID").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("name").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUAdapterProperties'.'name'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("adapterType").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUAdapterProperties'.'adapterType'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.adapterType = static_cast<WGPUAdapterType>(GPUAdapterType(obj.Get("adapterType").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("backendType").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUAdapterProperties'.'backendType'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.backendType = static_cast<WGPUBackendType>(GPUBackendType(obj.Get("backendType").As<Napi::String>().Utf8Value()));
    return descriptor;
  };
  
  WGPUBindGroupBinding DecodeGPUBindGroupBinding(GPUDevice* device, const Napi::Value& value) {
    WGPUBindGroupBinding descriptor;
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
  descriptor.sampler = nullptr;
  descriptor.textureView = nullptr;
  descriptor.accelerationContainer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'binding'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'binding'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.binding = obj.Get("binding").As<Napi::Number>().Uint32Value();
    if (obj.Has("buffer")) {
      if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPUBindGroupBinding'.'buffer'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    }
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'size'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'size'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    {
      descriptor.size = static_cast<uint64_t>(obj.Get("size").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("sampler")) {
      if (!(obj.Get("sampler").IsObject()) || !(obj.Get("sampler").As<Napi::Object>().InstanceOf(GPUSampler::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUSampler' for 'GPUBindGroupBinding'.'sampler'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.sampler = Napi::ObjectWrap<GPUSampler>::Unwrap(obj.Get("sampler").As<Napi::Object>())->instance;
    }
    if (obj.Has("textureView")) {
      if (!(obj.Get("textureView").IsObject()) || !(obj.Get("textureView").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPUBindGroupBinding'.'textureView'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.textureView = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("textureView").As<Napi::Object>())->instance;
    }
    if (obj.Has("accelerationContainer")) {
      if (!(obj.Get("accelerationContainer").IsObject()) || !(obj.Get("accelerationContainer").As<Napi::Object>().InstanceOf(GPURayTracingAccelerationContainer::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingAccelerationContainer' for 'GPUBindGroupBinding'.'accelerationContainer'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.accelerationContainer = Napi::ObjectWrap<GPURayTracingAccelerationContainer>::Unwrap(obj.Get("accelerationContainer").As<Napi::Object>())->instance;
    }
    return descriptor;
  };
  
  WGPURayTracingAccelerationGeometryVertexDescriptor DecodeGPURayTracingAccelerationGeometryVertexDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingAccelerationGeometryVertexDescriptor descriptor;
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'buffer'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.format = static_cast<WGPUVertexFormat>(GPUVertexFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.stride = obj.Get("stride").As<Napi::Number>().Uint32Value();
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.count = obj.Get("count").As<Napi::Number>().Uint32Value();
    return descriptor;
  };
  
  WGPURayTracingAccelerationGeometryIndexDescriptor DecodeGPURayTracingAccelerationGeometryIndexDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingAccelerationGeometryIndexDescriptor descriptor;
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'buffer'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.format = static_cast<WGPUIndexFormat>(GPUIndexFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.count = obj.Get("count").As<Napi::Number>().Uint32Value();
    return descriptor;
  };
  
  WGPURayTracingAccelerationGeometryAabbDescriptor DecodeGPURayTracingAccelerationGeometryAabbDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingAccelerationGeometryAabbDescriptor descriptor;
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'buffer'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.stride = obj.Get("stride").As<Napi::Number>().Uint32Value();
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.count = obj.Get("count").As<Napi::Number>().Uint32Value();
    return descriptor;
  };
  
  WGPURayTracingAccelerationGeometryDescriptor DecodeGPURayTracingAccelerationGeometryDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingAccelerationGeometryDescriptor descriptor;
    // reset descriptor
  descriptor.flags = static_cast<WGPURayTracingAccelerationGeometryFlag>(0);
  descriptor.type = static_cast<WGPURayTracingAccelerationGeometryType>(0);
  descriptor.vertex = nullptr;
  descriptor.index = nullptr;
  descriptor.aabb = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("flags")) {
      if (!(obj.Get("flags").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryDescriptor'.'flags'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.flags = static_cast<WGPURayTracingAccelerationGeometryFlag>(obj.Get("flags").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("type")) {
      if (!(obj.Get("type").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryDescriptor'.'type'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.type = static_cast<WGPURayTracingAccelerationGeometryType>(GPURayTracingAccelerationGeometryType(obj.Get("type").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("vertex")) {
      if (!(obj.Get("vertex").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationGeometryDescriptor'.'vertex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPURayTracingAccelerationGeometryVertexDescriptor vertex;
        vertex.buffer = nullptr;
        vertex.offset = 0;
        Napi::Object $vertex = obj.Get("vertex").As<Napi::Object>();
        if (!($vertex.Get("buffer").IsObject()) || !($vertex.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'buffer'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        vertex.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap($vertex.Get("buffer").As<Napi::Object>())->instance;
        if (!($vertex.Get("format").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'format'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        vertex.format = static_cast<WGPUVertexFormat>(GPUVertexFormat($vertex.Get("format").As<Napi::String>().Utf8Value()));
        if (!($vertex.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($vertex.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        vertex.stride = $vertex.Get("stride").As<Napi::Number>().Uint32Value();
        if ($vertex.Has("offset")) {
          if (!($vertex.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($vertex.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          {
            vertex.offset = static_cast<uint64_t>($vertex.Get("offset").As<Napi::Number>().Uint32Value());
          }
        }
        if (!($vertex.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($vertex.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        vertex.count = $vertex.Get("count").As<Napi::Number>().Uint32Value();
      {
        descriptor.vertex = (WGPURayTracingAccelerationGeometryVertexDescriptor*) malloc(sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationGeometryVertexDescriptor*>(descriptor.vertex), &vertex, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor));
      }
    }
    if (obj.Has("index")) {
      if (!(obj.Get("index").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationGeometryDescriptor'.'index'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPURayTracingAccelerationGeometryIndexDescriptor index;
        index.buffer = nullptr;
        index.offset = 0;
        Napi::Object $index = obj.Get("index").As<Napi::Object>();
        if (!($index.Get("buffer").IsObject()) || !($index.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'buffer'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        index.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap($index.Get("buffer").As<Napi::Object>())->instance;
        if (!($index.Get("format").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'format'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        index.format = static_cast<WGPUIndexFormat>(GPUIndexFormat($index.Get("format").As<Napi::String>().Utf8Value()));
        if ($index.Has("offset")) {
          if (!($index.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($index.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          {
            index.offset = static_cast<uint64_t>($index.Get("offset").As<Napi::Number>().Uint32Value());
          }
        }
        if (!($index.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($index.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        index.count = $index.Get("count").As<Napi::Number>().Uint32Value();
      {
        descriptor.index = (WGPURayTracingAccelerationGeometryIndexDescriptor*) malloc(sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationGeometryIndexDescriptor*>(descriptor.index), &index, sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor));
      }
    }
    if (obj.Has("aabb")) {
      if (!(obj.Get("aabb").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationGeometryDescriptor'.'aabb'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPURayTracingAccelerationGeometryAabbDescriptor aabb;
        aabb.buffer = nullptr;
        aabb.offset = 0;
        Napi::Object $aabb = obj.Get("aabb").As<Napi::Object>();
        if (!($aabb.Get("buffer").IsObject()) || !($aabb.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'buffer'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        aabb.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap($aabb.Get("buffer").As<Napi::Object>())->instance;
        if (!($aabb.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($aabb.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        aabb.stride = $aabb.Get("stride").As<Napi::Number>().Uint32Value();
        if ($aabb.Has("offset")) {
          if (!($aabb.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($aabb.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          {
            aabb.offset = static_cast<uint64_t>($aabb.Get("offset").As<Napi::Number>().Uint32Value());
          }
        }
        if (!($aabb.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($aabb.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        aabb.count = $aabb.Get("count").As<Napi::Number>().Uint32Value();
      {
        descriptor.aabb = (WGPURayTracingAccelerationGeometryAabbDescriptor*) malloc(sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationGeometryAabbDescriptor*>(descriptor.aabb), &aabb, sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor));
      }
    }
    return descriptor;
  };
  
  WGPUTransform3D DecodeGPUTransform3D(GPUDevice* device, const Napi::Value& value) {
    WGPUTransform3D descriptor;
    // reset descriptor
  descriptor.x = 0.0f;
  descriptor.y = 0.0f;
  descriptor.z = 0.0f;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("x")) {
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.x = obj.Get("x").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("y")) {
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.y = obj.Get("y").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("z")) {
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.z = obj.Get("z").As<Napi::Number>().FloatValue();
    }
    return descriptor;
  };
  
  WGPURayTracingAccelerationInstanceTransformDescriptor DecodeGPURayTracingAccelerationInstanceTransformDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingAccelerationInstanceTransformDescriptor descriptor;
    // reset descriptor
  descriptor.translation = nullptr;
  descriptor.rotation = nullptr;
  descriptor.scale = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("translation")) {
      if (!(obj.Get("translation").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'translation'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPUTransform3D translation;
        translation.x = 0.0f;
        translation.y = 0.0f;
        translation.z = 0.0f;
        Napi::Object $translation = obj.Get("translation").As<Napi::Object>();
        if ($translation.Has("x")) {
          if (!($translation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($translation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          translation.x = $translation.Get("x").As<Napi::Number>().FloatValue();
        }
        if ($translation.Has("y")) {
          if (!($translation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($translation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          translation.y = $translation.Get("y").As<Napi::Number>().FloatValue();
        }
        if ($translation.Has("z")) {
          if (!($translation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($translation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          translation.z = $translation.Get("z").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.translation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
        memcpy(const_cast<WGPUTransform3D*>(descriptor.translation), &translation, sizeof(WGPUTransform3D));
      }
    }
    if (obj.Has("rotation")) {
      if (!(obj.Get("rotation").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'rotation'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPUTransform3D rotation;
        rotation.x = 0.0f;
        rotation.y = 0.0f;
        rotation.z = 0.0f;
        Napi::Object $rotation = obj.Get("rotation").As<Napi::Object>();
        if ($rotation.Has("x")) {
          if (!($rotation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($rotation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rotation.x = $rotation.Get("x").As<Napi::Number>().FloatValue();
        }
        if ($rotation.Has("y")) {
          if (!($rotation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($rotation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rotation.y = $rotation.Get("y").As<Napi::Number>().FloatValue();
        }
        if ($rotation.Has("z")) {
          if (!($rotation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($rotation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rotation.z = $rotation.Get("z").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.rotation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
        memcpy(const_cast<WGPUTransform3D*>(descriptor.rotation), &rotation, sizeof(WGPUTransform3D));
      }
    }
    if (obj.Has("scale")) {
      if (!(obj.Get("scale").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'scale'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPUTransform3D scale;
        scale.x = 0.0f;
        scale.y = 0.0f;
        scale.z = 0.0f;
        Napi::Object $scale = obj.Get("scale").As<Napi::Object>();
        if ($scale.Has("x")) {
          if (!($scale.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($scale.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          scale.x = $scale.Get("x").As<Napi::Number>().FloatValue();
        }
        if ($scale.Has("y")) {
          if (!($scale.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($scale.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          scale.y = $scale.Get("y").As<Napi::Number>().FloatValue();
        }
        if ($scale.Has("z")) {
          if (!($scale.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($scale.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          scale.z = $scale.Get("z").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.scale = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
        memcpy(const_cast<WGPUTransform3D*>(descriptor.scale), &scale, sizeof(WGPUTransform3D));
      }
    }
    return descriptor;
  };
  
  WGPURayTracingAccelerationInstanceDescriptor DecodeGPURayTracingAccelerationInstanceDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingAccelerationInstanceDescriptor descriptor;
    // reset descriptor
  descriptor.flags = static_cast<WGPURayTracingAccelerationInstanceFlag>(0);
  descriptor.mask = 0xFF;
  descriptor.instanceId = 0;
  descriptor.instanceOffset = 0;
  descriptor.transform = nullptr;
  descriptor.transformMatrixSize = 12;
  descriptor.transformMatrix = nullptr;
  descriptor.geometryContainer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("flags")) {
      if (!(obj.Get("flags").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'flags'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.flags = static_cast<WGPURayTracingAccelerationInstanceFlag>(obj.Get("flags").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("mask")) {
      if (!(obj.Get("mask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'mask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("mask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'mask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.mask = obj.Get("mask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("instanceId")) {
      if (!(obj.Get("instanceId").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceId'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("instanceId").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceId'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.instanceId = obj.Get("instanceId").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("instanceOffset")) {
      if (!(obj.Get("instanceOffset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceOffset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("instanceOffset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceOffset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.instanceOffset = obj.Get("instanceOffset").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("transform")) {
      if (!(obj.Get("transform").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceDescriptor'.'transform'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPURayTracingAccelerationInstanceTransformDescriptor transform;
        transform.translation = nullptr;
        transform.rotation = nullptr;
        transform.scale = nullptr;
        Napi::Object $transform = obj.Get("transform").As<Napi::Object>();
        if ($transform.Has("translation")) {
          if (!($transform.Get("translation").IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'translation'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
            WGPUTransform3D translation;
            translation.x = 0.0f;
            translation.y = 0.0f;
            translation.z = 0.0f;
            Napi::Object $translation = $transform.Get("translation").As<Napi::Object>();
            if ($translation.Has("x")) {
              if (!($translation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($translation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              translation.x = $translation.Get("x").As<Napi::Number>().FloatValue();
            }
            if ($translation.Has("y")) {
              if (!($translation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($translation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              translation.y = $translation.Get("y").As<Napi::Number>().FloatValue();
            }
            if ($translation.Has("z")) {
              if (!($translation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($translation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              translation.z = $translation.Get("z").As<Napi::Number>().FloatValue();
            }
          {
            transform.translation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
            memcpy(const_cast<WGPUTransform3D*>(transform.translation), &translation, sizeof(WGPUTransform3D));
          }
        }
        if ($transform.Has("rotation")) {
          if (!($transform.Get("rotation").IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'rotation'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
            WGPUTransform3D rotation;
            rotation.x = 0.0f;
            rotation.y = 0.0f;
            rotation.z = 0.0f;
            Napi::Object $rotation = $transform.Get("rotation").As<Napi::Object>();
            if ($rotation.Has("x")) {
              if (!($rotation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($rotation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              rotation.x = $rotation.Get("x").As<Napi::Number>().FloatValue();
            }
            if ($rotation.Has("y")) {
              if (!($rotation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($rotation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              rotation.y = $rotation.Get("y").As<Napi::Number>().FloatValue();
            }
            if ($rotation.Has("z")) {
              if (!($rotation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($rotation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              rotation.z = $rotation.Get("z").As<Napi::Number>().FloatValue();
            }
          {
            transform.rotation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
            memcpy(const_cast<WGPUTransform3D*>(transform.rotation), &rotation, sizeof(WGPUTransform3D));
          }
        }
        if ($transform.Has("scale")) {
          if (!($transform.Get("scale").IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'scale'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
            WGPUTransform3D scale;
            scale.x = 0.0f;
            scale.y = 0.0f;
            scale.z = 0.0f;
            Napi::Object $scale = $transform.Get("scale").As<Napi::Object>();
            if ($scale.Has("x")) {
              if (!($scale.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($scale.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              scale.x = $scale.Get("x").As<Napi::Number>().FloatValue();
            }
            if ($scale.Has("y")) {
              if (!($scale.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($scale.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              scale.y = $scale.Get("y").As<Napi::Number>().FloatValue();
            }
            if ($scale.Has("z")) {
              if (!($scale.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              if (!($scale.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
              scale.z = $scale.Get("z").As<Napi::Number>().FloatValue();
            }
          {
            transform.scale = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
            memcpy(const_cast<WGPUTransform3D*>(transform.scale), &scale, sizeof(WGPUTransform3D));
          }
        }
      {
        descriptor.transform = (WGPURayTracingAccelerationInstanceTransformDescriptor*) malloc(sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationInstanceTransformDescriptor*>(descriptor.transform), &transform, sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor));
      }
    }
    if (obj.Has("transformMatrix")) {
      if (!(obj.Get("transformMatrix").IsTypedArray())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'TypedArray' for 'GPURayTracingAccelerationInstanceDescriptor'.'transformMatrix'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      Napi::TypedArray array = obj.Get("transformMatrix").As<Napi::TypedArray>();
      Napi::ArrayBuffer buffer = array.ArrayBuffer();
      descriptor.transformMatrix = reinterpret_cast<const float*>(buffer.Data());
    }
    if (!(obj.Get("geometryContainer").IsObject()) || !(obj.Get("geometryContainer").As<Napi::Object>().InstanceOf(GPURayTracingAccelerationContainer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingAccelerationContainer' for 'GPURayTracingAccelerationInstanceDescriptor'.'geometryContainer'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.geometryContainer = Napi::ObjectWrap<GPURayTracingAccelerationContainer>::Unwrap(obj.Get("geometryContainer").As<Napi::Object>())->instance;
    return descriptor;
  };
  
  WGPURayTracingAccelerationContainerDescriptor DecodeGPURayTracingAccelerationContainerDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingAccelerationContainerDescriptor descriptor;
    // reset descriptor
  descriptor.flags = static_cast<WGPURayTracingAccelerationContainerFlag>(0);
  descriptor.level = static_cast<WGPURayTracingAccelerationContainerLevel>(0);
  descriptor.geometryCount = 0;
  descriptor.geometries = nullptr;
  descriptor.instanceCount = 0;
  descriptor.instances = nullptr;
  descriptor.instanceBuffer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("flags")) {
      if (!(obj.Get("flags").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationContainerDescriptor'.'flags'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.flags = static_cast<WGPURayTracingAccelerationContainerFlag>(obj.Get("flags").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("level")) {
      if (!(obj.Get("level").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationContainerDescriptor'.'level'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.level = static_cast<WGPURayTracingAccelerationContainerLevel>(GPURayTracingAccelerationContainerLevel(obj.Get("level").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("geometries")) {
      {
        Napi::Array array = obj.Get("geometries").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingAccelerationGeometryDescriptor* data = (WGPURayTracingAccelerationGeometryDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationGeometryDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationContainerDescriptor'.'geometries'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("geometries").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingAccelerationGeometryDescriptor* data = (WGPURayTracingAccelerationGeometryDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationGeometryDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingAccelerationGeometryDescriptor $geometries = DecodeGPURayTracingAccelerationGeometryDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$geometries),
          sizeof(WGPURayTracingAccelerationGeometryDescriptor)
        );
      };
      descriptor.geometryCount = length;
      descriptor.geometries = data;
    }
    if (obj.Has("instances")) {
      {
        Napi::Array array = obj.Get("instances").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingAccelerationInstanceDescriptor* data = (WGPURayTracingAccelerationInstanceDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationInstanceDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationContainerDescriptor'.'instances'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("instances").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingAccelerationInstanceDescriptor* data = (WGPURayTracingAccelerationInstanceDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationInstanceDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingAccelerationInstanceDescriptor $instances = DecodeGPURayTracingAccelerationInstanceDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$instances),
          sizeof(WGPURayTracingAccelerationInstanceDescriptor)
        );
      };
      descriptor.instanceCount = length;
      descriptor.instances = data;
    }
    if (obj.Has("instanceBuffer")) {
      if (!(obj.Get("instanceBuffer").IsObject()) || !(obj.Get("instanceBuffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationContainerDescriptor'.'instanceBuffer'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.instanceBuffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("instanceBuffer").As<Napi::Object>())->instance;
    }
    return descriptor;
  };
  
  WGPURayTracingShaderBindingTableStagesDescriptor DecodeGPURayTracingShaderBindingTableStagesDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingShaderBindingTableStagesDescriptor descriptor;
    // reset descriptor
  descriptor.module = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("stage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableStagesDescriptor'.'stage'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.stage = static_cast<WGPUShaderStage>(obj.Get("stage").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("module").IsObject()) || !(obj.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPURayTracingShaderBindingTableStagesDescriptor'.'module'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap(obj.Get("module").As<Napi::Object>())->instance;
    return descriptor;
  };
  
  WGPURayTracingShaderBindingTableGroupsDescriptor DecodeGPURayTracingShaderBindingTableGroupsDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingShaderBindingTableGroupsDescriptor descriptor;
    // reset descriptor
  descriptor.type = static_cast<WGPURayTracingShaderBindingTableGroupType>(0);
  descriptor.generalIndex = -1;
  descriptor.closestHitIndex = -1;
  descriptor.anyHitIndex = -1;
  descriptor.intersectionIndex = -1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("type")) {
      if (!(obj.Get("type").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'type'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.type = static_cast<WGPURayTracingShaderBindingTableGroupType>(GPURayTracingShaderBindingTableGroupType(obj.Get("type").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("generalIndex")) {
      if (!(obj.Get("generalIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'generalIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("generalIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'generalIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.generalIndex = obj.Get("generalIndex").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("closestHitIndex")) {
      if (!(obj.Get("closestHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'closestHitIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("closestHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'closestHitIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.closestHitIndex = obj.Get("closestHitIndex").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("anyHitIndex")) {
      if (!(obj.Get("anyHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'anyHitIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("anyHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'anyHitIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.anyHitIndex = obj.Get("anyHitIndex").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("intersectionIndex")) {
      if (!(obj.Get("intersectionIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'intersectionIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("intersectionIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'intersectionIndex'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.intersectionIndex = obj.Get("intersectionIndex").As<Napi::Number>().Int32Value();
    }
    return descriptor;
  };
  
  WGPURayTracingShaderBindingTableDescriptor DecodeGPURayTracingShaderBindingTableDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingShaderBindingTableDescriptor descriptor;
    // reset descriptor
  descriptor.stagesCount = 0;
  descriptor.stages = nullptr;
  descriptor.groupsCount = 0;
  descriptor.groups = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("stages")) {
      {
        Napi::Array array = obj.Get("stages").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingShaderBindingTableStagesDescriptor* data = (WGPURayTracingShaderBindingTableStagesDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableStagesDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingShaderBindingTableDescriptor'.'stages'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("stages").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingShaderBindingTableStagesDescriptor* data = (WGPURayTracingShaderBindingTableStagesDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableStagesDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingShaderBindingTableStagesDescriptor $stages = DecodeGPURayTracingShaderBindingTableStagesDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$stages),
          sizeof(WGPURayTracingShaderBindingTableStagesDescriptor)
        );
      };
      descriptor.stagesCount = length;
      descriptor.stages = data;
    }
    if (obj.Has("groups")) {
      {
        Napi::Array array = obj.Get("groups").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingShaderBindingTableGroupsDescriptor* data = (WGPURayTracingShaderBindingTableGroupsDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingShaderBindingTableDescriptor'.'groups'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("groups").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingShaderBindingTableGroupsDescriptor* data = (WGPURayTracingShaderBindingTableGroupsDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingShaderBindingTableGroupsDescriptor $groups = DecodeGPURayTracingShaderBindingTableGroupsDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$groups),
          sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor)
        );
      };
      descriptor.groupsCount = length;
      descriptor.groups = data;
    }
    return descriptor;
  };
  
  WGPUBindGroupDescriptor DecodeGPUBindGroupDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUBindGroupDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
  descriptor.bindings = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUBindGroupLayout::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBindGroupLayout' for 'GPUBindGroupDescriptor'.'layout'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.layout = Napi::ObjectWrap<GPUBindGroupLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    {
      {
        Napi::Array array = obj.Get("bindings").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUBindGroupBinding* data = (WGPUBindGroupBinding*) malloc(length * sizeof(WGPUBindGroupBinding));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUBindGroupDescriptor'.'bindings'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("bindings").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUBindGroupBinding* data = (WGPUBindGroupBinding*) malloc(length * sizeof(WGPUBindGroupBinding));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUBindGroupBinding $bindings = DecodeGPUBindGroupBinding(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$bindings),
          sizeof(WGPUBindGroupBinding)
        );
      };
      descriptor.bindingCount = length;
      descriptor.bindings = data;
    }
    return descriptor;
  };
  
  WGPUBindGroupLayoutBinding DecodeGPUBindGroupLayoutBinding(GPUDevice* device, const Napi::Value& value) {
    WGPUBindGroupLayoutBinding descriptor;
    // reset descriptor
  descriptor.hasDynamicOffset = false;
  descriptor.multisampled = false;
  descriptor.textureDimension = static_cast<WGPUTextureViewDimension>(0);
  descriptor.textureComponentType = static_cast<WGPUTextureComponentType>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupLayoutBinding'.'binding'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupLayoutBinding'.'binding'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.binding = obj.Get("binding").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("visibility").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupLayoutBinding'.'visibility'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.visibility = static_cast<WGPUShaderStage>(obj.Get("visibility").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("type").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutBinding'.'type'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.type = static_cast<WGPUBindingType>(GPUBindingType(obj.Get("type").As<Napi::String>().Utf8Value()));
    if (obj.Has("hasDynamicOffset")) {
      if (!(obj.Get("hasDynamicOffset").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUBindGroupLayoutBinding'.'hasDynamicOffset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.hasDynamicOffset = obj.Get("hasDynamicOffset").As<Napi::Boolean>().Value();
    }
    if (obj.Has("multisampled")) {
      if (!(obj.Get("multisampled").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUBindGroupLayoutBinding'.'multisampled'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.multisampled = obj.Get("multisampled").As<Napi::Boolean>().Value();
    }
    if (obj.Has("textureDimension")) {
      if (!(obj.Get("textureDimension").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutBinding'.'textureDimension'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.textureDimension = static_cast<WGPUTextureViewDimension>(GPUTextureViewDimension(obj.Get("textureDimension").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("textureComponentType")) {
      if (!(obj.Get("textureComponentType").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutBinding'.'textureComponentType'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.textureComponentType = static_cast<WGPUTextureComponentType>(GPUTextureComponentType(obj.Get("textureComponentType").As<Napi::String>().Utf8Value()));
    }
    return descriptor;
  };
  
  WGPUBindGroupLayoutDescriptor DecodeGPUBindGroupLayoutDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUBindGroupLayoutDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.bindings = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      {
        Napi::Array array = obj.Get("bindings").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUBindGroupLayoutBinding* data = (WGPUBindGroupLayoutBinding*) malloc(length * sizeof(WGPUBindGroupLayoutBinding));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUBindGroupLayoutDescriptor'.'bindings'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("bindings").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUBindGroupLayoutBinding* data = (WGPUBindGroupLayoutBinding*) malloc(length * sizeof(WGPUBindGroupLayoutBinding));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUBindGroupLayoutBinding $bindings = DecodeGPUBindGroupLayoutBinding(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$bindings),
          sizeof(WGPUBindGroupLayoutBinding)
        );
      };
      descriptor.bindingCount = length;
      descriptor.bindings = data;
    }
    return descriptor;
  };
  
  WGPUBlendDescriptor DecodeGPUBlendDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPUBlendDescriptor descriptor;
    // reset descriptor
  descriptor.operation = static_cast<WGPUBlendOperation>(0);
  descriptor.srcFactor = static_cast<WGPUBlendFactor>(1);
  descriptor.dstFactor = static_cast<WGPUBlendFactor>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("operation")) {
      if (!(obj.Get("operation").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'operation'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.operation = static_cast<WGPUBlendOperation>(GPUBlendOperation(obj.Get("operation").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("srcFactor")) {
      if (!(obj.Get("srcFactor").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'srcFactor'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.srcFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor(obj.Get("srcFactor").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("dstFactor")) {
      if (!(obj.Get("dstFactor").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'dstFactor'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.dstFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor(obj.Get("dstFactor").As<Napi::String>().Utf8Value()));
    }
    return descriptor;
  };
  
  WGPUColorStateDescriptor DecodeGPUColorStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUColorStateDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.writeMask = static_cast<WGPUColorWriteMask>(15);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUColorStateDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("alphaBlend").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUColorStateDescriptor'.'alphaBlend'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      descriptor.alphaBlend.operation = static_cast<WGPUBlendOperation>(0);
      descriptor.alphaBlend.srcFactor = static_cast<WGPUBlendFactor>(1);
      descriptor.alphaBlend.dstFactor = static_cast<WGPUBlendFactor>(0);
      Napi::Object $alphaBlend = obj.Get("alphaBlend").As<Napi::Object>();
      if ($alphaBlend.Has("operation")) {
        if (!($alphaBlend.Get("operation").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'operation'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.alphaBlend.operation = static_cast<WGPUBlendOperation>(GPUBlendOperation($alphaBlend.Get("operation").As<Napi::String>().Utf8Value()));
      }
      if ($alphaBlend.Has("srcFactor")) {
        if (!($alphaBlend.Get("srcFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'srcFactor'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.alphaBlend.srcFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($alphaBlend.Get("srcFactor").As<Napi::String>().Utf8Value()));
      }
      if ($alphaBlend.Has("dstFactor")) {
        if (!($alphaBlend.Get("dstFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'dstFactor'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.alphaBlend.dstFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($alphaBlend.Get("dstFactor").As<Napi::String>().Utf8Value()));
      }
    if (!(obj.Get("colorBlend").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUColorStateDescriptor'.'colorBlend'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      descriptor.colorBlend.operation = static_cast<WGPUBlendOperation>(0);
      descriptor.colorBlend.srcFactor = static_cast<WGPUBlendFactor>(1);
      descriptor.colorBlend.dstFactor = static_cast<WGPUBlendFactor>(0);
      Napi::Object $colorBlend = obj.Get("colorBlend").As<Napi::Object>();
      if ($colorBlend.Has("operation")) {
        if (!($colorBlend.Get("operation").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'operation'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.colorBlend.operation = static_cast<WGPUBlendOperation>(GPUBlendOperation($colorBlend.Get("operation").As<Napi::String>().Utf8Value()));
      }
      if ($colorBlend.Has("srcFactor")) {
        if (!($colorBlend.Get("srcFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'srcFactor'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.colorBlend.srcFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($colorBlend.Get("srcFactor").As<Napi::String>().Utf8Value()));
      }
      if ($colorBlend.Has("dstFactor")) {
        if (!($colorBlend.Get("dstFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'dstFactor'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.colorBlend.dstFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($colorBlend.Get("dstFactor").As<Napi::String>().Utf8Value()));
      }
    if (obj.Has("writeMask")) {
      if (!(obj.Get("writeMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColorStateDescriptor'.'writeMask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.writeMask = static_cast<WGPUColorWriteMask>(obj.Get("writeMask").As<Napi::Number>().Uint32Value());
    }
    return descriptor;
  };
  
  WGPUBufferCopyView DecodeGPUBufferCopyView(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUBufferCopyView descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPUBufferCopyView'.'buffer'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'offset'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("rowPitch").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'rowPitch'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("rowPitch").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'rowPitch'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.rowPitch = obj.Get("rowPitch").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("imageHeight").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'imageHeight'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("imageHeight").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'imageHeight'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.imageHeight = obj.Get("imageHeight").As<Napi::Number>().Uint32Value();
    return descriptor;
  };
  
  WGPUBufferDescriptor DecodeGPUBufferDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUBufferDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBufferDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("usage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferDescriptor'.'usage'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.usage = static_cast<WGPUBufferUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferDescriptor'.'size'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferDescriptor'.'size'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    {
      descriptor.size = static_cast<uint64_t>(obj.Get("size").As<Napi::Number>().Uint32Value());
    }
    return descriptor;
  };
  
  WGPUCreateBufferMappedResult DecodeGPUCreateBufferMappedResult(GPUDevice* device, const Napi::Value& value) {
    WGPUCreateBufferMappedResult descriptor;
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.data = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPUCreateBufferMappedResult'.'buffer'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    {
      if (!(obj.Get("data").IsArrayBuffer())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUCreateBufferMappedResult'.'data'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
    }
    return descriptor;
  };
  
  WGPUColor DecodeGPUColor(GPUDevice* device, const Napi::Value& value) {
    WGPUColor descriptor;
    // reset descriptor
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("r").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("r").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.r = obj.Get("r").As<Napi::Number>().FloatValue();
    if (!(obj.Get("g").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("g").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.g = obj.Get("g").As<Napi::Number>().FloatValue();
    if (!(obj.Get("b").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("b").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.b = obj.Get("b").As<Napi::Number>().FloatValue();
    if (!(obj.Get("a").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("a").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.a = obj.Get("a").As<Napi::Number>().FloatValue();
    return descriptor;
  };
  
  WGPUCommandBufferDescriptor DecodeGPUCommandBufferDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUCommandBufferDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUCommandBufferDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    return descriptor;
  };
  
  WGPUCommandEncoderDescriptor DecodeGPUCommandEncoderDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUCommandEncoderDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUCommandEncoderDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    return descriptor;
  };
  
  WGPUComputePassDescriptor DecodeGPUComputePassDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUComputePassDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUComputePassDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    return descriptor;
  };
  
  WGPUComputePipelineDescriptor DecodeGPUComputePipelineDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUComputePipelineDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUComputePipelineDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("layout")) {
      if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUPipelineLayout::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUPipelineLayout' for 'GPUComputePipelineDescriptor'.'layout'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.layout = Napi::ObjectWrap<GPUPipelineLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("computeStage").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUComputePipelineDescriptor'.'computeStage'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      descriptor.computeStage.nextInChain = nullptr;
      descriptor.computeStage.module = nullptr;
      descriptor.computeStage.entryPoint = nullptr;
      Napi::Object $computeStage = obj.Get("computeStage").As<Napi::Object>();
      if (!($computeStage.Get("module").IsObject()) || !($computeStage.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.computeStage.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap($computeStage.Get("module").As<Napi::Object>())->instance;
      {
        if (!($computeStage.Get("entryPoint").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.computeStage.entryPoint = getNAPIStringCopy($computeStage.Get("entryPoint"));
      }
    return descriptor;
  };
  
  WGPURayTracingPassDescriptor DecodeGPURayTracingPassDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPURayTracingPassDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingPassDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    return descriptor;
  };
  
  WGPURayTracingStateDescriptor DecodeGPURayTracingStateDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingStateDescriptor descriptor;
    // reset descriptor
  descriptor.shaderBindingTable = nullptr;
  descriptor.maxRecursionDepth = 1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("shaderBindingTable").IsObject()) || !(obj.Get("shaderBindingTable").As<Napi::Object>().InstanceOf(GPURayTracingShaderBindingTable::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingShaderBindingTable' for 'GPURayTracingStateDescriptor'.'shaderBindingTable'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.shaderBindingTable = Napi::ObjectWrap<GPURayTracingShaderBindingTable>::Unwrap(obj.Get("shaderBindingTable").As<Napi::Object>())->instance;
    if (obj.Has("maxRecursionDepth")) {
      if (!(obj.Get("maxRecursionDepth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("maxRecursionDepth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.maxRecursionDepth = obj.Get("maxRecursionDepth").As<Napi::Number>().Uint32Value();
    }
    return descriptor;
  };
  
  WGPURayTracingPipelineDescriptor DecodeGPURayTracingPipelineDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURayTracingPipelineDescriptor descriptor;
    // reset descriptor
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
  descriptor.rayTracingState = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingPipelineDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("layout")) {
      if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUPipelineLayout::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUPipelineLayout' for 'GPURayTracingPipelineDescriptor'.'layout'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.layout = Napi::ObjectWrap<GPUPipelineLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("rayTracingState").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingPipelineDescriptor'.'rayTracingState'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      WGPURayTracingStateDescriptor rayTracingState;
      rayTracingState.shaderBindingTable = nullptr;
      rayTracingState.maxRecursionDepth = 1;
      Napi::Object $rayTracingState = obj.Get("rayTracingState").As<Napi::Object>();
      if (!($rayTracingState.Get("shaderBindingTable").IsObject()) || !($rayTracingState.Get("shaderBindingTable").As<Napi::Object>().InstanceOf(GPURayTracingShaderBindingTable::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingShaderBindingTable' for 'GPURayTracingStateDescriptor'.'shaderBindingTable'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      rayTracingState.shaderBindingTable = Napi::ObjectWrap<GPURayTracingShaderBindingTable>::Unwrap($rayTracingState.Get("shaderBindingTable").As<Napi::Object>())->instance;
      if ($rayTracingState.Has("maxRecursionDepth")) {
        if (!($rayTracingState.Get("maxRecursionDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($rayTracingState.Get("maxRecursionDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        rayTracingState.maxRecursionDepth = $rayTracingState.Get("maxRecursionDepth").As<Napi::Number>().Uint32Value();
      }
    {
      descriptor.rayTracingState = (WGPURayTracingStateDescriptor*) malloc(sizeof(WGPURayTracingStateDescriptor));
      memcpy(const_cast<WGPURayTracingStateDescriptor*>(descriptor.rayTracingState), &rayTracingState, sizeof(WGPURayTracingStateDescriptor));
    }
    return descriptor;
  };
  
  WGPUDeviceProperties DecodeGPUDeviceProperties(GPUDevice* device, const Napi::Value& value) {
    WGPUDeviceProperties descriptor;
    // reset descriptor
  descriptor.textureCompressionBC = false;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("textureCompressionBC")) {
      if (!(obj.Get("textureCompressionBC").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUDeviceProperties'.'textureCompressionBC'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.textureCompressionBC = obj.Get("textureCompressionBC").As<Napi::Boolean>().Value();
    }
    return descriptor;
  };
  
  WGPUDepthStencilStateDescriptor DecodeGPUDepthStencilStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUDepthStencilStateDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.depthWriteEnabled = false;
  descriptor.depthCompare = static_cast<WGPUCompareFunction>(7);
  descriptor.stencilReadMask = 0xFFFFFFFF;
  descriptor.stencilWriteMask = 0xFFFFFFFF;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (obj.Has("depthWriteEnabled")) {
      if (!(obj.Get("depthWriteEnabled").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUDepthStencilStateDescriptor'.'depthWriteEnabled'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.depthWriteEnabled = obj.Get("depthWriteEnabled").As<Napi::Boolean>().Value();
    }
    if (obj.Has("depthCompare")) {
      if (!(obj.Get("depthCompare").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'depthCompare'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.depthCompare = static_cast<WGPUCompareFunction>(GPUCompareFunction(obj.Get("depthCompare").As<Napi::String>().Utf8Value()));
    }
    if (!(obj.Get("stencilFront").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilFront'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      descriptor.stencilFront.compare = static_cast<WGPUCompareFunction>(7);
      descriptor.stencilFront.failOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilFront.passOp = static_cast<WGPUStencilOperation>(0);
      Napi::Object $stencilFront = obj.Get("stencilFront").As<Napi::Object>();
      if ($stencilFront.Has("compare")) {
        if (!($stencilFront.Get("compare").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilFront.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilFront.Get("compare").As<Napi::String>().Utf8Value()));
      }
      if ($stencilFront.Has("failOp")) {
        if (!($stencilFront.Get("failOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilFront.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("failOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilFront.Has("depthFailOp")) {
        if (!($stencilFront.Get("depthFailOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("depthFailOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilFront.Has("passOp")) {
        if (!($stencilFront.Get("passOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilFront.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("passOp").As<Napi::String>().Utf8Value()));
      }
    if (!(obj.Get("stencilBack").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilBack'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      descriptor.stencilBack.compare = static_cast<WGPUCompareFunction>(7);
      descriptor.stencilBack.failOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilBack.passOp = static_cast<WGPUStencilOperation>(0);
      Napi::Object $stencilBack = obj.Get("stencilBack").As<Napi::Object>();
      if ($stencilBack.Has("compare")) {
        if (!($stencilBack.Get("compare").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilBack.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilBack.Get("compare").As<Napi::String>().Utf8Value()));
      }
      if ($stencilBack.Has("failOp")) {
        if (!($stencilBack.Get("failOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilBack.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("failOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilBack.Has("depthFailOp")) {
        if (!($stencilBack.Get("depthFailOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("depthFailOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilBack.Has("passOp")) {
        if (!($stencilBack.Get("passOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.stencilBack.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("passOp").As<Napi::String>().Utf8Value()));
      }
    if (obj.Has("stencilReadMask")) {
      if (!(obj.Get("stencilReadMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("stencilReadMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.stencilReadMask = obj.Get("stencilReadMask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("stencilWriteMask")) {
      if (!(obj.Get("stencilWriteMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("stencilWriteMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.stencilWriteMask = obj.Get("stencilWriteMask").As<Napi::Number>().Uint32Value();
    }
    return descriptor;
  };
  
  WGPUExtent3D DecodeGPUExtent3D(GPUDevice* device, const Napi::Value& value) {
    WGPUExtent3D descriptor;
    // reset descriptor
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.width = obj.Get("width").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.height = obj.Get("height").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("depth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("depth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.depth = obj.Get("depth").As<Napi::Number>().Uint32Value();
    return descriptor;
  };
  
  WGPUFenceDescriptor DecodeGPUFenceDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUFenceDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.initialValue = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUFenceDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("initialValue")) {
      if (!(obj.Get("initialValue").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUFenceDescriptor'.'initialValue'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("initialValue").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUFenceDescriptor'.'initialValue'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      {
        descriptor.initialValue = static_cast<uint64_t>(obj.Get("initialValue").As<Napi::Number>().Uint32Value());
      }
    }
    return descriptor;
  };
  
  WGPUInstanceDescriptor DecodeGPUInstanceDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUInstanceDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    return descriptor;
  };
  
  WGPUVertexAttributeDescriptor DecodeGPUVertexAttributeDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPUVertexAttributeDescriptor descriptor;
    // reset descriptor
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexAttributeDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.format = static_cast<WGPUVertexFormat>(GPUVertexFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("offset").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'offset'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("offset").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'offset'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    {
      descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
    }
    if (!(obj.Get("shaderLocation").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'shaderLocation'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("shaderLocation").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'shaderLocation'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.shaderLocation = obj.Get("shaderLocation").As<Napi::Number>().Uint32Value();
    return descriptor;
  };
  
  WGPUVertexBufferLayoutDescriptor DecodeGPUVertexBufferLayoutDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPUVertexBufferLayoutDescriptor descriptor;
    // reset descriptor
  descriptor.stepMode = static_cast<WGPUInputStepMode>(0);
  descriptor.attributes = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("arrayStride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexBufferLayoutDescriptor'.'arrayStride'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("arrayStride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexBufferLayoutDescriptor'.'arrayStride'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    {
      descriptor.arrayStride = static_cast<uint64_t>(obj.Get("arrayStride").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("stepMode")) {
      if (!(obj.Get("stepMode").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexBufferLayoutDescriptor'.'stepMode'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.stepMode = static_cast<WGPUInputStepMode>(GPUInputStepMode(obj.Get("stepMode").As<Napi::String>().Utf8Value()));
    }
    {
      {
        Napi::Array array = obj.Get("attributes").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUVertexAttributeDescriptor* data = (WGPUVertexAttributeDescriptor*) malloc(length * sizeof(WGPUVertexAttributeDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUVertexBufferLayoutDescriptor'.'attributes'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("attributes").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUVertexAttributeDescriptor* data = (WGPUVertexAttributeDescriptor*) malloc(length * sizeof(WGPUVertexAttributeDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUVertexAttributeDescriptor $attributes = DecodeGPUVertexAttributeDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$attributes),
          sizeof(WGPUVertexAttributeDescriptor)
        );
      };
      descriptor.attributeCount = length;
      descriptor.attributes = data;
    }
    return descriptor;
  };
  
  WGPUVertexStateDescriptor DecodeGPUVertexStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUVertexStateDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.indexFormat = static_cast<WGPUIndexFormat>(1);
  descriptor.vertexBufferCount = 0;
  descriptor.vertexBuffers = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("indexFormat")) {
      if (!(obj.Get("indexFormat").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexStateDescriptor'.'indexFormat'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.indexFormat = static_cast<WGPUIndexFormat>(GPUIndexFormat(obj.Get("indexFormat").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("vertexBuffers")) {
      {
        Napi::Array array = obj.Get("vertexBuffers").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUVertexStateDescriptor'.'vertexBuffers'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("vertexBuffers").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUVertexBufferLayoutDescriptor $vertexBuffers = DecodeGPUVertexBufferLayoutDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$vertexBuffers),
          sizeof(WGPUVertexBufferLayoutDescriptor)
        );
      };
      descriptor.vertexBufferCount = length;
      descriptor.vertexBuffers = data;
    }
    return descriptor;
  };
  
  WGPUOrigin3D DecodeGPUOrigin3D(GPUDevice* device, const Napi::Value& value) {
    WGPUOrigin3D descriptor;
    // reset descriptor
  descriptor.x = 0;
  descriptor.y = 0;
  descriptor.z = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("x")) {
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.x = obj.Get("x").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("y")) {
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.y = obj.Get("y").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("z")) {
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.z = obj.Get("z").As<Napi::Number>().Uint32Value();
    }
    return descriptor;
  };
  
  WGPUPipelineLayoutDescriptor DecodeGPUPipelineLayoutDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUPipelineLayoutDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.bindGroupLayouts = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUPipelineLayoutDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      {
        Napi::Array array = obj.Get("bindGroupLayouts").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUBindGroupLayout* data = (WGPUBindGroupLayout*) malloc(length * sizeof(WGPUBindGroupLayout));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject()) || !(array.Get(ii).As<Napi::Object>().InstanceOf(GPUBindGroupLayout::constructor.Value()))) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBindGroupLayout' for 'GPUPipelineLayoutDescriptor'.'bindGroupLayouts'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("bindGroupLayouts").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUBindGroupLayout* data = (WGPUBindGroupLayout*) malloc(length * sizeof(WGPUBindGroupLayout));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUBindGroupLayout value = Napi::ObjectWrap<GPUBindGroupLayout>::Unwrap(item)->instance;
        data[ii] = value;
      };
      descriptor.bindGroupLayoutCount = length;
      descriptor.bindGroupLayouts = data;
    }
    return descriptor;
  };
  
  WGPUProgrammableStageDescriptor DecodeGPUProgrammableStageDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUProgrammableStageDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.module = nullptr;
  descriptor.entryPoint = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("module").IsObject()) || !(obj.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap(obj.Get("module").As<Napi::Object>())->instance;
    {
      if (!(obj.Get("entryPoint").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.entryPoint = getNAPIStringCopy(obj.Get("entryPoint"));
    }
    return descriptor;
  };
  
  WGPURasterizationStateDescriptor DecodeGPURasterizationStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPURasterizationStateDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.frontFace = static_cast<WGPUFrontFace>(0);
  descriptor.cullMode = static_cast<WGPUCullMode>(0);
  descriptor.depthBias = 0;
  descriptor.depthBiasSlopeScale = 0.0f;
  descriptor.depthBiasClamp = 0.0f;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("frontFace")) {
      if (!(obj.Get("frontFace").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'frontFace'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.frontFace = static_cast<WGPUFrontFace>(GPUFrontFace(obj.Get("frontFace").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("cullMode")) {
      if (!(obj.Get("cullMode").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'cullMode'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.cullMode = static_cast<WGPUCullMode>(GPUCullMode(obj.Get("cullMode").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("depthBias")) {
      if (!(obj.Get("depthBias").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("depthBias").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.depthBias = obj.Get("depthBias").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("depthBiasSlopeScale")) {
      if (!(obj.Get("depthBiasSlopeScale").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("depthBiasSlopeScale").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.depthBiasSlopeScale = obj.Get("depthBiasSlopeScale").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("depthBiasClamp")) {
      if (!(obj.Get("depthBiasClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("depthBiasClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.depthBiasClamp = obj.Get("depthBiasClamp").As<Napi::Number>().FloatValue();
    }
    return descriptor;
  };
  
  WGPURenderBundleDescriptor DecodeGPURenderBundleDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPURenderBundleDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    return descriptor;
  };
  
  WGPURenderBundleEncoderDescriptor DecodeGPURenderBundleEncoderDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPURenderBundleEncoderDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.colorFormats = nullptr;
  descriptor.depthStencilFormat = static_cast<WGPUTextureFormat>(0);
  descriptor.sampleCount = 1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleEncoderDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      if (!(obj.Get("colorFormats").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleEncoderDescriptor'.'colorFormats'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      Napi::Array array = obj.Get("colorFormats").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUTextureFormat* data = (WGPUTextureFormat*) malloc(length * sizeof(WGPUTextureFormat));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUTextureFormat value = static_cast<WGPUTextureFormat>(
          GPUTextureFormat(item.As<Napi::String>().Utf8Value())
        );
        data[ii] = value;
      };
      descriptor.colorFormats = data;
    }
    if (obj.Has("depthStencilFormat")) {
      if (!(obj.Get("depthStencilFormat").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleEncoderDescriptor'.'depthStencilFormat'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.depthStencilFormat = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("depthStencilFormat").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("sampleCount")) {
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderBundleEncoderDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderBundleEncoderDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }
    return descriptor;
  };
  
  WGPURenderPassColorAttachmentDescriptor DecodeGPURenderPassColorAttachmentDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURenderPassColorAttachmentDescriptor descriptor;
    // reset descriptor
  descriptor.attachment = nullptr;
  descriptor.resolveTarget = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("attachment").IsObject()) || !(obj.Get("attachment").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassColorAttachmentDescriptor'.'attachment'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.attachment = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("attachment").As<Napi::Object>())->instance;
    if (obj.Has("resolveTarget")) {
      if (!(obj.Get("resolveTarget").IsObject()) || !(obj.Get("resolveTarget").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassColorAttachmentDescriptor'.'resolveTarget'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.resolveTarget = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("resolveTarget").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("loadOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassColorAttachmentDescriptor'.'loadOp'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.loadOp = static_cast<WGPULoadOp>(GPULoadOp(obj.Get("loadOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("storeOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassColorAttachmentDescriptor'.'storeOp'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.storeOp = static_cast<WGPUStoreOp>(GPUStoreOp(obj.Get("storeOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("clearColor").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPassColorAttachmentDescriptor'.'clearColor'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      Napi::Object $clearColor = obj.Get("clearColor").As<Napi::Object>();
      if (!($clearColor.Get("r").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!($clearColor.Get("r").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.clearColor.r = $clearColor.Get("r").As<Napi::Number>().FloatValue();
      if (!($clearColor.Get("g").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!($clearColor.Get("g").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.clearColor.g = $clearColor.Get("g").As<Napi::Number>().FloatValue();
      if (!($clearColor.Get("b").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!($clearColor.Get("b").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.clearColor.b = $clearColor.Get("b").As<Napi::Number>().FloatValue();
      if (!($clearColor.Get("a").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!($clearColor.Get("a").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.clearColor.a = $clearColor.Get("a").As<Napi::Number>().FloatValue();
    return descriptor;
  };
  
  WGPURenderPassDepthStencilAttachmentDescriptor DecodeGPURenderPassDepthStencilAttachmentDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPURenderPassDepthStencilAttachmentDescriptor descriptor;
    // reset descriptor
  descriptor.attachment = nullptr;
  descriptor.clearStencil = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("attachment").IsObject()) || !(obj.Get("attachment").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'attachment'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.attachment = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("attachment").As<Napi::Object>())->instance;
    if (!(obj.Get("depthLoadOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthLoadOp'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.depthLoadOp = static_cast<WGPULoadOp>(GPULoadOp(obj.Get("depthLoadOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("depthStoreOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthStoreOp'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.depthStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp(obj.Get("depthStoreOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("clearDepth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("clearDepth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.clearDepth = obj.Get("clearDepth").As<Napi::Number>().FloatValue();
    if (!(obj.Get("stencilLoadOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilLoadOp'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.stencilLoadOp = static_cast<WGPULoadOp>(GPULoadOp(obj.Get("stencilLoadOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("stencilStoreOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilStoreOp'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.stencilStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp(obj.Get("stencilStoreOp").As<Napi::String>().Utf8Value()));
    if (obj.Has("clearStencil")) {
      if (!(obj.Get("clearStencil").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("clearStencil").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.clearStencil = obj.Get("clearStencil").As<Napi::Number>().Uint32Value();
    }
    return descriptor;
  };
  
  WGPURenderPassDescriptor DecodeGPURenderPassDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPURenderPassDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.colorAttachments = nullptr;
  descriptor.depthStencilAttachment = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      {
        Napi::Array array = obj.Get("colorAttachments").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURenderPassColorAttachmentDescriptor* data = (WGPURenderPassColorAttachmentDescriptor*) malloc(length * sizeof(WGPURenderPassColorAttachmentDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPassDescriptor'.'colorAttachments'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("colorAttachments").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURenderPassColorAttachmentDescriptor* data = (WGPURenderPassColorAttachmentDescriptor*) malloc(length * sizeof(WGPURenderPassColorAttachmentDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURenderPassColorAttachmentDescriptor $colorAttachments = DecodeGPURenderPassColorAttachmentDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$colorAttachments),
          sizeof(WGPURenderPassColorAttachmentDescriptor)
        );
      };
      descriptor.colorAttachmentCount = length;
      descriptor.colorAttachments = data;
    }
    if (obj.Has("depthStencilAttachment")) {
      if (!(obj.Get("depthStencilAttachment").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPassDescriptor'.'depthStencilAttachment'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPURenderPassDepthStencilAttachmentDescriptor depthStencilAttachment;
        depthStencilAttachment.attachment = nullptr;
        depthStencilAttachment.clearStencil = 0;
        Napi::Object $depthStencilAttachment = obj.Get("depthStencilAttachment").As<Napi::Object>();
        if (!($depthStencilAttachment.Get("attachment").IsObject()) || !($depthStencilAttachment.Get("attachment").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'attachment'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        depthStencilAttachment.attachment = Napi::ObjectWrap<GPUTextureView>::Unwrap($depthStencilAttachment.Get("attachment").As<Napi::Object>())->instance;
        if (!($depthStencilAttachment.Get("depthLoadOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthLoadOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        depthStencilAttachment.depthLoadOp = static_cast<WGPULoadOp>(GPULoadOp($depthStencilAttachment.Get("depthLoadOp").As<Napi::String>().Utf8Value()));
        if (!($depthStencilAttachment.Get("depthStoreOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthStoreOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        depthStencilAttachment.depthStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp($depthStencilAttachment.Get("depthStoreOp").As<Napi::String>().Utf8Value()));
        if (!($depthStencilAttachment.Get("clearDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($depthStencilAttachment.Get("clearDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        depthStencilAttachment.clearDepth = $depthStencilAttachment.Get("clearDepth").As<Napi::Number>().FloatValue();
        if (!($depthStencilAttachment.Get("stencilLoadOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilLoadOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        depthStencilAttachment.stencilLoadOp = static_cast<WGPULoadOp>(GPULoadOp($depthStencilAttachment.Get("stencilLoadOp").As<Napi::String>().Utf8Value()));
        if (!($depthStencilAttachment.Get("stencilStoreOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilStoreOp'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        depthStencilAttachment.stencilStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp($depthStencilAttachment.Get("stencilStoreOp").As<Napi::String>().Utf8Value()));
        if ($depthStencilAttachment.Has("clearStencil")) {
          if (!($depthStencilAttachment.Get("clearStencil").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($depthStencilAttachment.Get("clearStencil").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          depthStencilAttachment.clearStencil = $depthStencilAttachment.Get("clearStencil").As<Napi::Number>().Uint32Value();
        }
      {
        descriptor.depthStencilAttachment = (WGPURenderPassDepthStencilAttachmentDescriptor*) malloc(sizeof(WGPURenderPassDepthStencilAttachmentDescriptor));
        memcpy(const_cast<WGPURenderPassDepthStencilAttachmentDescriptor*>(descriptor.depthStencilAttachment), &depthStencilAttachment, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor));
      }
    }
    return descriptor;
  };
  
  WGPURenderPipelineDescriptor DecodeGPURenderPipelineDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPURenderPipelineDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
  descriptor.fragmentStage = nullptr;
  descriptor.vertexState = nullptr;
  descriptor.rasterizationState = nullptr;
  descriptor.sampleCount = 1;
  descriptor.depthStencilState = nullptr;
  descriptor.colorStates = nullptr;
  descriptor.sampleMask = 0xFFFFFFFF;
  descriptor.alphaToCoverageEnabled = false;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPipelineDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("layout")) {
      if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUPipelineLayout::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUPipelineLayout' for 'GPURenderPipelineDescriptor'.'layout'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.layout = Napi::ObjectWrap<GPUPipelineLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("vertexStage").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'vertexStage'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      descriptor.vertexStage.nextInChain = nullptr;
      descriptor.vertexStage.module = nullptr;
      descriptor.vertexStage.entryPoint = nullptr;
      Napi::Object $vertexStage = obj.Get("vertexStage").As<Napi::Object>();
      if (!($vertexStage.Get("module").IsObject()) || !($vertexStage.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.vertexStage.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap($vertexStage.Get("module").As<Napi::Object>())->instance;
      {
        if (!($vertexStage.Get("entryPoint").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.vertexStage.entryPoint = getNAPIStringCopy($vertexStage.Get("entryPoint"));
      }
    if (obj.Has("fragmentStage")) {
      if (!(obj.Get("fragmentStage").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'fragmentStage'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPUProgrammableStageDescriptor fragmentStage;
        fragmentStage.nextInChain = nullptr;
        fragmentStage.module = nullptr;
        fragmentStage.entryPoint = nullptr;
        Napi::Object $fragmentStage = obj.Get("fragmentStage").As<Napi::Object>();
        if (!($fragmentStage.Get("module").IsObject()) || !($fragmentStage.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        fragmentStage.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap($fragmentStage.Get("module").As<Napi::Object>())->instance;
        {
          if (!($fragmentStage.Get("entryPoint").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          fragmentStage.entryPoint = getNAPIStringCopy($fragmentStage.Get("entryPoint"));
        }
      {
        descriptor.fragmentStage = (WGPUProgrammableStageDescriptor*) malloc(sizeof(WGPUProgrammableStageDescriptor));
        memcpy(const_cast<WGPUProgrammableStageDescriptor*>(descriptor.fragmentStage), &fragmentStage, sizeof(WGPUProgrammableStageDescriptor));
      }
    }
    if (obj.Has("vertexState")) {
      if (!(obj.Get("vertexState").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'vertexState'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPUVertexStateDescriptor vertexState;
        vertexState.nextInChain = nullptr;
        vertexState.indexFormat = static_cast<WGPUIndexFormat>(1);
        vertexState.vertexBufferCount = 0;
        vertexState.vertexBuffers = nullptr;
        Napi::Object $vertexState = obj.Get("vertexState").As<Napi::Object>();
        if ($vertexState.Has("indexFormat")) {
          if (!($vertexState.Get("indexFormat").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexStateDescriptor'.'indexFormat'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          vertexState.indexFormat = static_cast<WGPUIndexFormat>(GPUIndexFormat($vertexState.Get("indexFormat").As<Napi::String>().Utf8Value()));
        }
        if ($vertexState.Has("vertexBuffers")) {
          {
            Napi::Array array = $vertexState.Get("vertexBuffers").As<Napi::Array>();
            uint32_t length = array.Length();
            WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
            for (unsigned int ii = 0; ii < length; ++ii) {
          if (!(array.Get(ii).IsObject())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUVertexStateDescriptor'.'vertexBuffers'");
                device->throwCallbackError(type, message);
                return descriptor;
              }
            };
          }
          Napi::Array array = $vertexState.Get("vertexBuffers").As<Napi::Array>();
          uint32_t length = array.Length();
          WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
          for (unsigned int ii = 0; ii < length; ++ii) {
            Napi::Object item = array.Get(ii).As<Napi::Object>();
            WGPUVertexBufferLayoutDescriptor $vertexBuffers = DecodeGPUVertexBufferLayoutDescriptor(device, item.As<Napi::Value>());
            memcpy(
              reinterpret_cast<void*>(&data[ii]),
              reinterpret_cast<void*>(&$vertexBuffers),
              sizeof(WGPUVertexBufferLayoutDescriptor)
            );
          };
          vertexState.vertexBufferCount = length;
          vertexState.vertexBuffers = data;
        }
      {
        descriptor.vertexState = (WGPUVertexStateDescriptor*) malloc(sizeof(WGPUVertexStateDescriptor));
        memcpy(const_cast<WGPUVertexStateDescriptor*>(descriptor.vertexState), &vertexState, sizeof(WGPUVertexStateDescriptor));
      }
    }
    if (!(obj.Get("primitiveTopology").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPipelineDescriptor'.'primitiveTopology'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.primitiveTopology = static_cast<WGPUPrimitiveTopology>(GPUPrimitiveTopology(obj.Get("primitiveTopology").As<Napi::String>().Utf8Value()));
    if (obj.Has("rasterizationState")) {
      if (!(obj.Get("rasterizationState").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'rasterizationState'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPURasterizationStateDescriptor rasterizationState;
        rasterizationState.nextInChain = nullptr;
        rasterizationState.frontFace = static_cast<WGPUFrontFace>(0);
        rasterizationState.cullMode = static_cast<WGPUCullMode>(0);
        rasterizationState.depthBias = 0;
        rasterizationState.depthBiasSlopeScale = 0.0f;
        rasterizationState.depthBiasClamp = 0.0f;
        Napi::Object $rasterizationState = obj.Get("rasterizationState").As<Napi::Object>();
        if ($rasterizationState.Has("frontFace")) {
          if (!($rasterizationState.Get("frontFace").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'frontFace'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rasterizationState.frontFace = static_cast<WGPUFrontFace>(GPUFrontFace($rasterizationState.Get("frontFace").As<Napi::String>().Utf8Value()));
        }
        if ($rasterizationState.Has("cullMode")) {
          if (!($rasterizationState.Get("cullMode").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'cullMode'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rasterizationState.cullMode = static_cast<WGPUCullMode>(GPUCullMode($rasterizationState.Get("cullMode").As<Napi::String>().Utf8Value()));
        }
        if ($rasterizationState.Has("depthBias")) {
          if (!($rasterizationState.Get("depthBias").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($rasterizationState.Get("depthBias").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rasterizationState.depthBias = $rasterizationState.Get("depthBias").As<Napi::Number>().Int32Value();
        }
        if ($rasterizationState.Has("depthBiasSlopeScale")) {
          if (!($rasterizationState.Get("depthBiasSlopeScale").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($rasterizationState.Get("depthBiasSlopeScale").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rasterizationState.depthBiasSlopeScale = $rasterizationState.Get("depthBiasSlopeScale").As<Napi::Number>().FloatValue();
        }
        if ($rasterizationState.Has("depthBiasClamp")) {
          if (!($rasterizationState.Get("depthBiasClamp").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($rasterizationState.Get("depthBiasClamp").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          rasterizationState.depthBiasClamp = $rasterizationState.Get("depthBiasClamp").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.rasterizationState = (WGPURasterizationStateDescriptor*) malloc(sizeof(WGPURasterizationStateDescriptor));
        memcpy(const_cast<WGPURasterizationStateDescriptor*>(descriptor.rasterizationState), &rasterizationState, sizeof(WGPURasterizationStateDescriptor));
      }
    }
    if (obj.Has("sampleCount")) {
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("depthStencilState")) {
      if (!(obj.Get("depthStencilState").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'depthStencilState'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
        WGPUDepthStencilStateDescriptor depthStencilState;
        depthStencilState.nextInChain = nullptr;
        depthStencilState.depthWriteEnabled = false;
        depthStencilState.depthCompare = static_cast<WGPUCompareFunction>(7);
        depthStencilState.stencilReadMask = 0xFFFFFFFF;
        depthStencilState.stencilWriteMask = 0xFFFFFFFF;
        Napi::Object $depthStencilState = obj.Get("depthStencilState").As<Napi::Object>();
        if (!($depthStencilState.Get("format").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'format'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        depthStencilState.format = static_cast<WGPUTextureFormat>(GPUTextureFormat($depthStencilState.Get("format").As<Napi::String>().Utf8Value()));
        if ($depthStencilState.Has("depthWriteEnabled")) {
          if (!($depthStencilState.Get("depthWriteEnabled").IsBoolean())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUDepthStencilStateDescriptor'.'depthWriteEnabled'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          depthStencilState.depthWriteEnabled = $depthStencilState.Get("depthWriteEnabled").As<Napi::Boolean>().Value();
        }
        if ($depthStencilState.Has("depthCompare")) {
          if (!($depthStencilState.Get("depthCompare").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'depthCompare'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          depthStencilState.depthCompare = static_cast<WGPUCompareFunction>(GPUCompareFunction($depthStencilState.Get("depthCompare").As<Napi::String>().Utf8Value()));
        }
        if (!($depthStencilState.Get("stencilFront").IsObject())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilFront'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
          depthStencilState.stencilFront.compare = static_cast<WGPUCompareFunction>(7);
          depthStencilState.stencilFront.failOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilFront.passOp = static_cast<WGPUStencilOperation>(0);
          Napi::Object $stencilFront = $depthStencilState.Get("stencilFront").As<Napi::Object>();
          if ($stencilFront.Has("compare")) {
            if (!($stencilFront.Get("compare").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilFront.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilFront.Get("compare").As<Napi::String>().Utf8Value()));
          }
          if ($stencilFront.Has("failOp")) {
            if (!($stencilFront.Get("failOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilFront.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("failOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilFront.Has("depthFailOp")) {
            if (!($stencilFront.Get("depthFailOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("depthFailOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilFront.Has("passOp")) {
            if (!($stencilFront.Get("passOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilFront.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("passOp").As<Napi::String>().Utf8Value()));
          }
        if (!($depthStencilState.Get("stencilBack").IsObject())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilBack'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
          depthStencilState.stencilBack.compare = static_cast<WGPUCompareFunction>(7);
          depthStencilState.stencilBack.failOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilBack.passOp = static_cast<WGPUStencilOperation>(0);
          Napi::Object $stencilBack = $depthStencilState.Get("stencilBack").As<Napi::Object>();
          if ($stencilBack.Has("compare")) {
            if (!($stencilBack.Get("compare").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilBack.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilBack.Get("compare").As<Napi::String>().Utf8Value()));
          }
          if ($stencilBack.Has("failOp")) {
            if (!($stencilBack.Get("failOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilBack.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("failOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilBack.Has("depthFailOp")) {
            if (!($stencilBack.Get("depthFailOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("depthFailOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilBack.Has("passOp")) {
            if (!($stencilBack.Get("passOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
              device->throwCallbackError(type, message);
              return descriptor;
            }
            depthStencilState.stencilBack.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("passOp").As<Napi::String>().Utf8Value()));
          }
        if ($depthStencilState.Has("stencilReadMask")) {
          if (!($depthStencilState.Get("stencilReadMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($depthStencilState.Get("stencilReadMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          depthStencilState.stencilReadMask = $depthStencilState.Get("stencilReadMask").As<Napi::Number>().Uint32Value();
        }
        if ($depthStencilState.Has("stencilWriteMask")) {
          if (!($depthStencilState.Get("stencilWriteMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          if (!($depthStencilState.Get("stencilWriteMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
          depthStencilState.stencilWriteMask = $depthStencilState.Get("stencilWriteMask").As<Napi::Number>().Uint32Value();
        }
      {
        descriptor.depthStencilState = (WGPUDepthStencilStateDescriptor*) malloc(sizeof(WGPUDepthStencilStateDescriptor));
        memcpy(const_cast<WGPUDepthStencilStateDescriptor*>(descriptor.depthStencilState), &depthStencilState, sizeof(WGPUDepthStencilStateDescriptor));
      }
    }
    {
      {
        Napi::Array array = obj.Get("colorStates").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUColorStateDescriptor* data = (WGPUColorStateDescriptor*) malloc(length * sizeof(WGPUColorStateDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'colorStates'");
            device->throwCallbackError(type, message);
            return descriptor;
          }
        };
      }
      Napi::Array array = obj.Get("colorStates").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUColorStateDescriptor* data = (WGPUColorStateDescriptor*) malloc(length * sizeof(WGPUColorStateDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUColorStateDescriptor $colorStates = DecodeGPUColorStateDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$colorStates),
          sizeof(WGPUColorStateDescriptor)
        );
      };
      descriptor.colorStateCount = length;
      descriptor.colorStates = data;
    }
    if (obj.Has("sampleMask")) {
      if (!(obj.Get("sampleMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleMask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("sampleMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleMask'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.sampleMask = obj.Get("sampleMask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("alphaToCoverageEnabled")) {
      if (!(obj.Get("alphaToCoverageEnabled").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPURenderPipelineDescriptor'.'alphaToCoverageEnabled'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.alphaToCoverageEnabled = obj.Get("alphaToCoverageEnabled").As<Napi::Boolean>().Value();
    }
    return descriptor;
  };
  
  WGPUSamplerDescriptor DecodeGPUSamplerDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUSamplerDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.addressModeU = static_cast<WGPUAddressMode>(2);
  descriptor.addressModeV = static_cast<WGPUAddressMode>(2);
  descriptor.addressModeW = static_cast<WGPUAddressMode>(2);
  descriptor.magFilter = static_cast<WGPUFilterMode>(0);
  descriptor.minFilter = static_cast<WGPUFilterMode>(0);
  descriptor.mipmapFilter = static_cast<WGPUFilterMode>(0);
  descriptor.lodMinClamp = 0.0f;
  descriptor.lodMaxClamp = 1000.0f;
  descriptor.compare = static_cast<WGPUCompareFunction>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("addressModeU")) {
      if (!(obj.Get("addressModeU").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'addressModeU'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.addressModeU = static_cast<WGPUAddressMode>(GPUAddressMode(obj.Get("addressModeU").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("addressModeV")) {
      if (!(obj.Get("addressModeV").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'addressModeV'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.addressModeV = static_cast<WGPUAddressMode>(GPUAddressMode(obj.Get("addressModeV").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("addressModeW")) {
      if (!(obj.Get("addressModeW").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'addressModeW'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.addressModeW = static_cast<WGPUAddressMode>(GPUAddressMode(obj.Get("addressModeW").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("magFilter")) {
      if (!(obj.Get("magFilter").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'magFilter'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.magFilter = static_cast<WGPUFilterMode>(GPUFilterMode(obj.Get("magFilter").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("minFilter")) {
      if (!(obj.Get("minFilter").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'minFilter'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.minFilter = static_cast<WGPUFilterMode>(GPUFilterMode(obj.Get("minFilter").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("mipmapFilter")) {
      if (!(obj.Get("mipmapFilter").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'mipmapFilter'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.mipmapFilter = static_cast<WGPUFilterMode>(GPUFilterMode(obj.Get("mipmapFilter").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("lodMinClamp")) {
      if (!(obj.Get("lodMinClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMinClamp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("lodMinClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMinClamp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.lodMinClamp = obj.Get("lodMinClamp").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("lodMaxClamp")) {
      if (!(obj.Get("lodMaxClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMaxClamp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("lodMaxClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMaxClamp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.lodMaxClamp = obj.Get("lodMaxClamp").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("compare")) {
      if (!(obj.Get("compare").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'compare'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction(obj.Get("compare").As<Napi::String>().Utf8Value()));
    }
    return descriptor;
  };
  
  WGPUShaderModuleDescriptor DecodeGPUShaderModuleDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUShaderModuleDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.code = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUShaderModuleDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      if (!(obj.Get("code").IsTypedArray())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'TypedArray' for 'GPUShaderModuleDescriptor'.'code'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      Napi::TypedArray array = obj.Get("code").As<Napi::TypedArray>();
      Napi::ArrayBuffer buffer = array.ArrayBuffer();
      descriptor.code = reinterpret_cast<const uint32_t*>(buffer.Data());
    }
    return descriptor;
  };
  
  WGPUStencilStateFaceDescriptor DecodeGPUStencilStateFaceDescriptor(GPUDevice* device, const Napi::Value& value) {
    WGPUStencilStateFaceDescriptor descriptor;
    // reset descriptor
  descriptor.compare = static_cast<WGPUCompareFunction>(7);
  descriptor.failOp = static_cast<WGPUStencilOperation>(0);
  descriptor.depthFailOp = static_cast<WGPUStencilOperation>(0);
  descriptor.passOp = static_cast<WGPUStencilOperation>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("compare")) {
      if (!(obj.Get("compare").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction(obj.Get("compare").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("failOp")) {
      if (!(obj.Get("failOp").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation(obj.Get("failOp").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("depthFailOp")) {
      if (!(obj.Get("depthFailOp").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation(obj.Get("depthFailOp").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("passOp")) {
      if (!(obj.Get("passOp").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation(obj.Get("passOp").As<Napi::String>().Utf8Value()));
    }
    return descriptor;
  };
  
  WGPUSurfaceDescriptor DecodeGPUSurfaceDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUSurfaceDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSurfaceDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    return descriptor;
  };
  
  WGPUSurfaceDescriptorFromHTMLCanvasId DecodeGPUSurfaceDescriptorFromHTMLCanvasId(GPUDevice* device, const Napi::Value& value) {
    WGPUSurfaceDescriptorFromHTMLCanvasId descriptor;
    // reset descriptor
  descriptor.id = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    {
      if (!(obj.Get("id").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSurfaceDescriptorFromHTMLCanvasId'.'id'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.id = getNAPIStringCopy(obj.Get("id"));
    }
    return descriptor;
  };
  
  WGPUSurfaceDescriptorFromMetalLayer DecodeGPUSurfaceDescriptorFromMetalLayer(GPUDevice* device, const Napi::Value& value) {
    WGPUSurfaceDescriptorFromMetalLayer descriptor;
    // reset descriptor
  descriptor.layer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("layer").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromMetalLayer'.'layer'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    return descriptor;
  };
  
  WGPUSurfaceDescriptorFromWindowsHWND DecodeGPUSurfaceDescriptorFromWindowsHWND(GPUDevice* device, const Napi::Value& value) {
    WGPUSurfaceDescriptorFromWindowsHWND descriptor;
    // reset descriptor
  descriptor.hinstance = nullptr;
  descriptor.hwnd = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("hinstance").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromWindowsHWND'.'hinstance'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("hwnd").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromWindowsHWND'.'hwnd'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    return descriptor;
  };
  
  WGPUSurfaceDescriptorFromXlib DecodeGPUSurfaceDescriptorFromXlib(GPUDevice* device, const Napi::Value& value) {
    WGPUSurfaceDescriptorFromXlib descriptor;
    // reset descriptor
  descriptor.display = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("display").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromXlib'.'display'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("window").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSurfaceDescriptorFromXlib'.'window'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("window").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSurfaceDescriptorFromXlib'.'window'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.window = obj.Get("window").As<Napi::Number>().Uint32Value();
    return descriptor;
  };
  
  WGPUSwapChainDescriptor DecodeGPUSwapChainDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUSwapChainDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.implementation = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSwapChainDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("usage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'usage'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.usage = static_cast<WGPUTextureUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSwapChainDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'width'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'width'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.width = obj.Get("width").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'height'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'height'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.height = obj.Get("height").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("presentMode").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSwapChainDescriptor'.'presentMode'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.presentMode = static_cast<WGPUPresentMode>(GPUPresentMode(obj.Get("presentMode").As<Napi::String>().Utf8Value()));
    if (obj.Has("implementation")) {
      if (!(obj.Get("implementation").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'implementation'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("implementation").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'implementation'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      {
        descriptor.implementation = static_cast<uint64_t>(obj.Get("implementation").As<Napi::Number>().Uint32Value());
      }
    }
    return descriptor;
  };
  
  WGPUTextureCopyView DecodeGPUTextureCopyView(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUTextureCopyView descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.texture = nullptr;
  descriptor.mipLevel = 0;
  descriptor.arrayLayer = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("texture").IsObject()) || !(obj.Get("texture").As<Napi::Object>().InstanceOf(GPUTexture::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTexture' for 'GPUTextureCopyView'.'texture'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.texture = Napi::ObjectWrap<GPUTexture>::Unwrap(obj.Get("texture").As<Napi::Object>())->instance;
    if (obj.Has("mipLevel")) {
      if (!(obj.Get("mipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'mipLevel'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("mipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'mipLevel'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.mipLevel = obj.Get("mipLevel").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("arrayLayer")) {
      if (!(obj.Get("arrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'arrayLayer'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("arrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'arrayLayer'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.arrayLayer = obj.Get("arrayLayer").As<Napi::Number>().Uint32Value();
    }
    if (!(obj.Get("origin").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUTextureCopyView'.'origin'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      descriptor.origin.x = 0;
      descriptor.origin.y = 0;
      descriptor.origin.z = 0;
      Napi::Object $origin = obj.Get("origin").As<Napi::Object>();
      if ($origin.Has("x")) {
        if (!($origin.Get("x").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($origin.Get("x").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.origin.x = $origin.Get("x").As<Napi::Number>().Uint32Value();
      }
      if ($origin.Has("y")) {
        if (!($origin.Get("y").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($origin.Get("y").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.origin.y = $origin.Get("y").As<Napi::Number>().Uint32Value();
      }
      if ($origin.Has("z")) {
        if (!($origin.Get("z").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        if (!($origin.Get("z").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
          device->throwCallbackError(type, message);
          return descriptor;
        }
        descriptor.origin.z = $origin.Get("z").As<Napi::Number>().Uint32Value();
      }
    return descriptor;
  };
  
  WGPUTextureDescriptor DecodeGPUTextureDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUTextureDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.dimension = static_cast<WGPUTextureDimension>(1);
  descriptor.arrayLayerCount = 1;
  descriptor.mipLevelCount = 1;
  descriptor.sampleCount = 1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("usage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'usage'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.usage = static_cast<WGPUTextureUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    if (obj.Has("dimension")) {
      if (!(obj.Get("dimension").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureDescriptor'.'dimension'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.dimension = static_cast<WGPUTextureDimension>(GPUTextureDimension(obj.Get("dimension").As<Napi::String>().Utf8Value()));
    }
    if (!(obj.Get("size").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUTextureDescriptor'.'size'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
      Napi::Object $size = obj.Get("size").As<Napi::Object>();
      if (!($size.Get("width").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!($size.Get("width").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.size.width = $size.Get("width").As<Napi::Number>().Uint32Value();
      if (!($size.Get("height").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!($size.Get("height").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.size.height = $size.Get("height").As<Napi::Number>().Uint32Value();
      if (!($size.Get("depth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!($size.Get("depth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.size.depth = $size.Get("depth").As<Napi::Number>().Uint32Value();
    if (obj.Has("arrayLayerCount")) {
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.arrayLayerCount = obj.Get("arrayLayerCount").As<Napi::Number>().Uint32Value();
    }
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return descriptor;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (obj.Has("mipLevelCount")) {
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.mipLevelCount = obj.Get("mipLevelCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("sampleCount")) {
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }
    return descriptor;
  };
  
  WGPUTextureViewDescriptor DecodeGPUTextureViewDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    WGPUTextureViewDescriptor descriptor;
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.format = static_cast<WGPUTextureFormat>(0);
  descriptor.dimension = static_cast<WGPUTextureViewDimension>(0);
  descriptor.baseMipLevel = 0;
  descriptor.mipLevelCount = 0;
  descriptor.baseArrayLayer = 0;
  descriptor.arrayLayerCount = 0;
  descriptor.aspect = static_cast<WGPUTextureAspect>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("format")) {
      if (!(obj.Get("format").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'format'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("dimension")) {
      if (!(obj.Get("dimension").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'dimension'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.dimension = static_cast<WGPUTextureViewDimension>(GPUTextureViewDimension(obj.Get("dimension").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("baseMipLevel")) {
      if (!(obj.Get("baseMipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseMipLevel'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("baseMipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseMipLevel'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.baseMipLevel = obj.Get("baseMipLevel").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("mipLevelCount")) {
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.mipLevelCount = obj.Get("mipLevelCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("baseArrayLayer")) {
      if (!(obj.Get("baseArrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseArrayLayer'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("baseArrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseArrayLayer'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.baseArrayLayer = obj.Get("baseArrayLayer").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("arrayLayerCount")) {
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.arrayLayerCount = obj.Get("arrayLayerCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("aspect")) {
      if (!(obj.Get("aspect").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'aspect'");
        device->throwCallbackError(type, message);
        return descriptor;
      }
      descriptor.aspect = static_cast<WGPUTextureAspect>(GPUTextureAspect(obj.Get("aspect").As<Napi::String>().Utf8Value()));
    }
    return descriptor;
  };
  

  
  GPUAdapterProperties::GPUAdapterProperties(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.name = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("deviceID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'deviceID'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("deviceID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'deviceID'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.deviceID = obj.Get("deviceID").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("vendorID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'vendorID'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("vendorID").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUAdapterProperties'.'vendorID'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.vendorID = obj.Get("vendorID").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("name").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUAdapterProperties'.'name'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("adapterType").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUAdapterProperties'.'adapterType'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.adapterType = static_cast<WGPUAdapterType>(GPUAdapterType(obj.Get("adapterType").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("backendType").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUAdapterProperties'.'backendType'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.backendType = static_cast<WGPUBackendType>(GPUBackendType(obj.Get("backendType").As<Napi::String>().Utf8Value()));
  };
  GPUAdapterProperties::~GPUAdapterProperties() {
    DestroyGPUAdapterProperties(descriptor);
  };
  
  GPUBindGroupBinding::GPUBindGroupBinding(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
  descriptor.sampler = nullptr;
  descriptor.textureView = nullptr;
  descriptor.accelerationContainer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'binding'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'binding'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.binding = obj.Get("binding").As<Napi::Number>().Uint32Value();
    if (obj.Has("buffer")) {
      if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPUBindGroupBinding'.'buffer'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    }
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'size'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupBinding'.'size'");
      device->throwCallbackError(type, message);
      return ;
    }
    {
      descriptor.size = static_cast<uint64_t>(obj.Get("size").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("sampler")) {
      if (!(obj.Get("sampler").IsObject()) || !(obj.Get("sampler").As<Napi::Object>().InstanceOf(GPUSampler::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUSampler' for 'GPUBindGroupBinding'.'sampler'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.sampler = Napi::ObjectWrap<GPUSampler>::Unwrap(obj.Get("sampler").As<Napi::Object>())->instance;
    }
    if (obj.Has("textureView")) {
      if (!(obj.Get("textureView").IsObject()) || !(obj.Get("textureView").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPUBindGroupBinding'.'textureView'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.textureView = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("textureView").As<Napi::Object>())->instance;
    }
    if (obj.Has("accelerationContainer")) {
      if (!(obj.Get("accelerationContainer").IsObject()) || !(obj.Get("accelerationContainer").As<Napi::Object>().InstanceOf(GPURayTracingAccelerationContainer::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingAccelerationContainer' for 'GPUBindGroupBinding'.'accelerationContainer'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.accelerationContainer = Napi::ObjectWrap<GPURayTracingAccelerationContainer>::Unwrap(obj.Get("accelerationContainer").As<Napi::Object>())->instance;
    }
  };
  GPUBindGroupBinding::~GPUBindGroupBinding() {
    DestroyGPUBindGroupBinding(descriptor);
  };
  
  GPURayTracingAccelerationGeometryVertexDescriptor::GPURayTracingAccelerationGeometryVertexDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'buffer'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.format = static_cast<WGPUVertexFormat>(GPUVertexFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.stride = obj.Get("stride").As<Napi::Number>().Uint32Value();
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.count = obj.Get("count").As<Napi::Number>().Uint32Value();
  };
  GPURayTracingAccelerationGeometryVertexDescriptor::~GPURayTracingAccelerationGeometryVertexDescriptor() {
    DestroyGPURayTracingAccelerationGeometryVertexDescriptor(descriptor);
  };
  
  GPURayTracingAccelerationGeometryIndexDescriptor::GPURayTracingAccelerationGeometryIndexDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'buffer'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.format = static_cast<WGPUIndexFormat>(GPUIndexFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.count = obj.Get("count").As<Napi::Number>().Uint32Value();
  };
  GPURayTracingAccelerationGeometryIndexDescriptor::~GPURayTracingAccelerationGeometryIndexDescriptor() {
    DestroyGPURayTracingAccelerationGeometryIndexDescriptor(descriptor);
  };
  
  GPURayTracingAccelerationGeometryAabbDescriptor::GPURayTracingAccelerationGeometryAabbDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'buffer'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("stride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.stride = obj.Get("stride").As<Napi::Number>().Uint32Value();
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("count").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.count = obj.Get("count").As<Napi::Number>().Uint32Value();
  };
  GPURayTracingAccelerationGeometryAabbDescriptor::~GPURayTracingAccelerationGeometryAabbDescriptor() {
    DestroyGPURayTracingAccelerationGeometryAabbDescriptor(descriptor);
  };
  
  GPURayTracingAccelerationGeometryDescriptor::GPURayTracingAccelerationGeometryDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.flags = static_cast<WGPURayTracingAccelerationGeometryFlag>(0);
  descriptor.type = static_cast<WGPURayTracingAccelerationGeometryType>(0);
  descriptor.vertex = nullptr;
  descriptor.index = nullptr;
  descriptor.aabb = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("flags")) {
      if (!(obj.Get("flags").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryDescriptor'.'flags'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.flags = static_cast<WGPURayTracingAccelerationGeometryFlag>(obj.Get("flags").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("type")) {
      if (!(obj.Get("type").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryDescriptor'.'type'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.type = static_cast<WGPURayTracingAccelerationGeometryType>(GPURayTracingAccelerationGeometryType(obj.Get("type").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("vertex")) {
      if (!(obj.Get("vertex").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationGeometryDescriptor'.'vertex'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPURayTracingAccelerationGeometryVertexDescriptor vertex;
        vertex.buffer = nullptr;
        vertex.offset = 0;
        Napi::Object $vertex = obj.Get("vertex").As<Napi::Object>();
        if (!($vertex.Get("buffer").IsObject()) || !($vertex.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'buffer'");
          device->throwCallbackError(type, message);
          return ;
        }
        vertex.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap($vertex.Get("buffer").As<Napi::Object>())->instance;
        if (!($vertex.Get("format").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'format'");
          device->throwCallbackError(type, message);
          return ;
        }
        vertex.format = static_cast<WGPUVertexFormat>(GPUVertexFormat($vertex.Get("format").As<Napi::String>().Utf8Value()));
        if (!($vertex.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($vertex.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return ;
        }
        vertex.stride = $vertex.Get("stride").As<Napi::Number>().Uint32Value();
        if ($vertex.Has("offset")) {
          if (!($vertex.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($vertex.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return ;
          }
          {
            vertex.offset = static_cast<uint64_t>($vertex.Get("offset").As<Napi::Number>().Uint32Value());
          }
        }
        if (!($vertex.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($vertex.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryVertexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return ;
        }
        vertex.count = $vertex.Get("count").As<Napi::Number>().Uint32Value();
      {
        descriptor.vertex = (WGPURayTracingAccelerationGeometryVertexDescriptor*) malloc(sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationGeometryVertexDescriptor*>(descriptor.vertex), &vertex, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor));
      }
    }
    if (obj.Has("index")) {
      if (!(obj.Get("index").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationGeometryDescriptor'.'index'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPURayTracingAccelerationGeometryIndexDescriptor index;
        index.buffer = nullptr;
        index.offset = 0;
        Napi::Object $index = obj.Get("index").As<Napi::Object>();
        if (!($index.Get("buffer").IsObject()) || !($index.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'buffer'");
          device->throwCallbackError(type, message);
          return ;
        }
        index.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap($index.Get("buffer").As<Napi::Object>())->instance;
        if (!($index.Get("format").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'format'");
          device->throwCallbackError(type, message);
          return ;
        }
        index.format = static_cast<WGPUIndexFormat>(GPUIndexFormat($index.Get("format").As<Napi::String>().Utf8Value()));
        if ($index.Has("offset")) {
          if (!($index.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($index.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return ;
          }
          {
            index.offset = static_cast<uint64_t>($index.Get("offset").As<Napi::Number>().Uint32Value());
          }
        }
        if (!($index.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($index.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryIndexDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return ;
        }
        index.count = $index.Get("count").As<Napi::Number>().Uint32Value();
      {
        descriptor.index = (WGPURayTracingAccelerationGeometryIndexDescriptor*) malloc(sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationGeometryIndexDescriptor*>(descriptor.index), &index, sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor));
      }
    }
    if (obj.Has("aabb")) {
      if (!(obj.Get("aabb").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationGeometryDescriptor'.'aabb'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPURayTracingAccelerationGeometryAabbDescriptor aabb;
        aabb.buffer = nullptr;
        aabb.offset = 0;
        Napi::Object $aabb = obj.Get("aabb").As<Napi::Object>();
        if (!($aabb.Get("buffer").IsObject()) || !($aabb.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'buffer'");
          device->throwCallbackError(type, message);
          return ;
        }
        aabb.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap($aabb.Get("buffer").As<Napi::Object>())->instance;
        if (!($aabb.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($aabb.Get("stride").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'stride'");
          device->throwCallbackError(type, message);
          return ;
        }
        aabb.stride = $aabb.Get("stride").As<Napi::Number>().Uint32Value();
        if ($aabb.Has("offset")) {
          if (!($aabb.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($aabb.Get("offset").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'offset'");
            device->throwCallbackError(type, message);
            return ;
          }
          {
            aabb.offset = static_cast<uint64_t>($aabb.Get("offset").As<Napi::Number>().Uint32Value());
          }
        }
        if (!($aabb.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($aabb.Get("count").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationGeometryAabbDescriptor'.'count'");
          device->throwCallbackError(type, message);
          return ;
        }
        aabb.count = $aabb.Get("count").As<Napi::Number>().Uint32Value();
      {
        descriptor.aabb = (WGPURayTracingAccelerationGeometryAabbDescriptor*) malloc(sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationGeometryAabbDescriptor*>(descriptor.aabb), &aabb, sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor));
      }
    }
  };
  GPURayTracingAccelerationGeometryDescriptor::~GPURayTracingAccelerationGeometryDescriptor() {
    DestroyGPURayTracingAccelerationGeometryDescriptor(descriptor);
  };
  
  GPUTransform3D::GPUTransform3D(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.x = 0.0f;
  descriptor.y = 0.0f;
  descriptor.z = 0.0f;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("x")) {
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.x = obj.Get("x").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("y")) {
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.y = obj.Get("y").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("z")) {
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.z = obj.Get("z").As<Napi::Number>().FloatValue();
    }
  };
  GPUTransform3D::~GPUTransform3D() {
    DestroyGPUTransform3D(descriptor);
  };
  
  GPURayTracingAccelerationInstanceTransformDescriptor::GPURayTracingAccelerationInstanceTransformDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.translation = nullptr;
  descriptor.rotation = nullptr;
  descriptor.scale = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("translation")) {
      if (!(obj.Get("translation").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'translation'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPUTransform3D translation;
        translation.x = 0.0f;
        translation.y = 0.0f;
        translation.z = 0.0f;
        Napi::Object $translation = obj.Get("translation").As<Napi::Object>();
        if ($translation.Has("x")) {
          if (!($translation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($translation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return ;
          }
          translation.x = $translation.Get("x").As<Napi::Number>().FloatValue();
        }
        if ($translation.Has("y")) {
          if (!($translation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($translation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return ;
          }
          translation.y = $translation.Get("y").As<Napi::Number>().FloatValue();
        }
        if ($translation.Has("z")) {
          if (!($translation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($translation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return ;
          }
          translation.z = $translation.Get("z").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.translation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
        memcpy(const_cast<WGPUTransform3D*>(descriptor.translation), &translation, sizeof(WGPUTransform3D));
      }
    }
    if (obj.Has("rotation")) {
      if (!(obj.Get("rotation").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'rotation'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPUTransform3D rotation;
        rotation.x = 0.0f;
        rotation.y = 0.0f;
        rotation.z = 0.0f;
        Napi::Object $rotation = obj.Get("rotation").As<Napi::Object>();
        if ($rotation.Has("x")) {
          if (!($rotation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($rotation.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return ;
          }
          rotation.x = $rotation.Get("x").As<Napi::Number>().FloatValue();
        }
        if ($rotation.Has("y")) {
          if (!($rotation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($rotation.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return ;
          }
          rotation.y = $rotation.Get("y").As<Napi::Number>().FloatValue();
        }
        if ($rotation.Has("z")) {
          if (!($rotation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($rotation.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return ;
          }
          rotation.z = $rotation.Get("z").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.rotation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
        memcpy(const_cast<WGPUTransform3D*>(descriptor.rotation), &rotation, sizeof(WGPUTransform3D));
      }
    }
    if (obj.Has("scale")) {
      if (!(obj.Get("scale").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'scale'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPUTransform3D scale;
        scale.x = 0.0f;
        scale.y = 0.0f;
        scale.z = 0.0f;
        Napi::Object $scale = obj.Get("scale").As<Napi::Object>();
        if ($scale.Has("x")) {
          if (!($scale.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($scale.Get("x").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
            device->throwCallbackError(type, message);
            return ;
          }
          scale.x = $scale.Get("x").As<Napi::Number>().FloatValue();
        }
        if ($scale.Has("y")) {
          if (!($scale.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($scale.Get("y").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
            device->throwCallbackError(type, message);
            return ;
          }
          scale.y = $scale.Get("y").As<Napi::Number>().FloatValue();
        }
        if ($scale.Has("z")) {
          if (!($scale.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($scale.Get("z").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
            device->throwCallbackError(type, message);
            return ;
          }
          scale.z = $scale.Get("z").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.scale = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
        memcpy(const_cast<WGPUTransform3D*>(descriptor.scale), &scale, sizeof(WGPUTransform3D));
      }
    }
  };
  GPURayTracingAccelerationInstanceTransformDescriptor::~GPURayTracingAccelerationInstanceTransformDescriptor() {
    DestroyGPURayTracingAccelerationInstanceTransformDescriptor(descriptor);
  };
  
  GPURayTracingAccelerationInstanceDescriptor::GPURayTracingAccelerationInstanceDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.flags = static_cast<WGPURayTracingAccelerationInstanceFlag>(0);
  descriptor.mask = 0xFF;
  descriptor.instanceId = 0;
  descriptor.instanceOffset = 0;
  descriptor.transform = nullptr;
  descriptor.transformMatrixSize = 12;
  descriptor.transformMatrix = nullptr;
  descriptor.geometryContainer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("flags")) {
      if (!(obj.Get("flags").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'flags'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.flags = static_cast<WGPURayTracingAccelerationInstanceFlag>(obj.Get("flags").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("mask")) {
      if (!(obj.Get("mask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'mask'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("mask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'mask'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.mask = obj.Get("mask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("instanceId")) {
      if (!(obj.Get("instanceId").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceId'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("instanceId").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceId'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.instanceId = obj.Get("instanceId").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("instanceOffset")) {
      if (!(obj.Get("instanceOffset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceOffset'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("instanceOffset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationInstanceDescriptor'.'instanceOffset'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.instanceOffset = obj.Get("instanceOffset").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("transform")) {
      if (!(obj.Get("transform").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceDescriptor'.'transform'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPURayTracingAccelerationInstanceTransformDescriptor transform;
        transform.translation = nullptr;
        transform.rotation = nullptr;
        transform.scale = nullptr;
        Napi::Object $transform = obj.Get("transform").As<Napi::Object>();
        if ($transform.Has("translation")) {
          if (!($transform.Get("translation").IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'translation'");
            device->throwCallbackError(type, message);
            return ;
          }
            WGPUTransform3D translation;
            translation.x = 0.0f;
            translation.y = 0.0f;
            translation.z = 0.0f;
            Napi::Object $translation = $transform.Get("translation").As<Napi::Object>();
            if ($translation.Has("x")) {
              if (!($translation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($translation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return ;
              }
              translation.x = $translation.Get("x").As<Napi::Number>().FloatValue();
            }
            if ($translation.Has("y")) {
              if (!($translation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($translation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return ;
              }
              translation.y = $translation.Get("y").As<Napi::Number>().FloatValue();
            }
            if ($translation.Has("z")) {
              if (!($translation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($translation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return ;
              }
              translation.z = $translation.Get("z").As<Napi::Number>().FloatValue();
            }
          {
            transform.translation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
            memcpy(const_cast<WGPUTransform3D*>(transform.translation), &translation, sizeof(WGPUTransform3D));
          }
        }
        if ($transform.Has("rotation")) {
          if (!($transform.Get("rotation").IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'rotation'");
            device->throwCallbackError(type, message);
            return ;
          }
            WGPUTransform3D rotation;
            rotation.x = 0.0f;
            rotation.y = 0.0f;
            rotation.z = 0.0f;
            Napi::Object $rotation = $transform.Get("rotation").As<Napi::Object>();
            if ($rotation.Has("x")) {
              if (!($rotation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($rotation.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return ;
              }
              rotation.x = $rotation.Get("x").As<Napi::Number>().FloatValue();
            }
            if ($rotation.Has("y")) {
              if (!($rotation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($rotation.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return ;
              }
              rotation.y = $rotation.Get("y").As<Napi::Number>().FloatValue();
            }
            if ($rotation.Has("z")) {
              if (!($rotation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($rotation.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return ;
              }
              rotation.z = $rotation.Get("z").As<Napi::Number>().FloatValue();
            }
          {
            transform.rotation = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
            memcpy(const_cast<WGPUTransform3D*>(transform.rotation), &rotation, sizeof(WGPUTransform3D));
          }
        }
        if ($transform.Has("scale")) {
          if (!($transform.Get("scale").IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationInstanceTransformDescriptor'.'scale'");
            device->throwCallbackError(type, message);
            return ;
          }
            WGPUTransform3D scale;
            scale.x = 0.0f;
            scale.y = 0.0f;
            scale.z = 0.0f;
            Napi::Object $scale = $transform.Get("scale").As<Napi::Object>();
            if ($scale.Has("x")) {
              if (!($scale.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($scale.Get("x").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'x'");
                device->throwCallbackError(type, message);
                return ;
              }
              scale.x = $scale.Get("x").As<Napi::Number>().FloatValue();
            }
            if ($scale.Has("y")) {
              if (!($scale.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($scale.Get("y").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'y'");
                device->throwCallbackError(type, message);
                return ;
              }
              scale.y = $scale.Get("y").As<Napi::Number>().FloatValue();
            }
            if ($scale.Has("z")) {
              if (!($scale.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return ;
              }
              if (!($scale.Get("z").IsNumber())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTransform3D'.'z'");
                device->throwCallbackError(type, message);
                return ;
              }
              scale.z = $scale.Get("z").As<Napi::Number>().FloatValue();
            }
          {
            transform.scale = (WGPUTransform3D*) malloc(sizeof(WGPUTransform3D));
            memcpy(const_cast<WGPUTransform3D*>(transform.scale), &scale, sizeof(WGPUTransform3D));
          }
        }
      {
        descriptor.transform = (WGPURayTracingAccelerationInstanceTransformDescriptor*) malloc(sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor));
        memcpy(const_cast<WGPURayTracingAccelerationInstanceTransformDescriptor*>(descriptor.transform), &transform, sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor));
      }
    }
    if (obj.Has("transformMatrix")) {
      if (!(obj.Get("transformMatrix").IsTypedArray())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'TypedArray' for 'GPURayTracingAccelerationInstanceDescriptor'.'transformMatrix'");
        device->throwCallbackError(type, message);
        return ;
      }
      Napi::TypedArray array = obj.Get("transformMatrix").As<Napi::TypedArray>();
      Napi::ArrayBuffer buffer = array.ArrayBuffer();
      descriptor.transformMatrix = reinterpret_cast<const float*>(buffer.Data());
    }
    if (!(obj.Get("geometryContainer").IsObject()) || !(obj.Get("geometryContainer").As<Napi::Object>().InstanceOf(GPURayTracingAccelerationContainer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingAccelerationContainer' for 'GPURayTracingAccelerationInstanceDescriptor'.'geometryContainer'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.geometryContainer = Napi::ObjectWrap<GPURayTracingAccelerationContainer>::Unwrap(obj.Get("geometryContainer").As<Napi::Object>())->instance;
  };
  GPURayTracingAccelerationInstanceDescriptor::~GPURayTracingAccelerationInstanceDescriptor() {
    DestroyGPURayTracingAccelerationInstanceDescriptor(descriptor);
  };
  
  GPURayTracingAccelerationContainerDescriptor::GPURayTracingAccelerationContainerDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.flags = static_cast<WGPURayTracingAccelerationContainerFlag>(0);
  descriptor.level = static_cast<WGPURayTracingAccelerationContainerLevel>(0);
  descriptor.geometryCount = 0;
  descriptor.geometries = nullptr;
  descriptor.instanceCount = 0;
  descriptor.instances = nullptr;
  descriptor.instanceBuffer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("flags")) {
      if (!(obj.Get("flags").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingAccelerationContainerDescriptor'.'flags'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.flags = static_cast<WGPURayTracingAccelerationContainerFlag>(obj.Get("flags").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("level")) {
      if (!(obj.Get("level").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingAccelerationContainerDescriptor'.'level'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.level = static_cast<WGPURayTracingAccelerationContainerLevel>(GPURayTracingAccelerationContainerLevel(obj.Get("level").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("geometries")) {
      {
        Napi::Array array = obj.Get("geometries").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingAccelerationGeometryDescriptor* data = (WGPURayTracingAccelerationGeometryDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationGeometryDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationContainerDescriptor'.'geometries'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("geometries").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingAccelerationGeometryDescriptor* data = (WGPURayTracingAccelerationGeometryDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationGeometryDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingAccelerationGeometryDescriptor $geometries = DecodeGPURayTracingAccelerationGeometryDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$geometries),
          sizeof(WGPURayTracingAccelerationGeometryDescriptor)
        );
      };
      descriptor.geometryCount = length;
      descriptor.geometries = data;
    }
    if (obj.Has("instances")) {
      {
        Napi::Array array = obj.Get("instances").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingAccelerationInstanceDescriptor* data = (WGPURayTracingAccelerationInstanceDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationInstanceDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingAccelerationContainerDescriptor'.'instances'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("instances").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingAccelerationInstanceDescriptor* data = (WGPURayTracingAccelerationInstanceDescriptor*) malloc(length * sizeof(WGPURayTracingAccelerationInstanceDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingAccelerationInstanceDescriptor $instances = DecodeGPURayTracingAccelerationInstanceDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$instances),
          sizeof(WGPURayTracingAccelerationInstanceDescriptor)
        );
      };
      descriptor.instanceCount = length;
      descriptor.instances = data;
    }
    if (obj.Has("instanceBuffer")) {
      if (!(obj.Get("instanceBuffer").IsObject()) || !(obj.Get("instanceBuffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPURayTracingAccelerationContainerDescriptor'.'instanceBuffer'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.instanceBuffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("instanceBuffer").As<Napi::Object>())->instance;
    }
  };
  GPURayTracingAccelerationContainerDescriptor::~GPURayTracingAccelerationContainerDescriptor() {
    DestroyGPURayTracingAccelerationContainerDescriptor(descriptor);
  };
  
  GPURayTracingShaderBindingTableStagesDescriptor::GPURayTracingShaderBindingTableStagesDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.module = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("stage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableStagesDescriptor'.'stage'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.stage = static_cast<WGPUShaderStage>(obj.Get("stage").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("module").IsObject()) || !(obj.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPURayTracingShaderBindingTableStagesDescriptor'.'module'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap(obj.Get("module").As<Napi::Object>())->instance;
  };
  GPURayTracingShaderBindingTableStagesDescriptor::~GPURayTracingShaderBindingTableStagesDescriptor() {
    DestroyGPURayTracingShaderBindingTableStagesDescriptor(descriptor);
  };
  
  GPURayTracingShaderBindingTableGroupsDescriptor::GPURayTracingShaderBindingTableGroupsDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.type = static_cast<WGPURayTracingShaderBindingTableGroupType>(0);
  descriptor.generalIndex = -1;
  descriptor.closestHitIndex = -1;
  descriptor.anyHitIndex = -1;
  descriptor.intersectionIndex = -1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("type")) {
      if (!(obj.Get("type").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'type'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.type = static_cast<WGPURayTracingShaderBindingTableGroupType>(GPURayTracingShaderBindingTableGroupType(obj.Get("type").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("generalIndex")) {
      if (!(obj.Get("generalIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'generalIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("generalIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'generalIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.generalIndex = obj.Get("generalIndex").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("closestHitIndex")) {
      if (!(obj.Get("closestHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'closestHitIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("closestHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'closestHitIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.closestHitIndex = obj.Get("closestHitIndex").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("anyHitIndex")) {
      if (!(obj.Get("anyHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'anyHitIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("anyHitIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'anyHitIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.anyHitIndex = obj.Get("anyHitIndex").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("intersectionIndex")) {
      if (!(obj.Get("intersectionIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'intersectionIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("intersectionIndex").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingShaderBindingTableGroupsDescriptor'.'intersectionIndex'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.intersectionIndex = obj.Get("intersectionIndex").As<Napi::Number>().Int32Value();
    }
  };
  GPURayTracingShaderBindingTableGroupsDescriptor::~GPURayTracingShaderBindingTableGroupsDescriptor() {
    DestroyGPURayTracingShaderBindingTableGroupsDescriptor(descriptor);
  };
  
  GPURayTracingShaderBindingTableDescriptor::GPURayTracingShaderBindingTableDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.stagesCount = 0;
  descriptor.stages = nullptr;
  descriptor.groupsCount = 0;
  descriptor.groups = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("stages")) {
      {
        Napi::Array array = obj.Get("stages").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingShaderBindingTableStagesDescriptor* data = (WGPURayTracingShaderBindingTableStagesDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableStagesDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingShaderBindingTableDescriptor'.'stages'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("stages").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingShaderBindingTableStagesDescriptor* data = (WGPURayTracingShaderBindingTableStagesDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableStagesDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingShaderBindingTableStagesDescriptor $stages = DecodeGPURayTracingShaderBindingTableStagesDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$stages),
          sizeof(WGPURayTracingShaderBindingTableStagesDescriptor)
        );
      };
      descriptor.stagesCount = length;
      descriptor.stages = data;
    }
    if (obj.Has("groups")) {
      {
        Napi::Array array = obj.Get("groups").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURayTracingShaderBindingTableGroupsDescriptor* data = (WGPURayTracingShaderBindingTableGroupsDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingShaderBindingTableDescriptor'.'groups'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("groups").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURayTracingShaderBindingTableGroupsDescriptor* data = (WGPURayTracingShaderBindingTableGroupsDescriptor*) malloc(length * sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURayTracingShaderBindingTableGroupsDescriptor $groups = DecodeGPURayTracingShaderBindingTableGroupsDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$groups),
          sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor)
        );
      };
      descriptor.groupsCount = length;
      descriptor.groups = data;
    }
  };
  GPURayTracingShaderBindingTableDescriptor::~GPURayTracingShaderBindingTableDescriptor() {
    DestroyGPURayTracingShaderBindingTableDescriptor(descriptor);
  };
  
  GPUBindGroupDescriptor::GPUBindGroupDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
  descriptor.bindings = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUBindGroupLayout::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBindGroupLayout' for 'GPUBindGroupDescriptor'.'layout'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.layout = Napi::ObjectWrap<GPUBindGroupLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    {
      {
        Napi::Array array = obj.Get("bindings").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUBindGroupBinding* data = (WGPUBindGroupBinding*) malloc(length * sizeof(WGPUBindGroupBinding));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUBindGroupDescriptor'.'bindings'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("bindings").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUBindGroupBinding* data = (WGPUBindGroupBinding*) malloc(length * sizeof(WGPUBindGroupBinding));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUBindGroupBinding $bindings = DecodeGPUBindGroupBinding(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$bindings),
          sizeof(WGPUBindGroupBinding)
        );
      };
      descriptor.bindingCount = length;
      descriptor.bindings = data;
    }
  };
  GPUBindGroupDescriptor::~GPUBindGroupDescriptor() {
    DestroyGPUBindGroupDescriptor(descriptor);
  };
  
  GPUBindGroupLayoutBinding::GPUBindGroupLayoutBinding(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.hasDynamicOffset = false;
  descriptor.multisampled = false;
  descriptor.textureDimension = static_cast<WGPUTextureViewDimension>(0);
  descriptor.textureComponentType = static_cast<WGPUTextureComponentType>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupLayoutBinding'.'binding'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("binding").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupLayoutBinding'.'binding'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.binding = obj.Get("binding").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("visibility").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBindGroupLayoutBinding'.'visibility'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.visibility = static_cast<WGPUShaderStage>(obj.Get("visibility").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("type").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutBinding'.'type'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.type = static_cast<WGPUBindingType>(GPUBindingType(obj.Get("type").As<Napi::String>().Utf8Value()));
    if (obj.Has("hasDynamicOffset")) {
      if (!(obj.Get("hasDynamicOffset").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUBindGroupLayoutBinding'.'hasDynamicOffset'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.hasDynamicOffset = obj.Get("hasDynamicOffset").As<Napi::Boolean>().Value();
    }
    if (obj.Has("multisampled")) {
      if (!(obj.Get("multisampled").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUBindGroupLayoutBinding'.'multisampled'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.multisampled = obj.Get("multisampled").As<Napi::Boolean>().Value();
    }
    if (obj.Has("textureDimension")) {
      if (!(obj.Get("textureDimension").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutBinding'.'textureDimension'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.textureDimension = static_cast<WGPUTextureViewDimension>(GPUTextureViewDimension(obj.Get("textureDimension").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("textureComponentType")) {
      if (!(obj.Get("textureComponentType").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutBinding'.'textureComponentType'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.textureComponentType = static_cast<WGPUTextureComponentType>(GPUTextureComponentType(obj.Get("textureComponentType").As<Napi::String>().Utf8Value()));
    }
  };
  GPUBindGroupLayoutBinding::~GPUBindGroupLayoutBinding() {
    DestroyGPUBindGroupLayoutBinding(descriptor);
  };
  
  GPUBindGroupLayoutDescriptor::GPUBindGroupLayoutDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.bindings = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBindGroupLayoutDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      {
        Napi::Array array = obj.Get("bindings").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUBindGroupLayoutBinding* data = (WGPUBindGroupLayoutBinding*) malloc(length * sizeof(WGPUBindGroupLayoutBinding));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUBindGroupLayoutDescriptor'.'bindings'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("bindings").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUBindGroupLayoutBinding* data = (WGPUBindGroupLayoutBinding*) malloc(length * sizeof(WGPUBindGroupLayoutBinding));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUBindGroupLayoutBinding $bindings = DecodeGPUBindGroupLayoutBinding(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$bindings),
          sizeof(WGPUBindGroupLayoutBinding)
        );
      };
      descriptor.bindingCount = length;
      descriptor.bindings = data;
    }
  };
  GPUBindGroupLayoutDescriptor::~GPUBindGroupLayoutDescriptor() {
    DestroyGPUBindGroupLayoutDescriptor(descriptor);
  };
  
  GPUBlendDescriptor::GPUBlendDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.operation = static_cast<WGPUBlendOperation>(0);
  descriptor.srcFactor = static_cast<WGPUBlendFactor>(1);
  descriptor.dstFactor = static_cast<WGPUBlendFactor>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("operation")) {
      if (!(obj.Get("operation").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'operation'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.operation = static_cast<WGPUBlendOperation>(GPUBlendOperation(obj.Get("operation").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("srcFactor")) {
      if (!(obj.Get("srcFactor").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'srcFactor'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.srcFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor(obj.Get("srcFactor").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("dstFactor")) {
      if (!(obj.Get("dstFactor").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'dstFactor'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.dstFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor(obj.Get("dstFactor").As<Napi::String>().Utf8Value()));
    }
  };
  GPUBlendDescriptor::~GPUBlendDescriptor() {
    DestroyGPUBlendDescriptor(descriptor);
  };
  
  GPUColorStateDescriptor::GPUColorStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.writeMask = static_cast<WGPUColorWriteMask>(15);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUColorStateDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("alphaBlend").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUColorStateDescriptor'.'alphaBlend'");
      device->throwCallbackError(type, message);
      return ;
    }
      descriptor.alphaBlend.operation = static_cast<WGPUBlendOperation>(0);
      descriptor.alphaBlend.srcFactor = static_cast<WGPUBlendFactor>(1);
      descriptor.alphaBlend.dstFactor = static_cast<WGPUBlendFactor>(0);
      Napi::Object $alphaBlend = obj.Get("alphaBlend").As<Napi::Object>();
      if ($alphaBlend.Has("operation")) {
        if (!($alphaBlend.Get("operation").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'operation'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.alphaBlend.operation = static_cast<WGPUBlendOperation>(GPUBlendOperation($alphaBlend.Get("operation").As<Napi::String>().Utf8Value()));
      }
      if ($alphaBlend.Has("srcFactor")) {
        if (!($alphaBlend.Get("srcFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'srcFactor'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.alphaBlend.srcFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($alphaBlend.Get("srcFactor").As<Napi::String>().Utf8Value()));
      }
      if ($alphaBlend.Has("dstFactor")) {
        if (!($alphaBlend.Get("dstFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'dstFactor'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.alphaBlend.dstFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($alphaBlend.Get("dstFactor").As<Napi::String>().Utf8Value()));
      }
    if (!(obj.Get("colorBlend").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUColorStateDescriptor'.'colorBlend'");
      device->throwCallbackError(type, message);
      return ;
    }
      descriptor.colorBlend.operation = static_cast<WGPUBlendOperation>(0);
      descriptor.colorBlend.srcFactor = static_cast<WGPUBlendFactor>(1);
      descriptor.colorBlend.dstFactor = static_cast<WGPUBlendFactor>(0);
      Napi::Object $colorBlend = obj.Get("colorBlend").As<Napi::Object>();
      if ($colorBlend.Has("operation")) {
        if (!($colorBlend.Get("operation").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'operation'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.colorBlend.operation = static_cast<WGPUBlendOperation>(GPUBlendOperation($colorBlend.Get("operation").As<Napi::String>().Utf8Value()));
      }
      if ($colorBlend.Has("srcFactor")) {
        if (!($colorBlend.Get("srcFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'srcFactor'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.colorBlend.srcFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($colorBlend.Get("srcFactor").As<Napi::String>().Utf8Value()));
      }
      if ($colorBlend.Has("dstFactor")) {
        if (!($colorBlend.Get("dstFactor").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBlendDescriptor'.'dstFactor'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.colorBlend.dstFactor = static_cast<WGPUBlendFactor>(GPUBlendFactor($colorBlend.Get("dstFactor").As<Napi::String>().Utf8Value()));
      }
    if (obj.Has("writeMask")) {
      if (!(obj.Get("writeMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColorStateDescriptor'.'writeMask'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.writeMask = static_cast<WGPUColorWriteMask>(obj.Get("writeMask").As<Napi::Number>().Uint32Value());
    }
  };
  GPUColorStateDescriptor::~GPUColorStateDescriptor() {
    DestroyGPUColorStateDescriptor(descriptor);
  };
  
  GPUBufferCopyView::GPUBufferCopyView(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.buffer = nullptr;
  descriptor.offset = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPUBufferCopyView'.'buffer'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    if (obj.Has("offset")) {
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("offset").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'offset'");
        device->throwCallbackError(type, message);
        return ;
      }
      {
        descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
      }
    }
    if (!(obj.Get("rowPitch").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'rowPitch'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("rowPitch").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'rowPitch'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.rowPitch = obj.Get("rowPitch").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("imageHeight").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'imageHeight'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("imageHeight").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferCopyView'.'imageHeight'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.imageHeight = obj.Get("imageHeight").As<Napi::Number>().Uint32Value();
  };
  GPUBufferCopyView::~GPUBufferCopyView() {
    DestroyGPUBufferCopyView(descriptor);
  };
  
  GPUBufferDescriptor::GPUBufferDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUBufferDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("usage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferDescriptor'.'usage'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.usage = static_cast<WGPUBufferUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferDescriptor'.'size'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("size").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUBufferDescriptor'.'size'");
      device->throwCallbackError(type, message);
      return ;
    }
    {
      descriptor.size = static_cast<uint64_t>(obj.Get("size").As<Napi::Number>().Uint32Value());
    }
  };
  GPUBufferDescriptor::~GPUBufferDescriptor() {
    DestroyGPUBufferDescriptor(descriptor);
  };
  
  GPUCreateBufferMappedResult::GPUCreateBufferMappedResult(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.buffer = nullptr;
  descriptor.data = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("buffer").IsObject()) || !(obj.Get("buffer").As<Napi::Object>().InstanceOf(GPUBuffer::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBuffer' for 'GPUCreateBufferMappedResult'.'buffer'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.buffer = Napi::ObjectWrap<GPUBuffer>::Unwrap(obj.Get("buffer").As<Napi::Object>())->instance;
    {
      if (!(obj.Get("data").IsArrayBuffer())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUCreateBufferMappedResult'.'data'");
        device->throwCallbackError(type, message);
        return ;
      }
    }
  };
  GPUCreateBufferMappedResult::~GPUCreateBufferMappedResult() {
    DestroyGPUCreateBufferMappedResult(descriptor);
  };
  
  GPUColor::GPUColor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("r").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("r").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.r = obj.Get("r").As<Napi::Number>().FloatValue();
    if (!(obj.Get("g").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("g").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.g = obj.Get("g").As<Napi::Number>().FloatValue();
    if (!(obj.Get("b").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("b").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.b = obj.Get("b").As<Napi::Number>().FloatValue();
    if (!(obj.Get("a").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("a").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.a = obj.Get("a").As<Napi::Number>().FloatValue();
  };
  GPUColor::~GPUColor() {
    DestroyGPUColor(descriptor);
  };
  
  GPUCommandBufferDescriptor::GPUCommandBufferDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUCommandBufferDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
  };
  GPUCommandBufferDescriptor::~GPUCommandBufferDescriptor() {
    DestroyGPUCommandBufferDescriptor(descriptor);
  };
  
  GPUCommandEncoderDescriptor::GPUCommandEncoderDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUCommandEncoderDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
  };
  GPUCommandEncoderDescriptor::~GPUCommandEncoderDescriptor() {
    DestroyGPUCommandEncoderDescriptor(descriptor);
  };
  
  GPUComputePassDescriptor::GPUComputePassDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUComputePassDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
  };
  GPUComputePassDescriptor::~GPUComputePassDescriptor() {
    DestroyGPUComputePassDescriptor(descriptor);
  };
  
  GPUComputePipelineDescriptor::GPUComputePipelineDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUComputePipelineDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("layout")) {
      if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUPipelineLayout::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUPipelineLayout' for 'GPUComputePipelineDescriptor'.'layout'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.layout = Napi::ObjectWrap<GPUPipelineLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("computeStage").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUComputePipelineDescriptor'.'computeStage'");
      device->throwCallbackError(type, message);
      return ;
    }
      descriptor.computeStage.nextInChain = nullptr;
      descriptor.computeStage.module = nullptr;
      descriptor.computeStage.entryPoint = nullptr;
      Napi::Object $computeStage = obj.Get("computeStage").As<Napi::Object>();
      if (!($computeStage.Get("module").IsObject()) || !($computeStage.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.computeStage.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap($computeStage.Get("module").As<Napi::Object>())->instance;
      {
        if (!($computeStage.Get("entryPoint").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.computeStage.entryPoint = getNAPIStringCopy($computeStage.Get("entryPoint"));
      }
  };
  GPUComputePipelineDescriptor::~GPUComputePipelineDescriptor() {
    DestroyGPUComputePipelineDescriptor(descriptor);
  };
  
  GPURayTracingPassDescriptor::GPURayTracingPassDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingPassDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
  };
  GPURayTracingPassDescriptor::~GPURayTracingPassDescriptor() {
    DestroyGPURayTracingPassDescriptor(descriptor);
  };
  
  GPURayTracingStateDescriptor::GPURayTracingStateDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.shaderBindingTable = nullptr;
  descriptor.maxRecursionDepth = 1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("shaderBindingTable").IsObject()) || !(obj.Get("shaderBindingTable").As<Napi::Object>().InstanceOf(GPURayTracingShaderBindingTable::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingShaderBindingTable' for 'GPURayTracingStateDescriptor'.'shaderBindingTable'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.shaderBindingTable = Napi::ObjectWrap<GPURayTracingShaderBindingTable>::Unwrap(obj.Get("shaderBindingTable").As<Napi::Object>())->instance;
    if (obj.Has("maxRecursionDepth")) {
      if (!(obj.Get("maxRecursionDepth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("maxRecursionDepth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.maxRecursionDepth = obj.Get("maxRecursionDepth").As<Napi::Number>().Uint32Value();
    }
  };
  GPURayTracingStateDescriptor::~GPURayTracingStateDescriptor() {
    DestroyGPURayTracingStateDescriptor(descriptor);
  };
  
  GPURayTracingPipelineDescriptor::GPURayTracingPipelineDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
  descriptor.rayTracingState = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURayTracingPipelineDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("layout")) {
      if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUPipelineLayout::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUPipelineLayout' for 'GPURayTracingPipelineDescriptor'.'layout'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.layout = Napi::ObjectWrap<GPUPipelineLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("rayTracingState").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURayTracingPipelineDescriptor'.'rayTracingState'");
      device->throwCallbackError(type, message);
      return ;
    }
      WGPURayTracingStateDescriptor rayTracingState;
      rayTracingState.shaderBindingTable = nullptr;
      rayTracingState.maxRecursionDepth = 1;
      Napi::Object $rayTracingState = obj.Get("rayTracingState").As<Napi::Object>();
      if (!($rayTracingState.Get("shaderBindingTable").IsObject()) || !($rayTracingState.Get("shaderBindingTable").As<Napi::Object>().InstanceOf(GPURayTracingShaderBindingTable::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPURayTracingShaderBindingTable' for 'GPURayTracingStateDescriptor'.'shaderBindingTable'");
        device->throwCallbackError(type, message);
        return ;
      }
      rayTracingState.shaderBindingTable = Napi::ObjectWrap<GPURayTracingShaderBindingTable>::Unwrap($rayTracingState.Get("shaderBindingTable").As<Napi::Object>())->instance;
      if ($rayTracingState.Has("maxRecursionDepth")) {
        if (!($rayTracingState.Get("maxRecursionDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($rayTracingState.Get("maxRecursionDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURayTracingStateDescriptor'.'maxRecursionDepth'");
          device->throwCallbackError(type, message);
          return ;
        }
        rayTracingState.maxRecursionDepth = $rayTracingState.Get("maxRecursionDepth").As<Napi::Number>().Uint32Value();
      }
    {
      descriptor.rayTracingState = (WGPURayTracingStateDescriptor*) malloc(sizeof(WGPURayTracingStateDescriptor));
      memcpy(const_cast<WGPURayTracingStateDescriptor*>(descriptor.rayTracingState), &rayTracingState, sizeof(WGPURayTracingStateDescriptor));
    }
  };
  GPURayTracingPipelineDescriptor::~GPURayTracingPipelineDescriptor() {
    DestroyGPURayTracingPipelineDescriptor(descriptor);
  };
  
  GPUDeviceProperties::GPUDeviceProperties(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.textureCompressionBC = false;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("textureCompressionBC")) {
      if (!(obj.Get("textureCompressionBC").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUDeviceProperties'.'textureCompressionBC'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.textureCompressionBC = obj.Get("textureCompressionBC").As<Napi::Boolean>().Value();
    }
  };
  GPUDeviceProperties::~GPUDeviceProperties() {
    DestroyGPUDeviceProperties(descriptor);
  };
  
  GPUDepthStencilStateDescriptor::GPUDepthStencilStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.depthWriteEnabled = false;
  descriptor.depthCompare = static_cast<WGPUCompareFunction>(7);
  descriptor.stencilReadMask = 0xFFFFFFFF;
  descriptor.stencilWriteMask = 0xFFFFFFFF;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (obj.Has("depthWriteEnabled")) {
      if (!(obj.Get("depthWriteEnabled").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUDepthStencilStateDescriptor'.'depthWriteEnabled'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.depthWriteEnabled = obj.Get("depthWriteEnabled").As<Napi::Boolean>().Value();
    }
    if (obj.Has("depthCompare")) {
      if (!(obj.Get("depthCompare").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'depthCompare'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.depthCompare = static_cast<WGPUCompareFunction>(GPUCompareFunction(obj.Get("depthCompare").As<Napi::String>().Utf8Value()));
    }
    if (!(obj.Get("stencilFront").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilFront'");
      device->throwCallbackError(type, message);
      return ;
    }
      descriptor.stencilFront.compare = static_cast<WGPUCompareFunction>(7);
      descriptor.stencilFront.failOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilFront.passOp = static_cast<WGPUStencilOperation>(0);
      Napi::Object $stencilFront = obj.Get("stencilFront").As<Napi::Object>();
      if ($stencilFront.Has("compare")) {
        if (!($stencilFront.Get("compare").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilFront.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilFront.Get("compare").As<Napi::String>().Utf8Value()));
      }
      if ($stencilFront.Has("failOp")) {
        if (!($stencilFront.Get("failOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilFront.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("failOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilFront.Has("depthFailOp")) {
        if (!($stencilFront.Get("depthFailOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("depthFailOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilFront.Has("passOp")) {
        if (!($stencilFront.Get("passOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilFront.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("passOp").As<Napi::String>().Utf8Value()));
      }
    if (!(obj.Get("stencilBack").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilBack'");
      device->throwCallbackError(type, message);
      return ;
    }
      descriptor.stencilBack.compare = static_cast<WGPUCompareFunction>(7);
      descriptor.stencilBack.failOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(0);
      descriptor.stencilBack.passOp = static_cast<WGPUStencilOperation>(0);
      Napi::Object $stencilBack = obj.Get("stencilBack").As<Napi::Object>();
      if ($stencilBack.Has("compare")) {
        if (!($stencilBack.Get("compare").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilBack.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilBack.Get("compare").As<Napi::String>().Utf8Value()));
      }
      if ($stencilBack.Has("failOp")) {
        if (!($stencilBack.Get("failOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilBack.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("failOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilBack.Has("depthFailOp")) {
        if (!($stencilBack.Get("depthFailOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("depthFailOp").As<Napi::String>().Utf8Value()));
      }
      if ($stencilBack.Has("passOp")) {
        if (!($stencilBack.Get("passOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.stencilBack.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("passOp").As<Napi::String>().Utf8Value()));
      }
    if (obj.Has("stencilReadMask")) {
      if (!(obj.Get("stencilReadMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("stencilReadMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.stencilReadMask = obj.Get("stencilReadMask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("stencilWriteMask")) {
      if (!(obj.Get("stencilWriteMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("stencilWriteMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.stencilWriteMask = obj.Get("stencilWriteMask").As<Napi::Number>().Uint32Value();
    }
  };
  GPUDepthStencilStateDescriptor::~GPUDepthStencilStateDescriptor() {
    DestroyGPUDepthStencilStateDescriptor(descriptor);
  };
  
  GPUExtent3D::GPUExtent3D(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.width = obj.Get("width").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.height = obj.Get("height").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("depth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("depth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.depth = obj.Get("depth").As<Napi::Number>().Uint32Value();
  };
  GPUExtent3D::~GPUExtent3D() {
    DestroyGPUExtent3D(descriptor);
  };
  
  GPUFenceDescriptor::GPUFenceDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.initialValue = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUFenceDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("initialValue")) {
      if (!(obj.Get("initialValue").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUFenceDescriptor'.'initialValue'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("initialValue").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUFenceDescriptor'.'initialValue'");
        device->throwCallbackError(type, message);
        return ;
      }
      {
        descriptor.initialValue = static_cast<uint64_t>(obj.Get("initialValue").As<Napi::Number>().Uint32Value());
      }
    }
  };
  GPUFenceDescriptor::~GPUFenceDescriptor() {
    DestroyGPUFenceDescriptor(descriptor);
  };
  
  GPUInstanceDescriptor::GPUInstanceDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
  };
  GPUInstanceDescriptor::~GPUInstanceDescriptor() {
    DestroyGPUInstanceDescriptor(descriptor);
  };
  
  GPUVertexAttributeDescriptor::GPUVertexAttributeDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexAttributeDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.format = static_cast<WGPUVertexFormat>(GPUVertexFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("offset").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'offset'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("offset").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'offset'");
      device->throwCallbackError(type, message);
      return ;
    }
    {
      descriptor.offset = static_cast<uint64_t>(obj.Get("offset").As<Napi::Number>().Uint32Value());
    }
    if (!(obj.Get("shaderLocation").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'shaderLocation'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("shaderLocation").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexAttributeDescriptor'.'shaderLocation'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.shaderLocation = obj.Get("shaderLocation").As<Napi::Number>().Uint32Value();
  };
  GPUVertexAttributeDescriptor::~GPUVertexAttributeDescriptor() {
    DestroyGPUVertexAttributeDescriptor(descriptor);
  };
  
  GPUVertexBufferLayoutDescriptor::GPUVertexBufferLayoutDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.stepMode = static_cast<WGPUInputStepMode>(0);
  descriptor.attributes = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("arrayStride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexBufferLayoutDescriptor'.'arrayStride'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("arrayStride").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUVertexBufferLayoutDescriptor'.'arrayStride'");
      device->throwCallbackError(type, message);
      return ;
    }
    {
      descriptor.arrayStride = static_cast<uint64_t>(obj.Get("arrayStride").As<Napi::Number>().Uint32Value());
    }
    if (obj.Has("stepMode")) {
      if (!(obj.Get("stepMode").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexBufferLayoutDescriptor'.'stepMode'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.stepMode = static_cast<WGPUInputStepMode>(GPUInputStepMode(obj.Get("stepMode").As<Napi::String>().Utf8Value()));
    }
    {
      {
        Napi::Array array = obj.Get("attributes").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUVertexAttributeDescriptor* data = (WGPUVertexAttributeDescriptor*) malloc(length * sizeof(WGPUVertexAttributeDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUVertexBufferLayoutDescriptor'.'attributes'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("attributes").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUVertexAttributeDescriptor* data = (WGPUVertexAttributeDescriptor*) malloc(length * sizeof(WGPUVertexAttributeDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUVertexAttributeDescriptor $attributes = DecodeGPUVertexAttributeDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$attributes),
          sizeof(WGPUVertexAttributeDescriptor)
        );
      };
      descriptor.attributeCount = length;
      descriptor.attributes = data;
    }
  };
  GPUVertexBufferLayoutDescriptor::~GPUVertexBufferLayoutDescriptor() {
    DestroyGPUVertexBufferLayoutDescriptor(descriptor);
  };
  
  GPUVertexStateDescriptor::GPUVertexStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.indexFormat = static_cast<WGPUIndexFormat>(1);
  descriptor.vertexBufferCount = 0;
  descriptor.vertexBuffers = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("indexFormat")) {
      if (!(obj.Get("indexFormat").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexStateDescriptor'.'indexFormat'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.indexFormat = static_cast<WGPUIndexFormat>(GPUIndexFormat(obj.Get("indexFormat").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("vertexBuffers")) {
      {
        Napi::Array array = obj.Get("vertexBuffers").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUVertexStateDescriptor'.'vertexBuffers'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("vertexBuffers").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUVertexBufferLayoutDescriptor $vertexBuffers = DecodeGPUVertexBufferLayoutDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$vertexBuffers),
          sizeof(WGPUVertexBufferLayoutDescriptor)
        );
      };
      descriptor.vertexBufferCount = length;
      descriptor.vertexBuffers = data;
    }
  };
  GPUVertexStateDescriptor::~GPUVertexStateDescriptor() {
    DestroyGPUVertexStateDescriptor(descriptor);
  };
  
  GPUOrigin3D::GPUOrigin3D(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.x = 0;
  descriptor.y = 0;
  descriptor.z = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("x")) {
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("x").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.x = obj.Get("x").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("y")) {
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("y").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.y = obj.Get("y").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("z")) {
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("z").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.z = obj.Get("z").As<Napi::Number>().Uint32Value();
    }
  };
  GPUOrigin3D::~GPUOrigin3D() {
    DestroyGPUOrigin3D(descriptor);
  };
  
  GPUPipelineLayoutDescriptor::GPUPipelineLayoutDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.bindGroupLayouts = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUPipelineLayoutDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      {
        Napi::Array array = obj.Get("bindGroupLayouts").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUBindGroupLayout* data = (WGPUBindGroupLayout*) malloc(length * sizeof(WGPUBindGroupLayout));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject()) || !(array.Get(ii).As<Napi::Object>().InstanceOf(GPUBindGroupLayout::constructor.Value()))) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUBindGroupLayout' for 'GPUPipelineLayoutDescriptor'.'bindGroupLayouts'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("bindGroupLayouts").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUBindGroupLayout* data = (WGPUBindGroupLayout*) malloc(length * sizeof(WGPUBindGroupLayout));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUBindGroupLayout value = Napi::ObjectWrap<GPUBindGroupLayout>::Unwrap(item)->instance;
        data[ii] = value;
      };
      descriptor.bindGroupLayoutCount = length;
      descriptor.bindGroupLayouts = data;
    }
  };
  GPUPipelineLayoutDescriptor::~GPUPipelineLayoutDescriptor() {
    DestroyGPUPipelineLayoutDescriptor(descriptor);
  };
  
  GPUProgrammableStageDescriptor::GPUProgrammableStageDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.module = nullptr;
  descriptor.entryPoint = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("module").IsObject()) || !(obj.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap(obj.Get("module").As<Napi::Object>())->instance;
    {
      if (!(obj.Get("entryPoint").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.entryPoint = getNAPIStringCopy(obj.Get("entryPoint"));
    }
  };
  GPUProgrammableStageDescriptor::~GPUProgrammableStageDescriptor() {
    DestroyGPUProgrammableStageDescriptor(descriptor);
  };
  
  GPURasterizationStateDescriptor::GPURasterizationStateDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.frontFace = static_cast<WGPUFrontFace>(0);
  descriptor.cullMode = static_cast<WGPUCullMode>(0);
  descriptor.depthBias = 0;
  descriptor.depthBiasSlopeScale = 0.0f;
  descriptor.depthBiasClamp = 0.0f;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("frontFace")) {
      if (!(obj.Get("frontFace").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'frontFace'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.frontFace = static_cast<WGPUFrontFace>(GPUFrontFace(obj.Get("frontFace").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("cullMode")) {
      if (!(obj.Get("cullMode").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'cullMode'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.cullMode = static_cast<WGPUCullMode>(GPUCullMode(obj.Get("cullMode").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("depthBias")) {
      if (!(obj.Get("depthBias").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("depthBias").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.depthBias = obj.Get("depthBias").As<Napi::Number>().Int32Value();
    }
    if (obj.Has("depthBiasSlopeScale")) {
      if (!(obj.Get("depthBiasSlopeScale").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("depthBiasSlopeScale").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.depthBiasSlopeScale = obj.Get("depthBiasSlopeScale").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("depthBiasClamp")) {
      if (!(obj.Get("depthBiasClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("depthBiasClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.depthBiasClamp = obj.Get("depthBiasClamp").As<Napi::Number>().FloatValue();
    }
  };
  GPURasterizationStateDescriptor::~GPURasterizationStateDescriptor() {
    DestroyGPURasterizationStateDescriptor(descriptor);
  };
  
  GPURenderBundleDescriptor::GPURenderBundleDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
  };
  GPURenderBundleDescriptor::~GPURenderBundleDescriptor() {
    DestroyGPURenderBundleDescriptor(descriptor);
  };
  
  GPURenderBundleEncoderDescriptor::GPURenderBundleEncoderDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.colorFormats = nullptr;
  descriptor.depthStencilFormat = static_cast<WGPUTextureFormat>(0);
  descriptor.sampleCount = 1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleEncoderDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      if (!(obj.Get("colorFormats").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleEncoderDescriptor'.'colorFormats'");
        device->throwCallbackError(type, message);
        return ;
      }
      Napi::Array array = obj.Get("colorFormats").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUTextureFormat* data = (WGPUTextureFormat*) malloc(length * sizeof(WGPUTextureFormat));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUTextureFormat value = static_cast<WGPUTextureFormat>(
          GPUTextureFormat(item.As<Napi::String>().Utf8Value())
        );
        data[ii] = value;
      };
      descriptor.colorFormats = data;
    }
    if (obj.Has("depthStencilFormat")) {
      if (!(obj.Get("depthStencilFormat").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderBundleEncoderDescriptor'.'depthStencilFormat'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.depthStencilFormat = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("depthStencilFormat").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("sampleCount")) {
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderBundleEncoderDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderBundleEncoderDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }
  };
  GPURenderBundleEncoderDescriptor::~GPURenderBundleEncoderDescriptor() {
    DestroyGPURenderBundleEncoderDescriptor(descriptor);
  };
  
  GPURenderPassColorAttachmentDescriptor::GPURenderPassColorAttachmentDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.attachment = nullptr;
  descriptor.resolveTarget = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("attachment").IsObject()) || !(obj.Get("attachment").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassColorAttachmentDescriptor'.'attachment'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.attachment = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("attachment").As<Napi::Object>())->instance;
    if (obj.Has("resolveTarget")) {
      if (!(obj.Get("resolveTarget").IsObject()) || !(obj.Get("resolveTarget").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassColorAttachmentDescriptor'.'resolveTarget'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.resolveTarget = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("resolveTarget").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("loadOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassColorAttachmentDescriptor'.'loadOp'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.loadOp = static_cast<WGPULoadOp>(GPULoadOp(obj.Get("loadOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("storeOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassColorAttachmentDescriptor'.'storeOp'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.storeOp = static_cast<WGPUStoreOp>(GPUStoreOp(obj.Get("storeOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("clearColor").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPassColorAttachmentDescriptor'.'clearColor'");
      device->throwCallbackError(type, message);
      return ;
    }
      Napi::Object $clearColor = obj.Get("clearColor").As<Napi::Object>();
      if (!($clearColor.Get("r").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!($clearColor.Get("r").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'r'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.clearColor.r = $clearColor.Get("r").As<Napi::Number>().FloatValue();
      if (!($clearColor.Get("g").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!($clearColor.Get("g").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'g'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.clearColor.g = $clearColor.Get("g").As<Napi::Number>().FloatValue();
      if (!($clearColor.Get("b").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!($clearColor.Get("b").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'b'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.clearColor.b = $clearColor.Get("b").As<Napi::Number>().FloatValue();
      if (!($clearColor.Get("a").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!($clearColor.Get("a").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUColor'.'a'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.clearColor.a = $clearColor.Get("a").As<Napi::Number>().FloatValue();
  };
  GPURenderPassColorAttachmentDescriptor::~GPURenderPassColorAttachmentDescriptor() {
    DestroyGPURenderPassColorAttachmentDescriptor(descriptor);
  };
  
  GPURenderPassDepthStencilAttachmentDescriptor::GPURenderPassDepthStencilAttachmentDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.attachment = nullptr;
  descriptor.clearStencil = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("attachment").IsObject()) || !(obj.Get("attachment").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'attachment'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.attachment = Napi::ObjectWrap<GPUTextureView>::Unwrap(obj.Get("attachment").As<Napi::Object>())->instance;
    if (!(obj.Get("depthLoadOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthLoadOp'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.depthLoadOp = static_cast<WGPULoadOp>(GPULoadOp(obj.Get("depthLoadOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("depthStoreOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthStoreOp'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.depthStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp(obj.Get("depthStoreOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("clearDepth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("clearDepth").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.clearDepth = obj.Get("clearDepth").As<Napi::Number>().FloatValue();
    if (!(obj.Get("stencilLoadOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilLoadOp'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.stencilLoadOp = static_cast<WGPULoadOp>(GPULoadOp(obj.Get("stencilLoadOp").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("stencilStoreOp").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilStoreOp'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.stencilStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp(obj.Get("stencilStoreOp").As<Napi::String>().Utf8Value()));
    if (obj.Has("clearStencil")) {
      if (!(obj.Get("clearStencil").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("clearStencil").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.clearStencil = obj.Get("clearStencil").As<Napi::Number>().Uint32Value();
    }
  };
  GPURenderPassDepthStencilAttachmentDescriptor::~GPURenderPassDepthStencilAttachmentDescriptor() {
    DestroyGPURenderPassDepthStencilAttachmentDescriptor(descriptor);
  };
  
  GPURenderPassDescriptor::GPURenderPassDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.colorAttachments = nullptr;
  descriptor.depthStencilAttachment = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      {
        Napi::Array array = obj.Get("colorAttachments").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPURenderPassColorAttachmentDescriptor* data = (WGPURenderPassColorAttachmentDescriptor*) malloc(length * sizeof(WGPURenderPassColorAttachmentDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPassDescriptor'.'colorAttachments'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("colorAttachments").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPURenderPassColorAttachmentDescriptor* data = (WGPURenderPassColorAttachmentDescriptor*) malloc(length * sizeof(WGPURenderPassColorAttachmentDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPURenderPassColorAttachmentDescriptor $colorAttachments = DecodeGPURenderPassColorAttachmentDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$colorAttachments),
          sizeof(WGPURenderPassColorAttachmentDescriptor)
        );
      };
      descriptor.colorAttachmentCount = length;
      descriptor.colorAttachments = data;
    }
    if (obj.Has("depthStencilAttachment")) {
      if (!(obj.Get("depthStencilAttachment").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPassDescriptor'.'depthStencilAttachment'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPURenderPassDepthStencilAttachmentDescriptor depthStencilAttachment;
        depthStencilAttachment.attachment = nullptr;
        depthStencilAttachment.clearStencil = 0;
        Napi::Object $depthStencilAttachment = obj.Get("depthStencilAttachment").As<Napi::Object>();
        if (!($depthStencilAttachment.Get("attachment").IsObject()) || !($depthStencilAttachment.Get("attachment").As<Napi::Object>().InstanceOf(GPUTextureView::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTextureView' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'attachment'");
          device->throwCallbackError(type, message);
          return ;
        }
        depthStencilAttachment.attachment = Napi::ObjectWrap<GPUTextureView>::Unwrap($depthStencilAttachment.Get("attachment").As<Napi::Object>())->instance;
        if (!($depthStencilAttachment.Get("depthLoadOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthLoadOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        depthStencilAttachment.depthLoadOp = static_cast<WGPULoadOp>(GPULoadOp($depthStencilAttachment.Get("depthLoadOp").As<Napi::String>().Utf8Value()));
        if (!($depthStencilAttachment.Get("depthStoreOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'depthStoreOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        depthStencilAttachment.depthStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp($depthStencilAttachment.Get("depthStoreOp").As<Napi::String>().Utf8Value()));
        if (!($depthStencilAttachment.Get("clearDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($depthStencilAttachment.Get("clearDepth").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearDepth'");
          device->throwCallbackError(type, message);
          return ;
        }
        depthStencilAttachment.clearDepth = $depthStencilAttachment.Get("clearDepth").As<Napi::Number>().FloatValue();
        if (!($depthStencilAttachment.Get("stencilLoadOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilLoadOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        depthStencilAttachment.stencilLoadOp = static_cast<WGPULoadOp>(GPULoadOp($depthStencilAttachment.Get("stencilLoadOp").As<Napi::String>().Utf8Value()));
        if (!($depthStencilAttachment.Get("stencilStoreOp").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'stencilStoreOp'");
          device->throwCallbackError(type, message);
          return ;
        }
        depthStencilAttachment.stencilStoreOp = static_cast<WGPUStoreOp>(GPUStoreOp($depthStencilAttachment.Get("stencilStoreOp").As<Napi::String>().Utf8Value()));
        if ($depthStencilAttachment.Has("clearStencil")) {
          if (!($depthStencilAttachment.Get("clearStencil").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($depthStencilAttachment.Get("clearStencil").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPassDepthStencilAttachmentDescriptor'.'clearStencil'");
            device->throwCallbackError(type, message);
            return ;
          }
          depthStencilAttachment.clearStencil = $depthStencilAttachment.Get("clearStencil").As<Napi::Number>().Uint32Value();
        }
      {
        descriptor.depthStencilAttachment = (WGPURenderPassDepthStencilAttachmentDescriptor*) malloc(sizeof(WGPURenderPassDepthStencilAttachmentDescriptor));
        memcpy(const_cast<WGPURenderPassDepthStencilAttachmentDescriptor*>(descriptor.depthStencilAttachment), &depthStencilAttachment, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor));
      }
    }
  };
  GPURenderPassDescriptor::~GPURenderPassDescriptor() {
    DestroyGPURenderPassDescriptor(descriptor);
  };
  
  GPURenderPipelineDescriptor::GPURenderPipelineDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.layout = nullptr;
  descriptor.fragmentStage = nullptr;
  descriptor.vertexState = nullptr;
  descriptor.rasterizationState = nullptr;
  descriptor.sampleCount = 1;
  descriptor.depthStencilState = nullptr;
  descriptor.colorStates = nullptr;
  descriptor.sampleMask = 0xFFFFFFFF;
  descriptor.alphaToCoverageEnabled = false;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPipelineDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("layout")) {
      if (!(obj.Get("layout").IsObject()) || !(obj.Get("layout").As<Napi::Object>().InstanceOf(GPUPipelineLayout::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUPipelineLayout' for 'GPURenderPipelineDescriptor'.'layout'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.layout = Napi::ObjectWrap<GPUPipelineLayout>::Unwrap(obj.Get("layout").As<Napi::Object>())->instance;
    }
    if (!(obj.Get("vertexStage").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'vertexStage'");
      device->throwCallbackError(type, message);
      return ;
    }
      descriptor.vertexStage.nextInChain = nullptr;
      descriptor.vertexStage.module = nullptr;
      descriptor.vertexStage.entryPoint = nullptr;
      Napi::Object $vertexStage = obj.Get("vertexStage").As<Napi::Object>();
      if (!($vertexStage.Get("module").IsObject()) || !($vertexStage.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.vertexStage.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap($vertexStage.Get("module").As<Napi::Object>())->instance;
      {
        if (!($vertexStage.Get("entryPoint").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.vertexStage.entryPoint = getNAPIStringCopy($vertexStage.Get("entryPoint"));
      }
    if (obj.Has("fragmentStage")) {
      if (!(obj.Get("fragmentStage").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'fragmentStage'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPUProgrammableStageDescriptor fragmentStage;
        fragmentStage.nextInChain = nullptr;
        fragmentStage.module = nullptr;
        fragmentStage.entryPoint = nullptr;
        Napi::Object $fragmentStage = obj.Get("fragmentStage").As<Napi::Object>();
        if (!($fragmentStage.Get("module").IsObject()) || !($fragmentStage.Get("module").As<Napi::Object>().InstanceOf(GPUShaderModule::constructor.Value()))) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUShaderModule' for 'GPUProgrammableStageDescriptor'.'module'");
          device->throwCallbackError(type, message);
          return ;
        }
        fragmentStage.module = Napi::ObjectWrap<GPUShaderModule>::Unwrap($fragmentStage.Get("module").As<Napi::Object>())->instance;
        {
          if (!($fragmentStage.Get("entryPoint").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUProgrammableStageDescriptor'.'entryPoint'");
            device->throwCallbackError(type, message);
            return ;
          }
          fragmentStage.entryPoint = getNAPIStringCopy($fragmentStage.Get("entryPoint"));
        }
      {
        descriptor.fragmentStage = (WGPUProgrammableStageDescriptor*) malloc(sizeof(WGPUProgrammableStageDescriptor));
        memcpy(const_cast<WGPUProgrammableStageDescriptor*>(descriptor.fragmentStage), &fragmentStage, sizeof(WGPUProgrammableStageDescriptor));
      }
    }
    if (obj.Has("vertexState")) {
      if (!(obj.Get("vertexState").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'vertexState'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPUVertexStateDescriptor vertexState;
        vertexState.nextInChain = nullptr;
        vertexState.indexFormat = static_cast<WGPUIndexFormat>(1);
        vertexState.vertexBufferCount = 0;
        vertexState.vertexBuffers = nullptr;
        Napi::Object $vertexState = obj.Get("vertexState").As<Napi::Object>();
        if ($vertexState.Has("indexFormat")) {
          if (!($vertexState.Get("indexFormat").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUVertexStateDescriptor'.'indexFormat'");
            device->throwCallbackError(type, message);
            return ;
          }
          vertexState.indexFormat = static_cast<WGPUIndexFormat>(GPUIndexFormat($vertexState.Get("indexFormat").As<Napi::String>().Utf8Value()));
        }
        if ($vertexState.Has("vertexBuffers")) {
          {
            Napi::Array array = $vertexState.Get("vertexBuffers").As<Napi::Array>();
            uint32_t length = array.Length();
            WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
            for (unsigned int ii = 0; ii < length; ++ii) {
          if (!(array.Get(ii).IsObject())) {
                Napi::String type = Napi::String::New(value.Env(), "Type");
                Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUVertexStateDescriptor'.'vertexBuffers'");
                device->throwCallbackError(type, message);
                return ;
              }
            };
          }
          Napi::Array array = $vertexState.Get("vertexBuffers").As<Napi::Array>();
          uint32_t length = array.Length();
          WGPUVertexBufferLayoutDescriptor* data = (WGPUVertexBufferLayoutDescriptor*) malloc(length * sizeof(WGPUVertexBufferLayoutDescriptor));
          for (unsigned int ii = 0; ii < length; ++ii) {
            Napi::Object item = array.Get(ii).As<Napi::Object>();
            WGPUVertexBufferLayoutDescriptor $vertexBuffers = DecodeGPUVertexBufferLayoutDescriptor(device, item.As<Napi::Value>());
            memcpy(
              reinterpret_cast<void*>(&data[ii]),
              reinterpret_cast<void*>(&$vertexBuffers),
              sizeof(WGPUVertexBufferLayoutDescriptor)
            );
          };
          vertexState.vertexBufferCount = length;
          vertexState.vertexBuffers = data;
        }
      {
        descriptor.vertexState = (WGPUVertexStateDescriptor*) malloc(sizeof(WGPUVertexStateDescriptor));
        memcpy(const_cast<WGPUVertexStateDescriptor*>(descriptor.vertexState), &vertexState, sizeof(WGPUVertexStateDescriptor));
      }
    }
    if (!(obj.Get("primitiveTopology").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURenderPipelineDescriptor'.'primitiveTopology'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.primitiveTopology = static_cast<WGPUPrimitiveTopology>(GPUPrimitiveTopology(obj.Get("primitiveTopology").As<Napi::String>().Utf8Value()));
    if (obj.Has("rasterizationState")) {
      if (!(obj.Get("rasterizationState").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'rasterizationState'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPURasterizationStateDescriptor rasterizationState;
        rasterizationState.nextInChain = nullptr;
        rasterizationState.frontFace = static_cast<WGPUFrontFace>(0);
        rasterizationState.cullMode = static_cast<WGPUCullMode>(0);
        rasterizationState.depthBias = 0;
        rasterizationState.depthBiasSlopeScale = 0.0f;
        rasterizationState.depthBiasClamp = 0.0f;
        Napi::Object $rasterizationState = obj.Get("rasterizationState").As<Napi::Object>();
        if ($rasterizationState.Has("frontFace")) {
          if (!($rasterizationState.Get("frontFace").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'frontFace'");
            device->throwCallbackError(type, message);
            return ;
          }
          rasterizationState.frontFace = static_cast<WGPUFrontFace>(GPUFrontFace($rasterizationState.Get("frontFace").As<Napi::String>().Utf8Value()));
        }
        if ($rasterizationState.Has("cullMode")) {
          if (!($rasterizationState.Get("cullMode").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPURasterizationStateDescriptor'.'cullMode'");
            device->throwCallbackError(type, message);
            return ;
          }
          rasterizationState.cullMode = static_cast<WGPUCullMode>(GPUCullMode($rasterizationState.Get("cullMode").As<Napi::String>().Utf8Value()));
        }
        if ($rasterizationState.Has("depthBias")) {
          if (!($rasterizationState.Get("depthBias").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($rasterizationState.Get("depthBias").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBias'");
            device->throwCallbackError(type, message);
            return ;
          }
          rasterizationState.depthBias = $rasterizationState.Get("depthBias").As<Napi::Number>().Int32Value();
        }
        if ($rasterizationState.Has("depthBiasSlopeScale")) {
          if (!($rasterizationState.Get("depthBiasSlopeScale").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($rasterizationState.Get("depthBiasSlopeScale").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasSlopeScale'");
            device->throwCallbackError(type, message);
            return ;
          }
          rasterizationState.depthBiasSlopeScale = $rasterizationState.Get("depthBiasSlopeScale").As<Napi::Number>().FloatValue();
        }
        if ($rasterizationState.Has("depthBiasClamp")) {
          if (!($rasterizationState.Get("depthBiasClamp").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($rasterizationState.Get("depthBiasClamp").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURasterizationStateDescriptor'.'depthBiasClamp'");
            device->throwCallbackError(type, message);
            return ;
          }
          rasterizationState.depthBiasClamp = $rasterizationState.Get("depthBiasClamp").As<Napi::Number>().FloatValue();
        }
      {
        descriptor.rasterizationState = (WGPURasterizationStateDescriptor*) malloc(sizeof(WGPURasterizationStateDescriptor));
        memcpy(const_cast<WGPURasterizationStateDescriptor*>(descriptor.rasterizationState), &rasterizationState, sizeof(WGPURasterizationStateDescriptor));
      }
    }
    if (obj.Has("sampleCount")) {
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("depthStencilState")) {
      if (!(obj.Get("depthStencilState").IsObject())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'depthStencilState'");
        device->throwCallbackError(type, message);
        return ;
      }
        WGPUDepthStencilStateDescriptor depthStencilState;
        depthStencilState.nextInChain = nullptr;
        depthStencilState.depthWriteEnabled = false;
        depthStencilState.depthCompare = static_cast<WGPUCompareFunction>(7);
        depthStencilState.stencilReadMask = 0xFFFFFFFF;
        depthStencilState.stencilWriteMask = 0xFFFFFFFF;
        Napi::Object $depthStencilState = obj.Get("depthStencilState").As<Napi::Object>();
        if (!($depthStencilState.Get("format").IsString())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'format'");
          device->throwCallbackError(type, message);
          return ;
        }
        depthStencilState.format = static_cast<WGPUTextureFormat>(GPUTextureFormat($depthStencilState.Get("format").As<Napi::String>().Utf8Value()));
        if ($depthStencilState.Has("depthWriteEnabled")) {
          if (!($depthStencilState.Get("depthWriteEnabled").IsBoolean())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPUDepthStencilStateDescriptor'.'depthWriteEnabled'");
            device->throwCallbackError(type, message);
            return ;
          }
          depthStencilState.depthWriteEnabled = $depthStencilState.Get("depthWriteEnabled").As<Napi::Boolean>().Value();
        }
        if ($depthStencilState.Has("depthCompare")) {
          if (!($depthStencilState.Get("depthCompare").IsString())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUDepthStencilStateDescriptor'.'depthCompare'");
            device->throwCallbackError(type, message);
            return ;
          }
          depthStencilState.depthCompare = static_cast<WGPUCompareFunction>(GPUCompareFunction($depthStencilState.Get("depthCompare").As<Napi::String>().Utf8Value()));
        }
        if (!($depthStencilState.Get("stencilFront").IsObject())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilFront'");
          device->throwCallbackError(type, message);
          return ;
        }
          depthStencilState.stencilFront.compare = static_cast<WGPUCompareFunction>(7);
          depthStencilState.stencilFront.failOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilFront.passOp = static_cast<WGPUStencilOperation>(0);
          Napi::Object $stencilFront = $depthStencilState.Get("stencilFront").As<Napi::Object>();
          if ($stencilFront.Has("compare")) {
            if (!($stencilFront.Get("compare").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilFront.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilFront.Get("compare").As<Napi::String>().Utf8Value()));
          }
          if ($stencilFront.Has("failOp")) {
            if (!($stencilFront.Get("failOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilFront.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("failOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilFront.Has("depthFailOp")) {
            if (!($stencilFront.Get("depthFailOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilFront.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("depthFailOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilFront.Has("passOp")) {
            if (!($stencilFront.Get("passOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilFront.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilFront.Get("passOp").As<Napi::String>().Utf8Value()));
          }
        if (!($depthStencilState.Get("stencilBack").IsObject())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUDepthStencilStateDescriptor'.'stencilBack'");
          device->throwCallbackError(type, message);
          return ;
        }
          depthStencilState.stencilBack.compare = static_cast<WGPUCompareFunction>(7);
          depthStencilState.stencilBack.failOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(0);
          depthStencilState.stencilBack.passOp = static_cast<WGPUStencilOperation>(0);
          Napi::Object $stencilBack = $depthStencilState.Get("stencilBack").As<Napi::Object>();
          if ($stencilBack.Has("compare")) {
            if (!($stencilBack.Get("compare").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilBack.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction($stencilBack.Get("compare").As<Napi::String>().Utf8Value()));
          }
          if ($stencilBack.Has("failOp")) {
            if (!($stencilBack.Get("failOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilBack.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("failOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilBack.Has("depthFailOp")) {
            if (!($stencilBack.Get("depthFailOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilBack.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("depthFailOp").As<Napi::String>().Utf8Value()));
          }
          if ($stencilBack.Has("passOp")) {
            if (!($stencilBack.Get("passOp").IsString())) {
              Napi::String type = Napi::String::New(value.Env(), "Type");
              Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
              device->throwCallbackError(type, message);
              return ;
            }
            depthStencilState.stencilBack.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation($stencilBack.Get("passOp").As<Napi::String>().Utf8Value()));
          }
        if ($depthStencilState.Has("stencilReadMask")) {
          if (!($depthStencilState.Get("stencilReadMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($depthStencilState.Get("stencilReadMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilReadMask'");
            device->throwCallbackError(type, message);
            return ;
          }
          depthStencilState.stencilReadMask = $depthStencilState.Get("stencilReadMask").As<Napi::Number>().Uint32Value();
        }
        if ($depthStencilState.Has("stencilWriteMask")) {
          if (!($depthStencilState.Get("stencilWriteMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
            device->throwCallbackError(type, message);
            return ;
          }
          if (!($depthStencilState.Get("stencilWriteMask").IsNumber())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUDepthStencilStateDescriptor'.'stencilWriteMask'");
            device->throwCallbackError(type, message);
            return ;
          }
          depthStencilState.stencilWriteMask = $depthStencilState.Get("stencilWriteMask").As<Napi::Number>().Uint32Value();
        }
      {
        descriptor.depthStencilState = (WGPUDepthStencilStateDescriptor*) malloc(sizeof(WGPUDepthStencilStateDescriptor));
        memcpy(const_cast<WGPUDepthStencilStateDescriptor*>(descriptor.depthStencilState), &depthStencilState, sizeof(WGPUDepthStencilStateDescriptor));
      }
    }
    {
      {
        Napi::Array array = obj.Get("colorStates").As<Napi::Array>();
        uint32_t length = array.Length();
        WGPUColorStateDescriptor* data = (WGPUColorStateDescriptor*) malloc(length * sizeof(WGPUColorStateDescriptor));
        for (unsigned int ii = 0; ii < length; ++ii) {
      if (!(array.Get(ii).IsObject())) {
            Napi::String type = Napi::String::New(value.Env(), "Type");
            Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPURenderPipelineDescriptor'.'colorStates'");
            device->throwCallbackError(type, message);
            return ;
          }
        };
      }
      Napi::Array array = obj.Get("colorStates").As<Napi::Array>();
      uint32_t length = array.Length();
      WGPUColorStateDescriptor* data = (WGPUColorStateDescriptor*) malloc(length * sizeof(WGPUColorStateDescriptor));
      for (unsigned int ii = 0; ii < length; ++ii) {
        Napi::Object item = array.Get(ii).As<Napi::Object>();
        WGPUColorStateDescriptor $colorStates = DecodeGPUColorStateDescriptor(device, item.As<Napi::Value>());
        memcpy(
          reinterpret_cast<void*>(&data[ii]),
          reinterpret_cast<void*>(&$colorStates),
          sizeof(WGPUColorStateDescriptor)
        );
      };
      descriptor.colorStateCount = length;
      descriptor.colorStates = data;
    }
    if (obj.Has("sampleMask")) {
      if (!(obj.Get("sampleMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleMask'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("sampleMask").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPURenderPipelineDescriptor'.'sampleMask'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.sampleMask = obj.Get("sampleMask").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("alphaToCoverageEnabled")) {
      if (!(obj.Get("alphaToCoverageEnabled").IsBoolean())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Boolean' for 'GPURenderPipelineDescriptor'.'alphaToCoverageEnabled'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.alphaToCoverageEnabled = obj.Get("alphaToCoverageEnabled").As<Napi::Boolean>().Value();
    }
  };
  GPURenderPipelineDescriptor::~GPURenderPipelineDescriptor() {
    DestroyGPURenderPipelineDescriptor(descriptor);
  };
  
  GPUSamplerDescriptor::GPUSamplerDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.addressModeU = static_cast<WGPUAddressMode>(2);
  descriptor.addressModeV = static_cast<WGPUAddressMode>(2);
  descriptor.addressModeW = static_cast<WGPUAddressMode>(2);
  descriptor.magFilter = static_cast<WGPUFilterMode>(0);
  descriptor.minFilter = static_cast<WGPUFilterMode>(0);
  descriptor.mipmapFilter = static_cast<WGPUFilterMode>(0);
  descriptor.lodMinClamp = 0.0f;
  descriptor.lodMaxClamp = 1000.0f;
  descriptor.compare = static_cast<WGPUCompareFunction>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("addressModeU")) {
      if (!(obj.Get("addressModeU").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'addressModeU'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.addressModeU = static_cast<WGPUAddressMode>(GPUAddressMode(obj.Get("addressModeU").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("addressModeV")) {
      if (!(obj.Get("addressModeV").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'addressModeV'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.addressModeV = static_cast<WGPUAddressMode>(GPUAddressMode(obj.Get("addressModeV").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("addressModeW")) {
      if (!(obj.Get("addressModeW").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'addressModeW'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.addressModeW = static_cast<WGPUAddressMode>(GPUAddressMode(obj.Get("addressModeW").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("magFilter")) {
      if (!(obj.Get("magFilter").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'magFilter'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.magFilter = static_cast<WGPUFilterMode>(GPUFilterMode(obj.Get("magFilter").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("minFilter")) {
      if (!(obj.Get("minFilter").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'minFilter'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.minFilter = static_cast<WGPUFilterMode>(GPUFilterMode(obj.Get("minFilter").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("mipmapFilter")) {
      if (!(obj.Get("mipmapFilter").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'mipmapFilter'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.mipmapFilter = static_cast<WGPUFilterMode>(GPUFilterMode(obj.Get("mipmapFilter").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("lodMinClamp")) {
      if (!(obj.Get("lodMinClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMinClamp'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("lodMinClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMinClamp'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.lodMinClamp = obj.Get("lodMinClamp").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("lodMaxClamp")) {
      if (!(obj.Get("lodMaxClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMaxClamp'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("lodMaxClamp").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSamplerDescriptor'.'lodMaxClamp'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.lodMaxClamp = obj.Get("lodMaxClamp").As<Napi::Number>().FloatValue();
    }
    if (obj.Has("compare")) {
      if (!(obj.Get("compare").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSamplerDescriptor'.'compare'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction(obj.Get("compare").As<Napi::String>().Utf8Value()));
    }
  };
  GPUSamplerDescriptor::~GPUSamplerDescriptor() {
    DestroyGPUSamplerDescriptor(descriptor);
  };
  
  GPUShaderModuleDescriptor::GPUShaderModuleDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.code = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUShaderModuleDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    {
      if (!(obj.Get("code").IsTypedArray())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'TypedArray' for 'GPUShaderModuleDescriptor'.'code'");
        device->throwCallbackError(type, message);
        return ;
      }
      Napi::TypedArray array = obj.Get("code").As<Napi::TypedArray>();
      Napi::ArrayBuffer buffer = array.ArrayBuffer();
      descriptor.code = reinterpret_cast<const uint32_t*>(buffer.Data());
    }
  };
  GPUShaderModuleDescriptor::~GPUShaderModuleDescriptor() {
    DestroyGPUShaderModuleDescriptor(descriptor);
  };
  
  GPUStencilStateFaceDescriptor::GPUStencilStateFaceDescriptor(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.compare = static_cast<WGPUCompareFunction>(7);
  descriptor.failOp = static_cast<WGPUStencilOperation>(0);
  descriptor.depthFailOp = static_cast<WGPUStencilOperation>(0);
  descriptor.passOp = static_cast<WGPUStencilOperation>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("compare")) {
      if (!(obj.Get("compare").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'compare'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.compare = static_cast<WGPUCompareFunction>(GPUCompareFunction(obj.Get("compare").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("failOp")) {
      if (!(obj.Get("failOp").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'failOp'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.failOp = static_cast<WGPUStencilOperation>(GPUStencilOperation(obj.Get("failOp").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("depthFailOp")) {
      if (!(obj.Get("depthFailOp").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'depthFailOp'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.depthFailOp = static_cast<WGPUStencilOperation>(GPUStencilOperation(obj.Get("depthFailOp").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("passOp")) {
      if (!(obj.Get("passOp").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUStencilStateFaceDescriptor'.'passOp'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.passOp = static_cast<WGPUStencilOperation>(GPUStencilOperation(obj.Get("passOp").As<Napi::String>().Utf8Value()));
    }
  };
  GPUStencilStateFaceDescriptor::~GPUStencilStateFaceDescriptor() {
    DestroyGPUStencilStateFaceDescriptor(descriptor);
  };
  
  GPUSurfaceDescriptor::GPUSurfaceDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSurfaceDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
  };
  GPUSurfaceDescriptor::~GPUSurfaceDescriptor() {
    DestroyGPUSurfaceDescriptor(descriptor);
  };
  
  GPUSurfaceDescriptorFromHTMLCanvasId::GPUSurfaceDescriptorFromHTMLCanvasId(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.id = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    {
      if (!(obj.Get("id").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSurfaceDescriptorFromHTMLCanvasId'.'id'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.id = getNAPIStringCopy(obj.Get("id"));
    }
  };
  GPUSurfaceDescriptorFromHTMLCanvasId::~GPUSurfaceDescriptorFromHTMLCanvasId() {
    DestroyGPUSurfaceDescriptorFromHTMLCanvasId(descriptor);
  };
  
  GPUSurfaceDescriptorFromMetalLayer::GPUSurfaceDescriptorFromMetalLayer(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.layer = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("layer").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromMetalLayer'.'layer'");
      device->throwCallbackError(type, message);
      return ;
    }
  };
  GPUSurfaceDescriptorFromMetalLayer::~GPUSurfaceDescriptorFromMetalLayer() {
    DestroyGPUSurfaceDescriptorFromMetalLayer(descriptor);
  };
  
  GPUSurfaceDescriptorFromWindowsHWND::GPUSurfaceDescriptorFromWindowsHWND(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.hinstance = nullptr;
  descriptor.hwnd = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("hinstance").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromWindowsHWND'.'hinstance'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("hwnd").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromWindowsHWND'.'hwnd'");
      device->throwCallbackError(type, message);
      return ;
    }
  };
  GPUSurfaceDescriptorFromWindowsHWND::~GPUSurfaceDescriptorFromWindowsHWND() {
    DestroyGPUSurfaceDescriptorFromWindowsHWND(descriptor);
  };
  
  GPUSurfaceDescriptorFromXlib::GPUSurfaceDescriptorFromXlib(GPUDevice* device, const Napi::Value& value) {
    // reset descriptor
  descriptor.display = nullptr;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("display").IsArrayBuffer())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'ArrayBuffer' for 'GPUSurfaceDescriptorFromXlib'.'display'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("window").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSurfaceDescriptorFromXlib'.'window'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("window").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSurfaceDescriptorFromXlib'.'window'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.window = obj.Get("window").As<Napi::Number>().Uint32Value();
  };
  GPUSurfaceDescriptorFromXlib::~GPUSurfaceDescriptorFromXlib() {
    DestroyGPUSurfaceDescriptorFromXlib(descriptor);
  };
  
  GPUSwapChainDescriptor::GPUSwapChainDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.implementation = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSwapChainDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("usage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'usage'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.usage = static_cast<WGPUTextureUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSwapChainDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'width'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("width").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'width'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.width = obj.Get("width").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'height'");
      device->throwCallbackError(type, message);
      return ;
    }
    if (!(obj.Get("height").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'height'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.height = obj.Get("height").As<Napi::Number>().Uint32Value();
    if (!(obj.Get("presentMode").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUSwapChainDescriptor'.'presentMode'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.presentMode = static_cast<WGPUPresentMode>(GPUPresentMode(obj.Get("presentMode").As<Napi::String>().Utf8Value()));
    if (obj.Has("implementation")) {
      if (!(obj.Get("implementation").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'implementation'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("implementation").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUSwapChainDescriptor'.'implementation'");
        device->throwCallbackError(type, message);
        return ;
      }
      {
        descriptor.implementation = static_cast<uint64_t>(obj.Get("implementation").As<Napi::Number>().Uint32Value());
      }
    }
  };
  GPUSwapChainDescriptor::~GPUSwapChainDescriptor() {
    DestroyGPUSwapChainDescriptor(descriptor);
  };
  
  GPUTextureCopyView::GPUTextureCopyView(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.texture = nullptr;
  descriptor.mipLevel = 0;
  descriptor.arrayLayer = 0;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (!(obj.Get("texture").IsObject()) || !(obj.Get("texture").As<Napi::Object>().InstanceOf(GPUTexture::constructor.Value()))) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'GPUTexture' for 'GPUTextureCopyView'.'texture'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.texture = Napi::ObjectWrap<GPUTexture>::Unwrap(obj.Get("texture").As<Napi::Object>())->instance;
    if (obj.Has("mipLevel")) {
      if (!(obj.Get("mipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'mipLevel'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("mipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'mipLevel'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.mipLevel = obj.Get("mipLevel").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("arrayLayer")) {
      if (!(obj.Get("arrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'arrayLayer'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("arrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureCopyView'.'arrayLayer'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.arrayLayer = obj.Get("arrayLayer").As<Napi::Number>().Uint32Value();
    }
    if (!(obj.Get("origin").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUTextureCopyView'.'origin'");
      device->throwCallbackError(type, message);
      return ;
    }
      descriptor.origin.x = 0;
      descriptor.origin.y = 0;
      descriptor.origin.z = 0;
      Napi::Object $origin = obj.Get("origin").As<Napi::Object>();
      if ($origin.Has("x")) {
        if (!($origin.Get("x").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($origin.Get("x").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'x'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.origin.x = $origin.Get("x").As<Napi::Number>().Uint32Value();
      }
      if ($origin.Has("y")) {
        if (!($origin.Get("y").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($origin.Get("y").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'y'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.origin.y = $origin.Get("y").As<Napi::Number>().Uint32Value();
      }
      if ($origin.Has("z")) {
        if (!($origin.Get("z").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
          device->throwCallbackError(type, message);
          return ;
        }
        if (!($origin.Get("z").IsNumber())) {
          Napi::String type = Napi::String::New(value.Env(), "Type");
          Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUOrigin3D'.'z'");
          device->throwCallbackError(type, message);
          return ;
        }
        descriptor.origin.z = $origin.Get("z").As<Napi::Number>().Uint32Value();
      }
  };
  GPUTextureCopyView::~GPUTextureCopyView() {
    DestroyGPUTextureCopyView(descriptor);
  };
  
  GPUTextureDescriptor::GPUTextureDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.dimension = static_cast<WGPUTextureDimension>(1);
  descriptor.arrayLayerCount = 1;
  descriptor.mipLevelCount = 1;
  descriptor.sampleCount = 1;
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (!(obj.Get("usage").IsNumber())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'usage'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.usage = static_cast<WGPUTextureUsage>(obj.Get("usage").As<Napi::Number>().Uint32Value());
    if (obj.Has("dimension")) {
      if (!(obj.Get("dimension").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureDescriptor'.'dimension'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.dimension = static_cast<WGPUTextureDimension>(GPUTextureDimension(obj.Get("dimension").As<Napi::String>().Utf8Value()));
    }
    if (!(obj.Get("size").IsObject())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'Object' for 'GPUTextureDescriptor'.'size'");
      device->throwCallbackError(type, message);
      return ;
    }
      Napi::Object $size = obj.Get("size").As<Napi::Object>();
      if (!($size.Get("width").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!($size.Get("width").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'width'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.size.width = $size.Get("width").As<Napi::Number>().Uint32Value();
      if (!($size.Get("height").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!($size.Get("height").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'height'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.size.height = $size.Get("height").As<Napi::Number>().Uint32Value();
      if (!($size.Get("depth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!($size.Get("depth").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUExtent3D'.'depth'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.size.depth = $size.Get("depth").As<Napi::Number>().Uint32Value();
    if (obj.Has("arrayLayerCount")) {
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.arrayLayerCount = obj.Get("arrayLayerCount").As<Napi::Number>().Uint32Value();
    }
    if (!(obj.Get("format").IsString())) {
      Napi::String type = Napi::String::New(value.Env(), "Type");
      Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureDescriptor'.'format'");
      device->throwCallbackError(type, message);
      return ;
    }
    descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    if (obj.Has("mipLevelCount")) {
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.mipLevelCount = obj.Get("mipLevelCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("sampleCount")) {
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("sampleCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureDescriptor'.'sampleCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.sampleCount = obj.Get("sampleCount").As<Napi::Number>().Uint32Value();
    }
  };
  GPUTextureDescriptor::~GPUTextureDescriptor() {
    DestroyGPUTextureDescriptor(descriptor);
  };
  
  GPUTextureViewDescriptor::GPUTextureViewDescriptor(GPUDevice* device, const Napi::Value& value, void* nextInChain) {
    // reset descriptor
  descriptor.nextInChain = nullptr;
  descriptor.label = nullptr;
  descriptor.format = static_cast<WGPUTextureFormat>(0);
  descriptor.dimension = static_cast<WGPUTextureViewDimension>(0);
  descriptor.baseMipLevel = 0;
  descriptor.mipLevelCount = 0;
  descriptor.baseArrayLayer = 0;
  descriptor.arrayLayerCount = 0;
  descriptor.aspect = static_cast<WGPUTextureAspect>(0);
    // fill descriptor
    Napi::Object obj = value.As<Napi::Object>();
    if (obj.Has("label")) {
      if (!(obj.Get("label").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'label'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.label = getNAPIStringCopy(obj.Get("label"));
    }
    if (obj.Has("format")) {
      if (!(obj.Get("format").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'format'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.format = static_cast<WGPUTextureFormat>(GPUTextureFormat(obj.Get("format").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("dimension")) {
      if (!(obj.Get("dimension").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'dimension'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.dimension = static_cast<WGPUTextureViewDimension>(GPUTextureViewDimension(obj.Get("dimension").As<Napi::String>().Utf8Value()));
    }
    if (obj.Has("baseMipLevel")) {
      if (!(obj.Get("baseMipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseMipLevel'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("baseMipLevel").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseMipLevel'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.baseMipLevel = obj.Get("baseMipLevel").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("mipLevelCount")) {
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("mipLevelCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'mipLevelCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.mipLevelCount = obj.Get("mipLevelCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("baseArrayLayer")) {
      if (!(obj.Get("baseArrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseArrayLayer'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("baseArrayLayer").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'baseArrayLayer'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.baseArrayLayer = obj.Get("baseArrayLayer").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("arrayLayerCount")) {
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      if (!(obj.Get("arrayLayerCount").IsNumber())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'Number' for 'GPUTextureViewDescriptor'.'arrayLayerCount'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.arrayLayerCount = obj.Get("arrayLayerCount").As<Napi::Number>().Uint32Value();
    }
    if (obj.Has("aspect")) {
      if (!(obj.Get("aspect").IsString())) {
        Napi::String type = Napi::String::New(value.Env(), "Type");
        Napi::String message = Napi::String::New(value.Env(), "Expected 'String' for 'GPUTextureViewDescriptor'.'aspect'");
        device->throwCallbackError(type, message);
        return ;
      }
      descriptor.aspect = static_cast<WGPUTextureAspect>(GPUTextureAspect(obj.Get("aspect").As<Napi::String>().Utf8Value()));
    }
  };
  GPUTextureViewDescriptor::~GPUTextureViewDescriptor() {
    DestroyGPUTextureViewDescriptor(descriptor);
  };
  

}
