/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY webgpu v0.0.9
 */
#include <dawn/dawn.h>
#include <dawn/dawn_wsi.h>
#include <dawn/webgpu_cpp.h>
#include <dawn_native/DawnNative.h>

Napi::Value MemoryLayouts(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::Object out = Napi::Object::New(env);

  Napi::String strByteOffset = Napi::String::New(env, "byteOffset");
  Napi::String strByteLength = Napi::String::New(env, "byteLength");

  Napi::Object sWGPUAdapterProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUAdapterProperties, deviceID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUAdapterProperties::deviceID)));
    sWGPUAdapterProperties.Set(Napi::String::New(env, "deviceID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUAdapterProperties, vendorID)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUAdapterProperties::vendorID)));
    sWGPUAdapterProperties.Set(Napi::String::New(env, "vendorID"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUAdapterProperties, name)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUAdapterProperties::name)));
    sWGPUAdapterProperties.Set(Napi::String::New(env, "name"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUAdapterProperties, adapterType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUAdapterProperties::adapterType)));
    sWGPUAdapterProperties.Set(Napi::String::New(env, "adapterType"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUAdapterProperties, backendType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUAdapterProperties::backendType)));
    sWGPUAdapterProperties.Set(Napi::String::New(env, "backendType"), obj);
  }
  sWGPUAdapterProperties.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUAdapterProperties)));
  out.Set(Napi::String::New(env, "WGPUAdapterProperties"), sWGPUAdapterProperties);
  Napi::Object sWGPUBindGroupBinding = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupBinding, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding::binding)));
    sWGPUBindGroupBinding.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupBinding, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding::buffer)));
    sWGPUBindGroupBinding.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupBinding, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding::offset)));
    sWGPUBindGroupBinding.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupBinding, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding::size)));
    sWGPUBindGroupBinding.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupBinding, sampler)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding::sampler)));
    sWGPUBindGroupBinding.Set(Napi::String::New(env, "sampler"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupBinding, textureView)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding::textureView)));
    sWGPUBindGroupBinding.Set(Napi::String::New(env, "textureView"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupBinding, accelerationContainer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding::accelerationContainer)));
    sWGPUBindGroupBinding.Set(Napi::String::New(env, "accelerationContainer"), obj);
  }
  sWGPUBindGroupBinding.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupBinding)));
  out.Set(Napi::String::New(env, "WGPUBindGroupBinding"), sWGPUBindGroupBinding);
  Napi::Object sWGPURayTracingAccelerationGeometryVertexDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryVertexDescriptor, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor::buffer)));
    sWGPURayTracingAccelerationGeometryVertexDescriptor.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryVertexDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor::format)));
    sWGPURayTracingAccelerationGeometryVertexDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryVertexDescriptor, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor::stride)));
    sWGPURayTracingAccelerationGeometryVertexDescriptor.Set(Napi::String::New(env, "stride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryVertexDescriptor, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor::offset)));
    sWGPURayTracingAccelerationGeometryVertexDescriptor.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryVertexDescriptor, count)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor::count)));
    sWGPURayTracingAccelerationGeometryVertexDescriptor.Set(Napi::String::New(env, "count"), obj);
  }
  sWGPURayTracingAccelerationGeometryVertexDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryVertexDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingAccelerationGeometryVertexDescriptor"), sWGPURayTracingAccelerationGeometryVertexDescriptor);
  Napi::Object sWGPURayTracingAccelerationGeometryIndexDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryIndexDescriptor, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor::buffer)));
    sWGPURayTracingAccelerationGeometryIndexDescriptor.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryIndexDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor::format)));
    sWGPURayTracingAccelerationGeometryIndexDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryIndexDescriptor, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor::offset)));
    sWGPURayTracingAccelerationGeometryIndexDescriptor.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryIndexDescriptor, count)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor::count)));
    sWGPURayTracingAccelerationGeometryIndexDescriptor.Set(Napi::String::New(env, "count"), obj);
  }
  sWGPURayTracingAccelerationGeometryIndexDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryIndexDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingAccelerationGeometryIndexDescriptor"), sWGPURayTracingAccelerationGeometryIndexDescriptor);
  Napi::Object sWGPURayTracingAccelerationGeometryAabbDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryAabbDescriptor, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor::buffer)));
    sWGPURayTracingAccelerationGeometryAabbDescriptor.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryAabbDescriptor, stride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor::stride)));
    sWGPURayTracingAccelerationGeometryAabbDescriptor.Set(Napi::String::New(env, "stride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryAabbDescriptor, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor::offset)));
    sWGPURayTracingAccelerationGeometryAabbDescriptor.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryAabbDescriptor, count)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor::count)));
    sWGPURayTracingAccelerationGeometryAabbDescriptor.Set(Napi::String::New(env, "count"), obj);
  }
  sWGPURayTracingAccelerationGeometryAabbDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryAabbDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingAccelerationGeometryAabbDescriptor"), sWGPURayTracingAccelerationGeometryAabbDescriptor);
  Napi::Object sWGPURayTracingAccelerationGeometryDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryDescriptor, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryDescriptor::flags)));
    sWGPURayTracingAccelerationGeometryDescriptor.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryDescriptor, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryDescriptor::type)));
    sWGPURayTracingAccelerationGeometryDescriptor.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryDescriptor, vertex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryDescriptor::vertex)));
    sWGPURayTracingAccelerationGeometryDescriptor.Set(Napi::String::New(env, "vertex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryDescriptor, index)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryDescriptor::index)));
    sWGPURayTracingAccelerationGeometryDescriptor.Set(Napi::String::New(env, "index"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationGeometryDescriptor, aabb)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryDescriptor::aabb)));
    sWGPURayTracingAccelerationGeometryDescriptor.Set(Napi::String::New(env, "aabb"), obj);
  }
  sWGPURayTracingAccelerationGeometryDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationGeometryDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingAccelerationGeometryDescriptor"), sWGPURayTracingAccelerationGeometryDescriptor);
  Napi::Object sWGPUTransform3D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTransform3D, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTransform3D::x)));
    sWGPUTransform3D.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTransform3D, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTransform3D::y)));
    sWGPUTransform3D.Set(Napi::String::New(env, "y"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTransform3D, z)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTransform3D::z)));
    sWGPUTransform3D.Set(Napi::String::New(env, "z"), obj);
  }
  sWGPUTransform3D.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTransform3D)));
  out.Set(Napi::String::New(env, "WGPUTransform3D"), sWGPUTransform3D);
  Napi::Object sWGPURayTracingAccelerationInstanceTransformDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceTransformDescriptor, translation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor::translation)));
    sWGPURayTracingAccelerationInstanceTransformDescriptor.Set(Napi::String::New(env, "translation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceTransformDescriptor, rotation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor::rotation)));
    sWGPURayTracingAccelerationInstanceTransformDescriptor.Set(Napi::String::New(env, "rotation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceTransformDescriptor, scale)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor::scale)));
    sWGPURayTracingAccelerationInstanceTransformDescriptor.Set(Napi::String::New(env, "scale"), obj);
  }
  sWGPURayTracingAccelerationInstanceTransformDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceTransformDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingAccelerationInstanceTransformDescriptor"), sWGPURayTracingAccelerationInstanceTransformDescriptor);
  Napi::Object sWGPURayTracingAccelerationInstanceDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::flags)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, mask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::mask)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "mask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, instanceId)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::instanceId)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "instanceId"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, instanceOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::instanceOffset)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "instanceOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, transform)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::transform)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "transform"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, transformMatrixSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::transformMatrixSize)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "transformMatrixSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, transformMatrix)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::transformMatrix)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "transformMatrix"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationInstanceDescriptor, geometryContainer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor::geometryContainer)));
    sWGPURayTracingAccelerationInstanceDescriptor.Set(Napi::String::New(env, "geometryContainer"), obj);
  }
  sWGPURayTracingAccelerationInstanceDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationInstanceDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingAccelerationInstanceDescriptor"), sWGPURayTracingAccelerationInstanceDescriptor);
  Napi::Object sWGPURayTracingAccelerationContainerDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationContainerDescriptor, flags)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor::flags)));
    sWGPURayTracingAccelerationContainerDescriptor.Set(Napi::String::New(env, "flags"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationContainerDescriptor, level)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor::level)));
    sWGPURayTracingAccelerationContainerDescriptor.Set(Napi::String::New(env, "level"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationContainerDescriptor, geometryCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor::geometryCount)));
    sWGPURayTracingAccelerationContainerDescriptor.Set(Napi::String::New(env, "geometryCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationContainerDescriptor, geometries)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor::geometries)));
    sWGPURayTracingAccelerationContainerDescriptor.Set(Napi::String::New(env, "geometries"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationContainerDescriptor, instanceCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor::instanceCount)));
    sWGPURayTracingAccelerationContainerDescriptor.Set(Napi::String::New(env, "instanceCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationContainerDescriptor, instances)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor::instances)));
    sWGPURayTracingAccelerationContainerDescriptor.Set(Napi::String::New(env, "instances"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingAccelerationContainerDescriptor, instanceBuffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor::instanceBuffer)));
    sWGPURayTracingAccelerationContainerDescriptor.Set(Napi::String::New(env, "instanceBuffer"), obj);
  }
  sWGPURayTracingAccelerationContainerDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingAccelerationContainerDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingAccelerationContainerDescriptor"), sWGPURayTracingAccelerationContainerDescriptor);
  Napi::Object sWGPURayTracingShaderBindingTableStagesDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableStagesDescriptor, stage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableStagesDescriptor::stage)));
    sWGPURayTracingShaderBindingTableStagesDescriptor.Set(Napi::String::New(env, "stage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableStagesDescriptor, module)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableStagesDescriptor::module)));
    sWGPURayTracingShaderBindingTableStagesDescriptor.Set(Napi::String::New(env, "module"), obj);
  }
  sWGPURayTracingShaderBindingTableStagesDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableStagesDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingShaderBindingTableStagesDescriptor"), sWGPURayTracingShaderBindingTableStagesDescriptor);
  Napi::Object sWGPURayTracingShaderBindingTableGroupsDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableGroupsDescriptor, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor::type)));
    sWGPURayTracingShaderBindingTableGroupsDescriptor.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableGroupsDescriptor, generalIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor::generalIndex)));
    sWGPURayTracingShaderBindingTableGroupsDescriptor.Set(Napi::String::New(env, "generalIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableGroupsDescriptor, closestHitIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor::closestHitIndex)));
    sWGPURayTracingShaderBindingTableGroupsDescriptor.Set(Napi::String::New(env, "closestHitIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableGroupsDescriptor, anyHitIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor::anyHitIndex)));
    sWGPURayTracingShaderBindingTableGroupsDescriptor.Set(Napi::String::New(env, "anyHitIndex"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableGroupsDescriptor, intersectionIndex)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor::intersectionIndex)));
    sWGPURayTracingShaderBindingTableGroupsDescriptor.Set(Napi::String::New(env, "intersectionIndex"), obj);
  }
  sWGPURayTracingShaderBindingTableGroupsDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableGroupsDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingShaderBindingTableGroupsDescriptor"), sWGPURayTracingShaderBindingTableGroupsDescriptor);
  Napi::Object sWGPURayTracingShaderBindingTableDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableDescriptor, stagesCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableDescriptor::stagesCount)));
    sWGPURayTracingShaderBindingTableDescriptor.Set(Napi::String::New(env, "stagesCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableDescriptor, stages)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableDescriptor::stages)));
    sWGPURayTracingShaderBindingTableDescriptor.Set(Napi::String::New(env, "stages"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableDescriptor, groupsCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableDescriptor::groupsCount)));
    sWGPURayTracingShaderBindingTableDescriptor.Set(Napi::String::New(env, "groupsCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingShaderBindingTableDescriptor, groups)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableDescriptor::groups)));
    sWGPURayTracingShaderBindingTableDescriptor.Set(Napi::String::New(env, "groups"), obj);
  }
  sWGPURayTracingShaderBindingTableDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingShaderBindingTableDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingShaderBindingTableDescriptor"), sWGPURayTracingShaderBindingTableDescriptor);
  Napi::Object sWGPUBindGroupDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupDescriptor::label)));
    sWGPUBindGroupDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupDescriptor, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupDescriptor::layout)));
    sWGPUBindGroupDescriptor.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupDescriptor, bindingCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupDescriptor::bindingCount)));
    sWGPUBindGroupDescriptor.Set(Napi::String::New(env, "bindingCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupDescriptor, bindings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupDescriptor::bindings)));
    sWGPUBindGroupDescriptor.Set(Napi::String::New(env, "bindings"), obj);
  }
  sWGPUBindGroupDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupDescriptor)));
  out.Set(Napi::String::New(env, "WGPUBindGroupDescriptor"), sWGPUBindGroupDescriptor);
  Napi::Object sWGPUBindGroupLayoutBinding = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutBinding, binding)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding::binding)));
    sWGPUBindGroupLayoutBinding.Set(Napi::String::New(env, "binding"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutBinding, visibility)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding::visibility)));
    sWGPUBindGroupLayoutBinding.Set(Napi::String::New(env, "visibility"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutBinding, type)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding::type)));
    sWGPUBindGroupLayoutBinding.Set(Napi::String::New(env, "type"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutBinding, hasDynamicOffset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding::hasDynamicOffset)));
    sWGPUBindGroupLayoutBinding.Set(Napi::String::New(env, "hasDynamicOffset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutBinding, multisampled)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding::multisampled)));
    sWGPUBindGroupLayoutBinding.Set(Napi::String::New(env, "multisampled"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutBinding, textureDimension)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding::textureDimension)));
    sWGPUBindGroupLayoutBinding.Set(Napi::String::New(env, "textureDimension"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutBinding, textureComponentType)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding::textureComponentType)));
    sWGPUBindGroupLayoutBinding.Set(Napi::String::New(env, "textureComponentType"), obj);
  }
  sWGPUBindGroupLayoutBinding.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutBinding)));
  out.Set(Napi::String::New(env, "WGPUBindGroupLayoutBinding"), sWGPUBindGroupLayoutBinding);
  Napi::Object sWGPUBindGroupLayoutDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutDescriptor::label)));
    sWGPUBindGroupLayoutDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutDescriptor, bindingCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutDescriptor::bindingCount)));
    sWGPUBindGroupLayoutDescriptor.Set(Napi::String::New(env, "bindingCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBindGroupLayoutDescriptor, bindings)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutDescriptor::bindings)));
    sWGPUBindGroupLayoutDescriptor.Set(Napi::String::New(env, "bindings"), obj);
  }
  sWGPUBindGroupLayoutDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBindGroupLayoutDescriptor)));
  out.Set(Napi::String::New(env, "WGPUBindGroupLayoutDescriptor"), sWGPUBindGroupLayoutDescriptor);
  Napi::Object sWGPUBlendDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBlendDescriptor, operation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBlendDescriptor::operation)));
    sWGPUBlendDescriptor.Set(Napi::String::New(env, "operation"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBlendDescriptor, srcFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBlendDescriptor::srcFactor)));
    sWGPUBlendDescriptor.Set(Napi::String::New(env, "srcFactor"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBlendDescriptor, dstFactor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBlendDescriptor::dstFactor)));
    sWGPUBlendDescriptor.Set(Napi::String::New(env, "dstFactor"), obj);
  }
  sWGPUBlendDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBlendDescriptor)));
  out.Set(Napi::String::New(env, "WGPUBlendDescriptor"), sWGPUBlendDescriptor);
  Napi::Object sWGPUColorStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColorStateDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColorStateDescriptor::format)));
    sWGPUColorStateDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColorStateDescriptor, alphaBlend)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColorStateDescriptor::alphaBlend)));
    sWGPUColorStateDescriptor.Set(Napi::String::New(env, "alphaBlend"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColorStateDescriptor, colorBlend)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColorStateDescriptor::colorBlend)));
    sWGPUColorStateDescriptor.Set(Napi::String::New(env, "colorBlend"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColorStateDescriptor, writeMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColorStateDescriptor::writeMask)));
    sWGPUColorStateDescriptor.Set(Napi::String::New(env, "writeMask"), obj);
  }
  sWGPUColorStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColorStateDescriptor)));
  out.Set(Napi::String::New(env, "WGPUColorStateDescriptor"), sWGPUColorStateDescriptor);
  Napi::Object sWGPUBufferCopyView = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBufferCopyView, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferCopyView::buffer)));
    sWGPUBufferCopyView.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBufferCopyView, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferCopyView::offset)));
    sWGPUBufferCopyView.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBufferCopyView, rowPitch)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferCopyView::rowPitch)));
    sWGPUBufferCopyView.Set(Napi::String::New(env, "rowPitch"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBufferCopyView, imageHeight)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferCopyView::imageHeight)));
    sWGPUBufferCopyView.Set(Napi::String::New(env, "imageHeight"), obj);
  }
  sWGPUBufferCopyView.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferCopyView)));
  out.Set(Napi::String::New(env, "WGPUBufferCopyView"), sWGPUBufferCopyView);
  Napi::Object sWGPUBufferDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBufferDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferDescriptor::label)));
    sWGPUBufferDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBufferDescriptor, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferDescriptor::usage)));
    sWGPUBufferDescriptor.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUBufferDescriptor, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferDescriptor::size)));
    sWGPUBufferDescriptor.Set(Napi::String::New(env, "size"), obj);
  }
  sWGPUBufferDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUBufferDescriptor)));
  out.Set(Napi::String::New(env, "WGPUBufferDescriptor"), sWGPUBufferDescriptor);
  Napi::Object sWGPUCreateBufferMappedResult = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUCreateBufferMappedResult, buffer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCreateBufferMappedResult::buffer)));
    sWGPUCreateBufferMappedResult.Set(Napi::String::New(env, "buffer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUCreateBufferMappedResult, dataLength)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCreateBufferMappedResult::dataLength)));
    sWGPUCreateBufferMappedResult.Set(Napi::String::New(env, "dataLength"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUCreateBufferMappedResult, data)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCreateBufferMappedResult::data)));
    sWGPUCreateBufferMappedResult.Set(Napi::String::New(env, "data"), obj);
  }
  sWGPUCreateBufferMappedResult.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCreateBufferMappedResult)));
  out.Set(Napi::String::New(env, "WGPUCreateBufferMappedResult"), sWGPUCreateBufferMappedResult);
  Napi::Object sWGPUColor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColor, r)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColor::r)));
    sWGPUColor.Set(Napi::String::New(env, "r"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColor, g)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColor::g)));
    sWGPUColor.Set(Napi::String::New(env, "g"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColor, b)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColor::b)));
    sWGPUColor.Set(Napi::String::New(env, "b"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUColor, a)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColor::a)));
    sWGPUColor.Set(Napi::String::New(env, "a"), obj);
  }
  sWGPUColor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUColor)));
  out.Set(Napi::String::New(env, "WGPUColor"), sWGPUColor);
  Napi::Object sWGPUCommandBufferDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUCommandBufferDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCommandBufferDescriptor::label)));
    sWGPUCommandBufferDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  sWGPUCommandBufferDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCommandBufferDescriptor)));
  out.Set(Napi::String::New(env, "WGPUCommandBufferDescriptor"), sWGPUCommandBufferDescriptor);
  Napi::Object sWGPUCommandEncoderDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUCommandEncoderDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCommandEncoderDescriptor::label)));
    sWGPUCommandEncoderDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  sWGPUCommandEncoderDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUCommandEncoderDescriptor)));
  out.Set(Napi::String::New(env, "WGPUCommandEncoderDescriptor"), sWGPUCommandEncoderDescriptor);
  Napi::Object sWGPUComputePassDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUComputePassDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUComputePassDescriptor::label)));
    sWGPUComputePassDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  sWGPUComputePassDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUComputePassDescriptor)));
  out.Set(Napi::String::New(env, "WGPUComputePassDescriptor"), sWGPUComputePassDescriptor);
  Napi::Object sWGPUComputePipelineDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUComputePipelineDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUComputePipelineDescriptor::label)));
    sWGPUComputePipelineDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUComputePipelineDescriptor, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUComputePipelineDescriptor::layout)));
    sWGPUComputePipelineDescriptor.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUComputePipelineDescriptor, computeStage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUComputePipelineDescriptor::computeStage)));
    sWGPUComputePipelineDescriptor.Set(Napi::String::New(env, "computeStage"), obj);
  }
  sWGPUComputePipelineDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUComputePipelineDescriptor)));
  out.Set(Napi::String::New(env, "WGPUComputePipelineDescriptor"), sWGPUComputePipelineDescriptor);
  Napi::Object sWGPURayTracingPassDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingPassDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingPassDescriptor::label)));
    sWGPURayTracingPassDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  sWGPURayTracingPassDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingPassDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingPassDescriptor"), sWGPURayTracingPassDescriptor);
  Napi::Object sWGPURayTracingStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingStateDescriptor, shaderBindingTable)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingStateDescriptor::shaderBindingTable)));
    sWGPURayTracingStateDescriptor.Set(Napi::String::New(env, "shaderBindingTable"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingStateDescriptor, maxRecursionDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingStateDescriptor::maxRecursionDepth)));
    sWGPURayTracingStateDescriptor.Set(Napi::String::New(env, "maxRecursionDepth"), obj);
  }
  sWGPURayTracingStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingStateDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingStateDescriptor"), sWGPURayTracingStateDescriptor);
  Napi::Object sWGPURayTracingPipelineDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingPipelineDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingPipelineDescriptor::label)));
    sWGPURayTracingPipelineDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingPipelineDescriptor, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingPipelineDescriptor::layout)));
    sWGPURayTracingPipelineDescriptor.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURayTracingPipelineDescriptor, rayTracingState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingPipelineDescriptor::rayTracingState)));
    sWGPURayTracingPipelineDescriptor.Set(Napi::String::New(env, "rayTracingState"), obj);
  }
  sWGPURayTracingPipelineDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURayTracingPipelineDescriptor)));
  out.Set(Napi::String::New(env, "WGPURayTracingPipelineDescriptor"), sWGPURayTracingPipelineDescriptor);
  Napi::Object sWGPUDeviceProperties = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDeviceProperties, textureCompressionBC)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDeviceProperties::textureCompressionBC)));
    sWGPUDeviceProperties.Set(Napi::String::New(env, "textureCompressionBC"), obj);
  }
  sWGPUDeviceProperties.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDeviceProperties)));
  out.Set(Napi::String::New(env, "WGPUDeviceProperties"), sWGPUDeviceProperties);
  Napi::Object sWGPUDepthStencilStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDepthStencilStateDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor::format)));
    sWGPUDepthStencilStateDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDepthStencilStateDescriptor, depthWriteEnabled)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor::depthWriteEnabled)));
    sWGPUDepthStencilStateDescriptor.Set(Napi::String::New(env, "depthWriteEnabled"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDepthStencilStateDescriptor, depthCompare)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor::depthCompare)));
    sWGPUDepthStencilStateDescriptor.Set(Napi::String::New(env, "depthCompare"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDepthStencilStateDescriptor, stencilFront)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor::stencilFront)));
    sWGPUDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilFront"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDepthStencilStateDescriptor, stencilBack)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor::stencilBack)));
    sWGPUDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilBack"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDepthStencilStateDescriptor, stencilReadMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor::stencilReadMask)));
    sWGPUDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilReadMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUDepthStencilStateDescriptor, stencilWriteMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor::stencilWriteMask)));
    sWGPUDepthStencilStateDescriptor.Set(Napi::String::New(env, "stencilWriteMask"), obj);
  }
  sWGPUDepthStencilStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUDepthStencilStateDescriptor)));
  out.Set(Napi::String::New(env, "WGPUDepthStencilStateDescriptor"), sWGPUDepthStencilStateDescriptor);
  Napi::Object sWGPUExtent3D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUExtent3D, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUExtent3D::width)));
    sWGPUExtent3D.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUExtent3D, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUExtent3D::height)));
    sWGPUExtent3D.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUExtent3D, depth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUExtent3D::depth)));
    sWGPUExtent3D.Set(Napi::String::New(env, "depth"), obj);
  }
  sWGPUExtent3D.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUExtent3D)));
  out.Set(Napi::String::New(env, "WGPUExtent3D"), sWGPUExtent3D);
  Napi::Object sWGPUFenceDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUFenceDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUFenceDescriptor::label)));
    sWGPUFenceDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUFenceDescriptor, initialValue)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUFenceDescriptor::initialValue)));
    sWGPUFenceDescriptor.Set(Napi::String::New(env, "initialValue"), obj);
  }
  sWGPUFenceDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUFenceDescriptor)));
  out.Set(Napi::String::New(env, "WGPUFenceDescriptor"), sWGPUFenceDescriptor);
  Napi::Object sWGPUInstanceDescriptor = Napi::Object::New(env);
  sWGPUInstanceDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUInstanceDescriptor)));
  out.Set(Napi::String::New(env, "WGPUInstanceDescriptor"), sWGPUInstanceDescriptor);
  Napi::Object sWGPUVertexAttributeDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexAttributeDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexAttributeDescriptor::format)));
    sWGPUVertexAttributeDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexAttributeDescriptor, offset)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexAttributeDescriptor::offset)));
    sWGPUVertexAttributeDescriptor.Set(Napi::String::New(env, "offset"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexAttributeDescriptor, shaderLocation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexAttributeDescriptor::shaderLocation)));
    sWGPUVertexAttributeDescriptor.Set(Napi::String::New(env, "shaderLocation"), obj);
  }
  sWGPUVertexAttributeDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexAttributeDescriptor)));
  out.Set(Napi::String::New(env, "WGPUVertexAttributeDescriptor"), sWGPUVertexAttributeDescriptor);
  Napi::Object sWGPUVertexBufferLayoutDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexBufferLayoutDescriptor, arrayStride)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexBufferLayoutDescriptor::arrayStride)));
    sWGPUVertexBufferLayoutDescriptor.Set(Napi::String::New(env, "arrayStride"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexBufferLayoutDescriptor, stepMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexBufferLayoutDescriptor::stepMode)));
    sWGPUVertexBufferLayoutDescriptor.Set(Napi::String::New(env, "stepMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexBufferLayoutDescriptor, attributeCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexBufferLayoutDescriptor::attributeCount)));
    sWGPUVertexBufferLayoutDescriptor.Set(Napi::String::New(env, "attributeCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexBufferLayoutDescriptor, attributes)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexBufferLayoutDescriptor::attributes)));
    sWGPUVertexBufferLayoutDescriptor.Set(Napi::String::New(env, "attributes"), obj);
  }
  sWGPUVertexBufferLayoutDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexBufferLayoutDescriptor)));
  out.Set(Napi::String::New(env, "WGPUVertexBufferLayoutDescriptor"), sWGPUVertexBufferLayoutDescriptor);
  Napi::Object sWGPUVertexStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexStateDescriptor, indexFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexStateDescriptor::indexFormat)));
    sWGPUVertexStateDescriptor.Set(Napi::String::New(env, "indexFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexStateDescriptor, vertexBufferCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexStateDescriptor::vertexBufferCount)));
    sWGPUVertexStateDescriptor.Set(Napi::String::New(env, "vertexBufferCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUVertexStateDescriptor, vertexBuffers)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexStateDescriptor::vertexBuffers)));
    sWGPUVertexStateDescriptor.Set(Napi::String::New(env, "vertexBuffers"), obj);
  }
  sWGPUVertexStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUVertexStateDescriptor)));
  out.Set(Napi::String::New(env, "WGPUVertexStateDescriptor"), sWGPUVertexStateDescriptor);
  Napi::Object sWGPUOrigin3D = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUOrigin3D, x)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUOrigin3D::x)));
    sWGPUOrigin3D.Set(Napi::String::New(env, "x"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUOrigin3D, y)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUOrigin3D::y)));
    sWGPUOrigin3D.Set(Napi::String::New(env, "y"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUOrigin3D, z)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUOrigin3D::z)));
    sWGPUOrigin3D.Set(Napi::String::New(env, "z"), obj);
  }
  sWGPUOrigin3D.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUOrigin3D)));
  out.Set(Napi::String::New(env, "WGPUOrigin3D"), sWGPUOrigin3D);
  Napi::Object sWGPUPipelineLayoutDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUPipelineLayoutDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUPipelineLayoutDescriptor::label)));
    sWGPUPipelineLayoutDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUPipelineLayoutDescriptor, bindGroupLayoutCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUPipelineLayoutDescriptor::bindGroupLayoutCount)));
    sWGPUPipelineLayoutDescriptor.Set(Napi::String::New(env, "bindGroupLayoutCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUPipelineLayoutDescriptor, bindGroupLayouts)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUPipelineLayoutDescriptor::bindGroupLayouts)));
    sWGPUPipelineLayoutDescriptor.Set(Napi::String::New(env, "bindGroupLayouts"), obj);
  }
  sWGPUPipelineLayoutDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUPipelineLayoutDescriptor)));
  out.Set(Napi::String::New(env, "WGPUPipelineLayoutDescriptor"), sWGPUPipelineLayoutDescriptor);
  Napi::Object sWGPUProgrammableStageDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUProgrammableStageDescriptor, module)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUProgrammableStageDescriptor::module)));
    sWGPUProgrammableStageDescriptor.Set(Napi::String::New(env, "module"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUProgrammableStageDescriptor, entryPoint)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUProgrammableStageDescriptor::entryPoint)));
    sWGPUProgrammableStageDescriptor.Set(Napi::String::New(env, "entryPoint"), obj);
  }
  sWGPUProgrammableStageDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUProgrammableStageDescriptor)));
  out.Set(Napi::String::New(env, "WGPUProgrammableStageDescriptor"), sWGPUProgrammableStageDescriptor);
  Napi::Object sWGPURasterizationStateDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURasterizationStateDescriptor, frontFace)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURasterizationStateDescriptor::frontFace)));
    sWGPURasterizationStateDescriptor.Set(Napi::String::New(env, "frontFace"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURasterizationStateDescriptor, cullMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURasterizationStateDescriptor::cullMode)));
    sWGPURasterizationStateDescriptor.Set(Napi::String::New(env, "cullMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURasterizationStateDescriptor, depthBias)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURasterizationStateDescriptor::depthBias)));
    sWGPURasterizationStateDescriptor.Set(Napi::String::New(env, "depthBias"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURasterizationStateDescriptor, depthBiasSlopeScale)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURasterizationStateDescriptor::depthBiasSlopeScale)));
    sWGPURasterizationStateDescriptor.Set(Napi::String::New(env, "depthBiasSlopeScale"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURasterizationStateDescriptor, depthBiasClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURasterizationStateDescriptor::depthBiasClamp)));
    sWGPURasterizationStateDescriptor.Set(Napi::String::New(env, "depthBiasClamp"), obj);
  }
  sWGPURasterizationStateDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURasterizationStateDescriptor)));
  out.Set(Napi::String::New(env, "WGPURasterizationStateDescriptor"), sWGPURasterizationStateDescriptor);
  Napi::Object sWGPURenderBundleDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderBundleDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleDescriptor::label)));
    sWGPURenderBundleDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  sWGPURenderBundleDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleDescriptor)));
  out.Set(Napi::String::New(env, "WGPURenderBundleDescriptor"), sWGPURenderBundleDescriptor);
  Napi::Object sWGPURenderBundleEncoderDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderBundleEncoderDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleEncoderDescriptor::label)));
    sWGPURenderBundleEncoderDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderBundleEncoderDescriptor, colorFormatsCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleEncoderDescriptor::colorFormatsCount)));
    sWGPURenderBundleEncoderDescriptor.Set(Napi::String::New(env, "colorFormatsCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderBundleEncoderDescriptor, colorFormats)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleEncoderDescriptor::colorFormats)));
    sWGPURenderBundleEncoderDescriptor.Set(Napi::String::New(env, "colorFormats"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderBundleEncoderDescriptor, depthStencilFormat)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleEncoderDescriptor::depthStencilFormat)));
    sWGPURenderBundleEncoderDescriptor.Set(Napi::String::New(env, "depthStencilFormat"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderBundleEncoderDescriptor, sampleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleEncoderDescriptor::sampleCount)));
    sWGPURenderBundleEncoderDescriptor.Set(Napi::String::New(env, "sampleCount"), obj);
  }
  sWGPURenderBundleEncoderDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderBundleEncoderDescriptor)));
  out.Set(Napi::String::New(env, "WGPURenderBundleEncoderDescriptor"), sWGPURenderBundleEncoderDescriptor);
  Napi::Object sWGPURenderPassColorAttachmentDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassColorAttachmentDescriptor, attachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassColorAttachmentDescriptor::attachment)));
    sWGPURenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "attachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassColorAttachmentDescriptor, resolveTarget)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassColorAttachmentDescriptor::resolveTarget)));
    sWGPURenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "resolveTarget"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassColorAttachmentDescriptor, loadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassColorAttachmentDescriptor::loadOp)));
    sWGPURenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "loadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassColorAttachmentDescriptor, storeOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassColorAttachmentDescriptor::storeOp)));
    sWGPURenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "storeOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassColorAttachmentDescriptor, clearColor)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassColorAttachmentDescriptor::clearColor)));
    sWGPURenderPassColorAttachmentDescriptor.Set(Napi::String::New(env, "clearColor"), obj);
  }
  sWGPURenderPassColorAttachmentDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassColorAttachmentDescriptor)));
  out.Set(Napi::String::New(env, "WGPURenderPassColorAttachmentDescriptor"), sWGPURenderPassColorAttachmentDescriptor);
  Napi::Object sWGPURenderPassDepthStencilAttachmentDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDepthStencilAttachmentDescriptor, attachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor::attachment)));
    sWGPURenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "attachment"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDepthStencilAttachmentDescriptor, depthLoadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor::depthLoadOp)));
    sWGPURenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "depthLoadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDepthStencilAttachmentDescriptor, depthStoreOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor::depthStoreOp)));
    sWGPURenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "depthStoreOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDepthStencilAttachmentDescriptor, clearDepth)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor::clearDepth)));
    sWGPURenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "clearDepth"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDepthStencilAttachmentDescriptor, stencilLoadOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor::stencilLoadOp)));
    sWGPURenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "stencilLoadOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDepthStencilAttachmentDescriptor, stencilStoreOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor::stencilStoreOp)));
    sWGPURenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "stencilStoreOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDepthStencilAttachmentDescriptor, clearStencil)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor::clearStencil)));
    sWGPURenderPassDepthStencilAttachmentDescriptor.Set(Napi::String::New(env, "clearStencil"), obj);
  }
  sWGPURenderPassDepthStencilAttachmentDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDepthStencilAttachmentDescriptor)));
  out.Set(Napi::String::New(env, "WGPURenderPassDepthStencilAttachmentDescriptor"), sWGPURenderPassDepthStencilAttachmentDescriptor);
  Napi::Object sWGPURenderPassDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDescriptor::label)));
    sWGPURenderPassDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDescriptor, colorAttachmentCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDescriptor::colorAttachmentCount)));
    sWGPURenderPassDescriptor.Set(Napi::String::New(env, "colorAttachmentCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDescriptor, colorAttachments)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDescriptor::colorAttachments)));
    sWGPURenderPassDescriptor.Set(Napi::String::New(env, "colorAttachments"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPassDescriptor, depthStencilAttachment)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDescriptor::depthStencilAttachment)));
    sWGPURenderPassDescriptor.Set(Napi::String::New(env, "depthStencilAttachment"), obj);
  }
  sWGPURenderPassDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPassDescriptor)));
  out.Set(Napi::String::New(env, "WGPURenderPassDescriptor"), sWGPURenderPassDescriptor);
  Napi::Object sWGPURenderPipelineDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::label)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, layout)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::layout)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "layout"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, vertexStage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::vertexStage)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "vertexStage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, fragmentStage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::fragmentStage)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "fragmentStage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, vertexState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::vertexState)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "vertexState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, primitiveTopology)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::primitiveTopology)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "primitiveTopology"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, rasterizationState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::rasterizationState)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "rasterizationState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, sampleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::sampleCount)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "sampleCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, depthStencilState)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::depthStencilState)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "depthStencilState"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, colorStateCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::colorStateCount)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "colorStateCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, colorStates)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::colorStates)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "colorStates"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, sampleMask)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::sampleMask)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "sampleMask"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPURenderPipelineDescriptor, alphaToCoverageEnabled)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor::alphaToCoverageEnabled)));
    sWGPURenderPipelineDescriptor.Set(Napi::String::New(env, "alphaToCoverageEnabled"), obj);
  }
  sWGPURenderPipelineDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPURenderPipelineDescriptor)));
  out.Set(Napi::String::New(env, "WGPURenderPipelineDescriptor"), sWGPURenderPipelineDescriptor);
  Napi::Object sWGPUSamplerDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::label)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, addressModeU)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::addressModeU)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "addressModeU"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, addressModeV)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::addressModeV)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "addressModeV"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, addressModeW)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::addressModeW)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "addressModeW"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, magFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::magFilter)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "magFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, minFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::minFilter)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "minFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, mipmapFilter)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::mipmapFilter)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "mipmapFilter"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, lodMinClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::lodMinClamp)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "lodMinClamp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, lodMaxClamp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::lodMaxClamp)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "lodMaxClamp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSamplerDescriptor, compare)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor::compare)));
    sWGPUSamplerDescriptor.Set(Napi::String::New(env, "compare"), obj);
  }
  sWGPUSamplerDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSamplerDescriptor)));
  out.Set(Napi::String::New(env, "WGPUSamplerDescriptor"), sWGPUSamplerDescriptor);
  Napi::Object sWGPUShaderModuleDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUShaderModuleDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUShaderModuleDescriptor::label)));
    sWGPUShaderModuleDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUShaderModuleDescriptor, codeSize)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUShaderModuleDescriptor::codeSize)));
    sWGPUShaderModuleDescriptor.Set(Napi::String::New(env, "codeSize"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUShaderModuleDescriptor, code)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUShaderModuleDescriptor::code)));
    sWGPUShaderModuleDescriptor.Set(Napi::String::New(env, "code"), obj);
  }
  sWGPUShaderModuleDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUShaderModuleDescriptor)));
  out.Set(Napi::String::New(env, "WGPUShaderModuleDescriptor"), sWGPUShaderModuleDescriptor);
  Napi::Object sWGPUStencilStateFaceDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUStencilStateFaceDescriptor, compare)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUStencilStateFaceDescriptor::compare)));
    sWGPUStencilStateFaceDescriptor.Set(Napi::String::New(env, "compare"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUStencilStateFaceDescriptor, failOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUStencilStateFaceDescriptor::failOp)));
    sWGPUStencilStateFaceDescriptor.Set(Napi::String::New(env, "failOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUStencilStateFaceDescriptor, depthFailOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUStencilStateFaceDescriptor::depthFailOp)));
    sWGPUStencilStateFaceDescriptor.Set(Napi::String::New(env, "depthFailOp"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUStencilStateFaceDescriptor, passOp)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUStencilStateFaceDescriptor::passOp)));
    sWGPUStencilStateFaceDescriptor.Set(Napi::String::New(env, "passOp"), obj);
  }
  sWGPUStencilStateFaceDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUStencilStateFaceDescriptor)));
  out.Set(Napi::String::New(env, "WGPUStencilStateFaceDescriptor"), sWGPUStencilStateFaceDescriptor);
  Napi::Object sWGPUSurfaceDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSurfaceDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptor::label)));
    sWGPUSurfaceDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  sWGPUSurfaceDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptor)));
  out.Set(Napi::String::New(env, "WGPUSurfaceDescriptor"), sWGPUSurfaceDescriptor);
  Napi::Object sWGPUSurfaceDescriptorFromHTMLCanvasId = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSurfaceDescriptorFromHTMLCanvasId, id)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromHTMLCanvasId::id)));
    sWGPUSurfaceDescriptorFromHTMLCanvasId.Set(Napi::String::New(env, "id"), obj);
  }
  sWGPUSurfaceDescriptorFromHTMLCanvasId.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromHTMLCanvasId)));
  out.Set(Napi::String::New(env, "WGPUSurfaceDescriptorFromHTMLCanvasId"), sWGPUSurfaceDescriptorFromHTMLCanvasId);
  Napi::Object sWGPUSurfaceDescriptorFromMetalLayer = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSurfaceDescriptorFromMetalLayer, layer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromMetalLayer::layer)));
    sWGPUSurfaceDescriptorFromMetalLayer.Set(Napi::String::New(env, "layer"), obj);
  }
  sWGPUSurfaceDescriptorFromMetalLayer.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromMetalLayer)));
  out.Set(Napi::String::New(env, "WGPUSurfaceDescriptorFromMetalLayer"), sWGPUSurfaceDescriptorFromMetalLayer);
  Napi::Object sWGPUSurfaceDescriptorFromWindowsHWND = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSurfaceDescriptorFromWindowsHWND, hinstance)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromWindowsHWND::hinstance)));
    sWGPUSurfaceDescriptorFromWindowsHWND.Set(Napi::String::New(env, "hinstance"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSurfaceDescriptorFromWindowsHWND, hwnd)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromWindowsHWND::hwnd)));
    sWGPUSurfaceDescriptorFromWindowsHWND.Set(Napi::String::New(env, "hwnd"), obj);
  }
  sWGPUSurfaceDescriptorFromWindowsHWND.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromWindowsHWND)));
  out.Set(Napi::String::New(env, "WGPUSurfaceDescriptorFromWindowsHWND"), sWGPUSurfaceDescriptorFromWindowsHWND);
  Napi::Object sWGPUSurfaceDescriptorFromXlib = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSurfaceDescriptorFromXlib, display)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromXlib::display)));
    sWGPUSurfaceDescriptorFromXlib.Set(Napi::String::New(env, "display"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSurfaceDescriptorFromXlib, window)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromXlib::window)));
    sWGPUSurfaceDescriptorFromXlib.Set(Napi::String::New(env, "window"), obj);
  }
  sWGPUSurfaceDescriptorFromXlib.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSurfaceDescriptorFromXlib)));
  out.Set(Napi::String::New(env, "WGPUSurfaceDescriptorFromXlib"), sWGPUSurfaceDescriptorFromXlib);
  Napi::Object sWGPUSwapChainDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSwapChainDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor::label)));
    sWGPUSwapChainDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSwapChainDescriptor, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor::usage)));
    sWGPUSwapChainDescriptor.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSwapChainDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor::format)));
    sWGPUSwapChainDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSwapChainDescriptor, width)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor::width)));
    sWGPUSwapChainDescriptor.Set(Napi::String::New(env, "width"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSwapChainDescriptor, height)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor::height)));
    sWGPUSwapChainDescriptor.Set(Napi::String::New(env, "height"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSwapChainDescriptor, presentMode)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor::presentMode)));
    sWGPUSwapChainDescriptor.Set(Napi::String::New(env, "presentMode"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUSwapChainDescriptor, implementation)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor::implementation)));
    sWGPUSwapChainDescriptor.Set(Napi::String::New(env, "implementation"), obj);
  }
  sWGPUSwapChainDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUSwapChainDescriptor)));
  out.Set(Napi::String::New(env, "WGPUSwapChainDescriptor"), sWGPUSwapChainDescriptor);
  Napi::Object sWGPUTextureCopyView = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureCopyView, texture)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureCopyView::texture)));
    sWGPUTextureCopyView.Set(Napi::String::New(env, "texture"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureCopyView, mipLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureCopyView::mipLevel)));
    sWGPUTextureCopyView.Set(Napi::String::New(env, "mipLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureCopyView, arrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureCopyView::arrayLayer)));
    sWGPUTextureCopyView.Set(Napi::String::New(env, "arrayLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureCopyView, origin)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureCopyView::origin)));
    sWGPUTextureCopyView.Set(Napi::String::New(env, "origin"), obj);
  }
  sWGPUTextureCopyView.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureCopyView)));
  out.Set(Napi::String::New(env, "WGPUTextureCopyView"), sWGPUTextureCopyView);
  Napi::Object sWGPUTextureDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::label)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, usage)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::usage)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "usage"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, dimension)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::dimension)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "dimension"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, size)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::size)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "size"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, arrayLayerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::arrayLayerCount)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "arrayLayerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::format)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, mipLevelCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::mipLevelCount)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "mipLevelCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureDescriptor, sampleCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor::sampleCount)));
    sWGPUTextureDescriptor.Set(Napi::String::New(env, "sampleCount"), obj);
  }
  sWGPUTextureDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureDescriptor)));
  out.Set(Napi::String::New(env, "WGPUTextureDescriptor"), sWGPUTextureDescriptor);
  Napi::Object sWGPUTextureViewDescriptor = Napi::Object::New(env);
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, label)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::label)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "label"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, format)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::format)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "format"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, dimension)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::dimension)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "dimension"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, baseMipLevel)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::baseMipLevel)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "baseMipLevel"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, mipLevelCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::mipLevelCount)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "mipLevelCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, baseArrayLayer)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::baseArrayLayer)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "baseArrayLayer"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, arrayLayerCount)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::arrayLayerCount)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "arrayLayerCount"), obj);
  }
  {
    Napi::Object obj = Napi::Object::New(env);
    obj.Set(strByteOffset, Napi::Number::New(env, offsetof(WGPUTextureViewDescriptor, aspect)));
    obj.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor::aspect)));
    sWGPUTextureViewDescriptor.Set(Napi::String::New(env, "aspect"), obj);
  }
  sWGPUTextureViewDescriptor.Set(strByteLength, Napi::Number::New(env, sizeof(WGPUTextureViewDescriptor)));
  out.Set(Napi::String::New(env, "WGPUTextureViewDescriptor"), sWGPUTextureViewDescriptor);
  

  return out;
}
